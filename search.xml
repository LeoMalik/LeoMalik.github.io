<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/HDU%202000-2099%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0.html"/>
      <url>/HDU%202000-2099%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<p>都说HDU 2000-2099 是acm入门必刷题，为了备战蓝桥杯，巩固知识，我做了一些小笔记与总结。</p><a id="more"></a><h3 id="HDU-1002-A-B-Problem-two-大数问题"><a href="#HDU-1002-A-B-Problem-two-大数问题" class="headerlink" title="HDU 1002 A+B Problem two(大数问题)"></a>HDU 1002 A+B Problem two(大数问题)</h3><p>大数问题，通用的方法是使用string进行ascii码的加减</p><ul><li>两个数字的ascii码相加减去 <code>0</code> 就是对应数字的ascii码</li><li>如果相加的数大于10,相加的ascii码减去<code>10</code>就是个位数</li></ul><p>代码如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">sum</span><span class="params">(<span class="built_in">string</span> &amp;s1, <span class="built_in">string</span> &amp;s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s1 == <span class="string">""</span> &amp;&amp; s2 == <span class="string">""</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">    <span class="keyword">if</span> (s1 == <span class="string">""</span>)</span><br><span class="line">        <span class="keyword">return</span> s2;</span><br><span class="line">    <span class="keyword">if</span> (s2 == <span class="string">""</span>)</span><br><span class="line">        <span class="keyword">return</span> s1;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> max, min;</span><br><span class="line">    <span class="keyword">int</span> lens1 = s1.length();</span><br><span class="line">    <span class="keyword">int</span> lens2 = s2.length();</span><br><span class="line">    <span class="keyword">if</span> (lens1 &lt; lens2)</span><br><span class="line">    &#123;</span><br><span class="line">        max = s2;</span><br><span class="line">        min = s1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        max = s1;</span><br><span class="line">        min = s2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> maxlen = max.length();</span><br><span class="line">    <span class="keyword">int</span> minlen = min.length();</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = maxlen - <span class="number">1</span>, j = minlen - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--, i--)</span><br><span class="line">    &#123;</span><br><span class="line">        max[i] = max[i] + min[i] - <span class="string">'0'</span>; <span class="comment">//相加的ascii码-0就是对应数组的ascii码</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = maxlen - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (max[i] &gt; <span class="string">'9'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            max[i] = max[i] - <span class="number">10</span>; <span class="comment">//相加的ascii码-10就是个位数</span></span><br><span class="line">            max[i - <span class="number">1</span>] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (max[<span class="number">0</span>] &gt; <span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        max[<span class="number">0</span>] -= <span class="number">10</span>;</span><br><span class="line">        max = <span class="string">"1"</span> + max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> count = num;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (num)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> s1, s2;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case "</span> &lt;&lt; i &lt;&lt; <span class="string">":"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; s1 &lt;&lt; <span class="string">" + "</span> &lt;&lt; s2 &lt;&lt; <span class="string">" = "</span> &lt;&lt; sum(s1, s2) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; count)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        num--;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HDU-2018-母牛的故事-递推"><a href="#HDU-2018-母牛的故事-递推" class="headerlink" title="HDU 2018 母牛的故事(递推)"></a>HDU 2018 母牛的故事(递推)</h3><p>相似：<strong>HDU 2044~2050,HDU2041</strong></p><p><strong>Description</strong><br>　　有一头母牛，它每年年初生一头小母牛。每头小母牛从第四个年头开始，每年年初也生一头小母牛。请编程实现在第n年的时候，共有多少头母牛？<br><strong>Input</strong><br>　　输入数据由多个测试实例组成，每个测试实例占一行，包括一个整数n(0&lt; n&lt; 55)，n的含义如题目中描述。<br>　　n=0表示输入数据的结束，不做处理。<br><strong>Output</strong><br>　　对于每个测试实例，输出在第n年的时候母牛的数量。<br>　　每个输出占一行。</p><p><strong>分析</strong>:<br>​    以n=6为例，fn=9头牛可以分解为6+3，其中6是上一年（第5年）的牛，3是新生的牛（因为第3年有3头牛，这3头在第6年各生一头牛）。<br>　　我们可以得出这样一个公式：fn=fn-1+fn-3<br>　　再理解一下，fn-1是前一年的牛，第n年仍然在，fn-3是前三年那一年的牛，但换句话说也就是第n年具有生育能力的牛，也就是第n年能生下的小牛数。</p><p><strong>代码:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&amp;&amp;n!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;f(n)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">return</span> n; <span class="comment">//第1，2，3年，各为1，2，3头</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> f(n<span class="number">-1</span>)+f(n<span class="number">-3</span>);  <span class="comment">//第n年为前一年的和前3年的相加</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HDU-2031-进制转换-模拟"><a href="#HDU-2031-进制转换-模拟" class="headerlink" title="HDU 2031 进制转换(模拟):"></a>HDU 2031 进制转换(模拟):</h3><p><strong>Problem Description</strong></p><p>输入一个十进制数N，将它转换成R进制数输出。</p><p><strong>Input</strong></p><p>输入数据包含多个测试实例，每个测试实例包含两个整数N(32位整数)和R（2&lt;=R&lt;=16, R&lt;&gt;10）。 </p><p><strong>Output</strong></p><p>为每个测试实例输出转换后的数，每个输出占一行。如果R大于10，则对应的数字规则参考16进制（比如，10用A表示，等等）。</p><p><strong>分析:</strong></p><p> 进制转换,也就是取余,以7的二进制表示:</p><ol><li>7%2=1…7/2=3</li><li>3%2=1…3/2=1</li><li>1%2=1…1/2=0</li></ol><p>取余的数字拼接为111,直到商为0为止,即是7的二进制表示</p><p><strong>代码:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,r,i,x,flag;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;r)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (n&lt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            n=-n;</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        x=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n)</span><br><span class="line">        &#123;</span><br><span class="line">            a[x]=n%r;</span><br><span class="line">            n/=r;</span><br><span class="line">            x++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (x--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"-"</span>);</span><br><span class="line">                flag=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (a[x]&lt;<span class="number">10</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>,a[x]);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%c"</span>,<span class="number">55</span>+a[x]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HDU-2048-神、上帝以及老天爷-错排问题"><a href="#HDU-2048-神、上帝以及老天爷-错排问题" class="headerlink" title="HDU 2048 神、上帝以及老天爷(错排问题)"></a>HDU 2048 神、上帝以及老天爷(错排问题)</h3><p>相似：<strong>HDU 2049</strong></p><p><strong>Description</strong></p><p>HDU 2006’10 ACM contest的颁奖晚会隆重开始了！<br>为了活跃气氛，组织者举行了一个别开生面、奖品丰厚的抽奖活动，这个活动的具体要求是这样的：</p><p>首先，所有参加晚会的人员都将一张写有自己名字的字条放入抽奖箱中；<br>然后，待所有字条加入完毕，每人从箱中取一个字条；<br>最后，如果取得的字条上写的就是自己的名字，那么“恭喜你，中奖了！”</p><p>大家可以想象一下当时的气氛之热烈，毕竟中奖者的奖品是大家梦寐以求的Twins签名照呀！不过，正如所有试图设计的喜剧往往以悲剧结尾，这次抽奖活动最后竟然没有一个人中奖！</p><p>我的神、上帝以及老天爷呀，怎么会这样呢？</p><p>不过，先不要激动，现在问题来了，你能计算一下发生这种情况的概率吗？</p><p>不会算？难道你也想以悲剧结尾？！</p><p><strong>Input</strong></p><p>输入数据的第一行是一个整数C,表示测试实例的个数，然后是C 行数据，每行包含一个整数n(1 &lt; n &lt; =20),表示参加抽奖的人数。</p><p><strong>Output</strong></p><p>对于每个测试实例，请输出发生这种情况的百分比，每个实例的输出占一行, 结果保留两位小数(四舍五入)，具体格式请参照sample output。</p><p><strong>分析:</strong></p><p>典型的错排问题,具体思路如下:</p><p>当n个编号元素放在n个编号位置，元素编号与位置编号各不对应的方法数用D(n)表示，那么D(n-1)就表示n-1个编号元素放在n-1个编号位置，各不对应的方法数，其它类推. </p><ol><li>把第n个元素放在一个位置，比如位置k，一共有n-1种方法； </li><li>放编号为k的元素，这时有两种情况：⑴把它放到位置n，那么，对于剩下的n-1个元素，由于第k个元素放到了位置n，剩下n-2个元素就有D(n-2)种方法；⑵第k个元素不把它放到位置n，这时，对于这n-1个元素，有D(n-1)种方法；<br>综上得到 D(n) = (n-1) [D(n-2) + D(n-1)]<br>特殊地，D(1) = 0, D(2) = 1.</li></ol><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> i,j,num;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> D[<span class="number">22</span>],F[<span class="number">22</span>];</span><br><span class="line">    D[<span class="number">1</span>]=<span class="number">0</span>;D[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">3</span>;i&lt;<span class="number">21</span>;i++)</span><br><span class="line">        D[i]=(i<span class="number">-1</span>)*(D[i<span class="number">-1</span>]+D[i<span class="number">-2</span>]);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">20</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">        F[i]=i;</span><br><span class="line">        <span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;<span class="number">1</span>;j--)</span><br><span class="line">            F[i]*=j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num);</span><br><span class="line">    <span class="keyword">while</span>(num--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2lf%%\n"</span>,D[n]*<span class="number">100.0</span>/F[n]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HDU-2053-Switch-Game-开灯问题-唯一分解定理"><a href="#HDU-2053-Switch-Game-开灯问题-唯一分解定理" class="headerlink" title="HDU 2053 Switch Game(开灯问题,唯一分解定理)"></a>HDU 2053 Switch Game(开灯问题,唯一分解定理)</h3><p><strong>Problem Description</strong></p><p>There are many lamps in a line. All of them are off at first. A series of operations are carried out on these lamps. On the i-th operation, the lamps whose numbers are the multiple of i change the condition ( on to off and off to on ).</p><p><strong>Input</strong></p><p>Each test case contains only a number n ( 0&lt; n&lt;= 10^5) in a line.</p><p><strong>Output</strong></p><p>Output the condition of the n-th lamp after infinity operations ( 0 - off, 1 - on ).</p><p><strong>分析：</strong></p><p>36的约数是 (1,36), (2,18), (3,12), (4,9), (6)，任何一个数都是由两个不同的数相乘得到的，但是如果一个数为平方数，那么这两个数就可以相等，例如36由两个6相乘得到，所以要判断灯的状态，只需要判断这个数是不是平方数即可</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> x=<span class="built_in">sqrt</span>(n*<span class="number">1.0</span>);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;(x==<span class="keyword">int</span>(x))&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HDU-2057-A-B-Again-16进制数相加"><a href="#HDU-2057-A-B-Again-16进制数相加" class="headerlink" title="HDU 2057 A + B Again (16进制数相加)"></a>HDU 2057 A + B Again (16进制数相加)</h3><p><strong>Problem Description</strong></p><p>There must be many A + B problems in our HDOJ , now a new one is coming.<br>Give you two hexadecimal integers , your task is to calculate the sum of them,and print it in hexadecimal too.<br>Easy ? AC it !</p><p><strong>Input</strong></p><p>The input contains several test cases, please process to the end of the file.<br>Each case consists of two hexadecimal integers A and B in a line seperated by a blank.<br>The length of A and B is less than 15.</p><p><strong>Output</strong></p><p>For each test case,print the sum of A and B in hexadecimal in one line.</p><p><strong>分析：</strong></p><p>涉及到16进制内的加法，可以用%I64x直接来处理，要<strong>注意到16进制中负数是用补码来表示的</strong>。一个比较困惑的事实是，这道题再输出时，%64X中‘X’必须是大写，小写是过不了的。</p><p><strong>注意</strong>：__int64 %I64X ,输出用大写</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __int64 a,b,c;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%I64X%I64X"</span>,&amp;a,&amp;b))</span><br><span class="line">    &#123;</span><br><span class="line">        c=a+b;</span><br><span class="line">        <span class="keyword">if</span>(c&gt;=<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%I64X\n"</span>,c);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"-%I64X\n"</span>,-c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HDU-2062-Subset-sequence（子序列）"><a href="#HDU-2062-Subset-sequence（子序列）" class="headerlink" title="HDU 2062 Subset sequence（子序列）"></a>HDU 2062 Subset sequence（子序列）</h3><p><strong>Problem Description</strong></p><p>Consider the aggregate An= { 1, 2, …, n }. For example, A1={1}, A3={1,2,3}. A subset sequence is defined as a array of a non-empty subset. Sort all the subset sequece of An in lexicography order. Your task is to find the m-th one.</p><p><strong>Input</strong></p><p>The input contains several test cases. Each test case consists of two numbers n and m ( 0&lt; n&lt;= 20, 0&lt; m&lt;= the total number of the subset sequence of An ).</p><p><strong>Output</strong></p><p>For each test case, you should output the m-th subset sequence of An in one line.</p><p><strong>分析：</strong></p><p>当n=2的时候</p><p>子序列从小到大</p><p>{1},</p><p>{1, 2},</p><p>{2},</p><p>{2, 1}</p><p>当n=3的时候</p><p>子序列从小到大</p><p>{1}</p><p>{1, 2}</p><p>{1, 2, 3}</p><p>{1, 3}</p><p>{1, 3, 2}</p><p>{2}<br>{2, 1}<br>{2, 1, 3}<br>{2, 3}<br>{2, 3, 1}</p><p>{3}<br>{3, 1}<br>{3, 1, 2}<br>{3, 2}<br>{3, 2, 1}</p><p>不难发现，An可以按首数字分成n组，而每组里除了第一项，剩下的就是An-1的子集合了。</p><p>∴f(n) = n[f(n-1) + 1]</p><p>f(1) = 1</p><p>我们拿测试数据3 10来做个示范，解释一下怎么求解。</p><p>因为n=3，所以开始数组里1、2、3三个数。</p><p>我们知道，n=2时，有4种排列，所以上面n=3可以分成三组，每组5个(加上空集)。</p><p>//空集就是说去掉该组第一个数字后为空集</p><p>因此第10个在第二组里。所以第一个是2，把2输出。原来的数组里删除2，变成1、3两个数。然后10 - (2 - 1) * 5 =5，即它在第2组的第5个。</p><p>//请自行推导所在位置</p><p>减去首个空集合，5 - 1 = 4 ≠ 0，表示2后面还有数字。</p><p>因为A1 = 1是，所以再第2组里又可以分成两组，每组2个(加上空集)。</p><p>所以，4在第2组，剩下的数组中，第二个元素是3，所以输出3。再把数组里的3删除，剩下1一个数。</p><p>然后4 - (2 - 1) * 2 = 2，既它是第2组的第2个。</p><p>减去首个空集，2 - 1 = 1 ≠ 0，表示2后面还有数字。</p><p>按上面的方法继续下去，直到n = 0 或 后面为空集为止。</p><p>最后输出数组里的第1个元素，就得到2 3 1，就是解了。从上面的计算可以看出来，本题目的关键是先求的An中每一组的个数g(n)</p><p>不难得出:g(n) = f(n) / n</p><p>∵f(n) = n[f(n-1) + 1]</p><p>∴g(n) = n[f(n-1) + 1] / n = f(n-1) + 1</p><p>∵f(n-1) = (n-1) * g(n-1)</p><p>∴g(n) = (n-1) * g(n-1) + 1</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    __int64 b;</span><br><span class="line">    __int64 g[<span class="number">30</span>];</span><br><span class="line">    g[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    g[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;<span class="number">22</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        g[i]=g[i<span class="number">-1</span>]*(i<span class="number">-1</span>)+<span class="number">1</span>;<span class="comment">//求出g；</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">30</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%I64d"</span>,&amp;a,&amp;b)!=EOF)  <span class="comment">//b的数可能很大，所以用I64d，，用int运行错了</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));<span class="comment">//清零</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a;i++)</span><br><span class="line">            num[i]=i;        <span class="comment">//将要输出的数字保存在数组里</span></span><br><span class="line">        <span class="keyword">int</span> am=a;</span><br><span class="line">        <span class="keyword">while</span>(a--)<span class="comment">//总共有a个数（1---a）最多可能输出a个</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> n=b%g[a+<span class="number">1</span>]? b/g[a+<span class="number">1</span>]+<span class="number">1</span>: b/g[a+<span class="number">1</span>];       <span class="comment">//我们用b取余对应的g，，得到要输出的数在第几组</span></span><br><span class="line">            <span class="keyword">if</span>(num[n]==<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(am<span class="number">-1</span>==a)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>,num[n]);       /  /输出对应的组代表的数字</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" %d"</span>,num[n]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&lt;=a;i++)</span><br><span class="line">                num[i]=num[i+<span class="number">1</span>];            <span class="comment">//将刚输出的数字删掉，，留下剩下的数字，，没用的数字都变成0了</span></span><br><span class="line">            b=(b-g[a+<span class="number">1</span>]*(n<span class="number">-1</span>)<span class="number">-1</span>);   <span class="comment">//把问题缩小到下一组，，， 求出在下一组的位置；循环；直到要输出的num为0，说明所有的数都输完了；</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HDU-2064-汉诺塔Ⅲ（递归）"><a href="#HDU-2064-汉诺塔Ⅲ（递归）" class="headerlink" title="HDU 2064 汉诺塔Ⅲ（递归）"></a>HDU 2064 汉诺塔Ⅲ（递归）</h3><p><strong>Problem Description</strong></p><p>约19世纪末，在欧州的商店中出售一种智力玩具，在一块铜板上有三根杆，最左边的杆上自上而下、由小到大顺序串着由64个圆盘构成的塔。目的是将最左边杆上的盘全部移到右边的杆上，条件是一次只能移动一个盘，且不允许大盘放在小盘的上面。<br>现在我们改变游戏的玩法，不允许直接从最左(右)边移到最右(左)边(每次移动一定是移到中间杆或从中间移出)，也不允许大盘放到下盘的上面。<br>Daisy已经做过原来的汉诺塔问题和汉诺塔II，但碰到这个问题时，她想了很久都不能解决，现在请你帮助她。现在有N个圆盘，她至少多少次移动才能把这些圆盘从最左边移到最右边？</p><p><strong>Input</strong></p><p>包含多组数据，每次输入一个N值(1&lt;=N=35)。</p><p><strong>Output</strong></p><p>对于每组数据，输出移动最小的次数。</p><p><strong>分析：</strong></p><p>建议阅读 <a href="https://www.zhihu.com/question/24385418" rel="external nofollow noopener noreferrer" target="_blank">如何理解汉诺塔的递归？ - 知乎</a></p><p>其实本题的复杂之处就是相当与比以往的汉诺塔多移动了一次柱子，原来<img src="https://www.zhihu.com/equation?tex=a_4%3Da_3%2B1%2Ba_3" alt="a_4=a_3+1+a_3">，现在a4=a3+a3+a3+2(移动最大的圆盘要两次)，理解了便能很快求解</p><p><u><strong><em>待补充：</em></strong></u></p><h3 id="HDU-2059-Seraph2012-DP"><a href="#HDU-2059-Seraph2012-DP" class="headerlink" title="HDU 2059  Seraph2012 (DP)"></a>HDU 2059  Seraph2012 (DP)</h3><h3 id="HDU-2037-今年暑假不AC（贪心）"><a href="#HDU-2037-今年暑假不AC（贪心）" class="headerlink" title="HDU 2037 今年暑假不AC（贪心）"></a>HDU 2037 今年暑假不AC（贪心）</h3><h3 id="HDU-2063-过山车-（二分图的最大匹配、完美匹配和匈牙利算法）"><a href="#HDU-2063-过山车-（二分图的最大匹配、完美匹配和匈牙利算法）" class="headerlink" title="HDU 2063 过山车 （二分图的最大匹配、完美匹配和匈牙利算法）"></a>HDU 2063 过山车 （二分图的最大匹配、完美匹配和匈牙利算法）</h3><p><a href="https://www.renfei.org/blog/bipartite-matching.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.renfei.org/blog/bipartite-matching.html</a></p><h3 id="小技巧："><a href="#小技巧：" class="headerlink" title="小技巧："></a>小技巧：</h3><h5 id="输出控制："><a href="#输出控制：" class="headerlink" title="输出控制："></a>输出控制：</h5><p>c++中用cout输出，要求保留两位小数，比如，输出100，则为100.00</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span>&lt;&lt;setiosflags(ios::fixed)&lt;&lt;setprecision(<span class="number">2</span>)&lt;&lt;<span class="number">456.777</span>&lt;&lt;<span class="built_in">endl</span></span><br></pre></td></tr></table></figure><h5 id="标准开头："><a href="#标准开头：" class="headerlink" title="标准开头："></a>标准开头：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;r)!=EOF)</span><br></pre></td></tr></table></figure><h5 id="16进制数相加："><a href="#16进制数相加：" class="headerlink" title="16进制数相加："></a>16进制数相加：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%I64X%I64X"</span>,&amp;a,&amp;b)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/test.html"/>
      <url>/test.html</url>
      
        <content type="html"><![CDATA[<h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><a id="more"></a><p><img src="https://ws1.sinaimg.cn/mw690/c364e082gy1fykjjog3jcj20xg0gpacc.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tests </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world.html"/>
      <url>/hello-world.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" rel="external nofollow noopener noreferrer" target="_blank">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" rel="external nofollow noopener noreferrer" target="_blank">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" rel="external nofollow noopener noreferrer" target="_blank">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" rel="external nofollow noopener noreferrer" target="_blank">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" rel="external nofollow noopener noreferrer" target="_blank">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" rel="external nofollow noopener noreferrer" target="_blank">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" rel="external nofollow noopener noreferrer" target="_blank">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" rel="external nofollow noopener noreferrer" target="_blank">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> tests </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
