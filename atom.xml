<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wayne&#39;s Blog</title>
  
  <subtitle>“写博客是为了和过去以及未来的自己对话”</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://leomalik.github.io/"/>
  <updated>2019-08-23T03:43:21.223Z</updated>
  <id>http://leomalik.github.io/</id>
  
  <author>
    <name>Wayne</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>待整理目录</title>
    <link href="http://leomalik.github.io/%E5%BE%85%E6%95%B4%E7%90%86.html"/>
    <id>http://leomalik.github.io/待整理.html</id>
    <published>2019-08-23T03:41:03.000Z</published>
    <updated>2019-08-23T03:43:21.223Z</updated>
    
    <content type="html"><![CDATA[<p>最近在准备面试，即将会有一波大的更新。。。</p><a id="more"></a><p><img src="https://raw.githubusercontent.com/LeoMalik/ImgBed/master/img/20190823114236.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在准备面试，即将会有一波大的更新。。。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java高并发秒杀平台实战记录（二）</title>
    <link href="http://leomalik.github.io/java%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A7%92%E6%9D%80%E5%B9%B3%E5%8F%B0%E5%AE%9E%E6%88%98%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%8C%EF%BC%89.html"/>
    <id>http://leomalik.github.io/java高并发秒杀平台实战记录（二）.html</id>
    <published>2019-07-14T15:37:44.000Z</published>
    <updated>2019-07-14T18:01:48.347Z</updated>
    
    <content type="html"><![CDATA[<p>本节主要介绍如何将redis集成到springboot当中</p><a id="more"></a><h2 id="1-springboot集成redis-jedis"><a href="#1-springboot集成redis-jedis" class="headerlink" title="1.springboot集成redis(jedis)"></a>1.springboot集成redis(jedis)</h2><p>新建entity，dao，service，controller，redis文件夹，分别对应不同功能，这里不细谈</p><h3 id="redis文件夹下"><a href="#redis文件夹下" class="headerlink" title="redis文件夹下:"></a>redis文件夹下:</h3><h4 id="redis-redisConfig-java"><a href="#redis-redisConfig-java" class="headerlink" title="redis/redisConfig.java"></a><strong>redis/redisConfig.java</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@lombook</span></span><br><span class="line"><span class="comment">//自动生成getter和setter和toString，十分好用</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//作为组件注入到springboot中</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"redis"</span>)</span><br><span class="line"><span class="comment">//获取application.properties中前缀为redis的属性，用来创建redis服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//根据application.properties中的配置定义类属性，属性必须一一对应</span></span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> timeout;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> poolMaxTotal;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> poolMaxIdle;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> poolMaxWait;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="redisPoolFactory-java"><a href="#redisPoolFactory-java" class="headerlink" title="redisPoolFactory.java"></a><strong>redisPoolFactory.java</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//作为service导入springboot</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisPoolFactory</span> </span>&#123;</span><br><span class="line"><span class="comment">//自动导入前面定义的redisconfig类</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisConfig redisConfig;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用@Bean将JedisPool交由SpringBoot进行管理，这样每次生成JedisPool对象的时候就会自动调用这个方法生成</span></span><br><span class="line">    <span class="comment">//@Bean用来定义方法，@component用来定义类，所以要将第三方库交由Springboot管理一般都用@bean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JedisPool <span class="title">jedisPoolFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//使用第三方库jedis创建线程池管理redis服务</span></span><br><span class="line">        JedisPoolConfig jedisPoolConfig = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">        jedisPoolConfig.setMaxIdle(redisConfig.getPoolMaxIdle());</span><br><span class="line">        jedisPoolConfig.setMaxTotal(redisConfig.getPoolMaxTotal());</span><br><span class="line">        jedisPoolConfig.setMaxWaitMillis(redisConfig.getPoolMaxWait()*<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">int</span> timeout = redisConfig.getTimeout();</span><br><span class="line">        <span class="keyword">int</span> port = redisConfig.getPort();</span><br><span class="line">        String host = redisConfig.getHost();</span><br><span class="line">        String password = redisConfig.getPassword();</span><br><span class="line">        JedisPool jedisPool = <span class="keyword">new</span> JedisPool(jedisPoolConfig,host,port,timeout*<span class="number">1000</span>,password,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> jedisPool;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="basePrefix-java"><a href="#basePrefix-java" class="headerlink" title="basePrefix.java"></a><strong>basePrefix.java</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@lombok</span></span><br><span class="line"><span class="comment">//为了将存入redis的不同对象、不同属性区别开来，我们需要设置不同的key值，这里使用在key值之前加前缀的方法</span></span><br><span class="line"><span class="comment">//例如：secUserKey:token35fa6gs1a23z4g2zsdf ，这样一眼就可以看的出来存储的是什么对象的什么信息</span></span><br><span class="line"><span class="comment">//设置expireSecond，定义数据过期时间</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">basePrefix</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String prefix;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> expireSecond;</span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">getPrefix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取类名，作为前缀</span></span><br><span class="line">        String className = getClass().getSimpleName();</span><br><span class="line">        <span class="keyword">return</span> className + <span class="string">":"</span> + prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getExpireSecond</span><span class="params">()</span> </span>&#123; <span class="comment">//默认0代表永不过期</span></span><br><span class="line">        <span class="keyword">return</span> expireSecond;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SecUserKey-java"><a href="#SecUserKey-java" class="headerlink" title="SecUserKey.java"></a><strong>SecUserKey.java</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//为了将存入redis的不同对象、不同属性区别开来，我们需要设置不同的key值，这里使用在key值之前加前缀的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">secUserKey</span> <span class="keyword">extends</span> <span class="title">basePrefix</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//token两天过期</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TOKEN_EXPIRE = <span class="number">3600</span>*<span class="number">24</span>*<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">secUserKey</span><span class="params">(String prefix, <span class="keyword">int</span> expireSecond)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(prefix, expireSecond);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> secUserKey tokenKey = <span class="keyword">new</span> secUserKey(<span class="string">"token"</span>, TOKEN_EXPIRE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RedisService-java"><a href="#RedisService-java" class="headerlink" title="RedisService.java"></a><strong>RedisService.java</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisService</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  定义redis的基本操作，包括：</span></span><br><span class="line"><span class="comment">  1.序列化入库 2.反序列化出库 3.查询 4.自增减 5.是否存在 6.每次操作以后腾出线程池</span></span><br><span class="line"><span class="comment">  注意这里忽略了dao层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//jedis相关api</span></span><br><span class="line">    <span class="comment">//1.jedis.set 2.incr 2.close 3.setex 4.get</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JedisPool jedisPool;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 获取对象</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">get</span><span class="params">(basePrefix prefix, String key, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jedis = jedisPool.getResource();</span><br><span class="line">            <span class="comment">//导入前缀key</span></span><br><span class="line">            String realKey = prefix.getPrefix() + key;</span><br><span class="line">            <span class="keyword">return</span> stringToBean(jedis.get(realKey), clazz);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            returnToPool(jedis);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*查询对象*/</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">set</span><span class="params">(basePrefix prefix, String key, T Value)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jedis = jedisPool.getResource();</span><br><span class="line">            String str = BeanToString(Value);</span><br><span class="line">            <span class="comment">//为空</span></span><br><span class="line">            <span class="keyword">if</span> (str.length() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//导入前缀key</span></span><br><span class="line">            String realKey = prefix.getPrefix() + key;</span><br><span class="line">            <span class="keyword">if</span> (prefix.getExpireSecond() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//设置数据过期时间</span></span><br><span class="line">                jedis.set(realKey, str);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                jedis.setex(realKey, prefix.getExpireSecond(), str);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            returnToPool(jedis);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*判断是否存在*/</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">exists</span><span class="params">(basePrefix prefix, String key)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jedis = jedisPool.getResource();</span><br><span class="line">            <span class="comment">//导入前缀key</span></span><br><span class="line">            String realKey = prefix.getPrefix() + key;</span><br><span class="line">            <span class="keyword">return</span> jedis.exists(realKey);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            returnToPool(jedis);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*自增，原子操作*/</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Long <span class="title">incr</span><span class="params">(basePrefix prefix, String key)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jedis = jedisPool.getResource();</span><br><span class="line">            String realKey = prefix.getPrefix() + key;</span><br><span class="line">            <span class="keyword">return</span> jedis.incr(realKey);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            returnToPool(jedis);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*自减，原子操作*/</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Long <span class="title">decr</span><span class="params">(basePrefix prefix, String key)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jedis = jedisPool.getResource();</span><br><span class="line">            String realKey = prefix.getPrefix() + key;</span><br><span class="line">            <span class="keyword">return</span> jedis.decr(realKey);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            returnToPool(jedis);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭连接池</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">returnToPool</span><span class="params">(Jedis jedis)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (jedis != <span class="keyword">null</span>) &#123;</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//optional 防null ，序列化，入库</span></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function">String <span class="title">BeanToString</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        return Optional.ofNullable(value)</span></span><br><span class="line"><span class="comment">//                .map(u-&gt; JSON.toJSONString(u))</span></span><br><span class="line"><span class="comment">//                .orElseThrow(()-&gt;new IllegalArgumentException("error beanToString."));</span></span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Class&lt;?&gt; clazz = value.getClass();</span><br><span class="line">        <span class="keyword">if</span> (clazz == <span class="keyword">int</span>.class || clazz == Integer.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span> + value;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clazz == String.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> (String) value;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clazz == <span class="keyword">long</span>.class || clazz == Long.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span> + value;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> JSON.toJSONString(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//optional 防null，反序列化，出库</span></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function">T <span class="title">stringToBean</span><span class="params">(String str, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println(JSON.parse(str).getClass());</span></span><br><span class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span> || str.length() &lt;= <span class="number">0</span> || clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (clazz == <span class="keyword">int</span>.class || clazz == Integer.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> (T) Integer.valueOf(str);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clazz == String.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> (T) str;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clazz == <span class="keyword">long</span>.class || clazz == Long.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> (T) Long.valueOf(str);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> JSON.toJavaObject(JSONObject.parseObject(str), clazz);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-定义User实体和Controller"><a href="#2-定义User实体和Controller" class="headerlink" title="2.定义User实体和Controller"></a>2.定义User实体和Controller</h2><h4 id="TestController-java"><a href="#TestController-java" class="headerlink" title="TestController.java"></a><strong>TestController.java</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//作为controller注入到SpringBoot中</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="comment">//定义统一前缀路径</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisService redisService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置请求路径</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/redis/get"</span>)</span><br><span class="line">    <span class="comment">//表示会返回一个json数据</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result&lt;testUser&gt; <span class="title">redisGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        testUser v1 = redisService.get(userKey.IdKey,<span class="string">"4"</span>, testUser.class);</span><br><span class="line">        <span class="keyword">return</span> Result.success(v1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SecUser.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户类</span></span><br><span class="line"><span class="meta">@lombok</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">secUser</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String salt;</span><br><span class="line">    <span class="keyword">private</span> String head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-统一封装返回类型"><a href="#3-统一封装返回类型" class="headerlink" title="3.统一封装返回类型"></a>3.统一封装返回类型</h2><h3 id="result文件夹下："><a href="#result文件夹下：" class="headerlink" title="result文件夹下："></a>result文件夹下：</h3><h4 id="codeMsg-java"><a href="#codeMsg-java" class="headerlink" title="codeMsg.java"></a><strong>codeMsg.java</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//统一错误信息类，包括错误码和错误信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeMsg</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通用的错误码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CodeMsg SUCCESS = <span class="keyword">new</span> CodeMsg(<span class="number">0</span>, <span class="string">"success"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CodeMsg SERVER_ERROR = <span class="keyword">new</span> CodeMsg(<span class="number">500100</span>, <span class="string">"服务端异常"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CodeMsg BIND_ERROR = <span class="keyword">new</span> CodeMsg(<span class="number">500101</span>, <span class="string">"参数校验异常：%s"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Result-java"><a href="#Result-java" class="headerlink" title="Result.java"></a><strong>Result.java</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//统一返回结果类，包括返回码，返回信息，和返回类T</span></span><br><span class="line"><span class="meta">@lombok</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Result</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本节主要介绍如何将redis集成到springboot当中&lt;/p&gt;
    
    </summary>
    
      <category term="项目学习" scheme="http://leomalik.github.io/categories/%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="高并发" scheme="http://leomalik.github.io/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
      <category term="springBoot" scheme="http://leomalik.github.io/tags/springBoot/"/>
    
      <category term="redis" scheme="http://leomalik.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>二分法之可能是总结的最好的一篇文章</title>
    <link href="http://leomalik.github.io/%E4%BA%8C%E5%88%86%E6%B3%95%E4%B9%8B%E5%8F%AF%E8%83%BD%E6%98%AF%E6%80%BB%E7%BB%93%E7%9A%84%E6%9C%80%E5%A5%BD%E7%9A%84%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0.html"/>
    <id>http://leomalik.github.io/二分法之可能是总结的最好的一篇文章.html</id>
    <published>2019-07-07T15:56:03.000Z</published>
    <updated>2019-07-13T15:25:20.951Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>二分查找有很多种变体，使用时需要注意查找条件，判断条件和左右边界的更新方式，三者配合不好就很容易出现死循环或者遗漏区域，本篇中我们将介绍常见的几种查找方式的模板代码，包括：</p><ol><li>标准的二分查找</li><li>二分查找左边界</li><li>二分查找右边界</li><li>二分查找左右边界</li><li>二分查找极值点<a id="more"></a></li></ol><p>本文的内容来自于笔者个人的总结，事实上二分查找有很多种等价的写法，本文只是列出了笔者认为的最容易理解和记忆的方法。</p><p>二分查找作为程序员的一项基本技能，是面试官最常使用来考察程序员基本素质的算法之一，也是解决很多查找类题目的常用方法，它可以达到O(log n)的时间复杂度。</p><p>一般而言，当一个题目出现以下特性时，你就应该立即联想到它可能需要使用二分查找：</p><ol><li>待查找的数组有序或者部分有序</li><li>要求时间复杂度低于O(n)，或者直接要求时间复杂度为O(log n)</li></ol><h1 id="二分查找、二分边界查找算法的模板代码总结"><a href="#二分查找、二分边界查找算法的模板代码总结" class="headerlink" title="二分查找、二分边界查找算法的模板代码总结"></a><a href="https://segmentfault.com/a/1190000016825704" rel="external nofollow noopener noreferrer" target="_blank">二分查找、二分边界查找算法的模板代码总结</a></h1><ul><li><a href="https://segmentfault.com/t/算法/blogs" rel="external nofollow noopener noreferrer" target="_blank">算法</a></li><li><a href="https://segmentfault.com/t/算法-数据结构/blogs" rel="external nofollow noopener noreferrer" target="_blank">算法-数据结构</a></li><li><a href="https://segmentfault.com/t/模板/blogs" rel="external nofollow noopener noreferrer" target="_blank">模板</a></li><li><a href="https://segmentfault.com/t/总结/blogs" rel="external nofollow noopener noreferrer" target="_blank">总结</a></li><li><a href="https://segmentfault.com/t/二分查找/blogs" rel="external nofollow noopener noreferrer" target="_blank">二分查找</a></li></ul><h2 id="标准二分查找"><a href="#标准二分查找" class="headerlink" title="标准二分查找"></a>标准二分查找</h2><p>首先给出标准二分查找的模板：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class BinarySearch &#123;</span><br><span class="line">    public int search(int[] nums, int target) &#123;</span><br><span class="line">        int left = 0;</span><br><span class="line">        int right = nums.length - 1;</span><br><span class="line">        while (left &lt;= right) &#123;</span><br><span class="line">            int mid = left + ((right - left) &gt;&gt; 1);</span><br><span class="line">            if (nums[mid] == target) return mid;</span><br><span class="line">            else if (nums[mid] &gt; target) &#123;</span><br><span class="line">                right = mid - 1;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                left = mid + 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>循环条件： <code>left &lt;= right</code></li><li>中间位置计算： <code>mid = left + ((right -left) &gt;&gt; 1)</code></li><li>左边界更新：<code>left = mid + 1</code></li><li>右边界更新： <code>right = mid - 1</code></li><li>返回值： <code>mid / -1</code></li></ul><p>这里有几点需要注意：</p><ol><li>我们的循环条件中包含了 <code>left == right</code>的情况，则我们必须在每次循环中改变 <code>left</code> 和 <code>right</code>的指向，以防止进入死循环</li><li>循环终止的条件包括：<ul><li>找到了目标值</li><li><code>left &gt; right</code> （这种情况发生于当left, mid, right指向同一个数时，这个数还不是目标值，则整个查找结束。）</li></ul></li><li><code>left + ((right -left) &gt;&gt; 1)</code> 其实和 <code>(left + right) / 2</code>是等价的，这样写的目的一个是为了防止 <code>(left + right)</code>出现溢出，一个是用右移操作替代除法提升性能。</li><li><code>left + ((right -left) &gt;&gt; 1)</code> 对于目标区域长度为奇数而言，是处于正中间的，对于长度为偶数而言，是中间偏左的。因此左右边界相遇时，只会是以下两种情况：<ul><li><code>left/mid</code> , <code>right</code> (left, mid 指向同一个数，right指向它的下一个数)</li><li><code>left/mid/right</code> （left, mid, right 指向同一个数）</li></ul></li></ol><p>即因为<code>mid</code>对于长度为偶数的区间总是偏左的，所以当区间长度小于等于2时，<code>mid</code> 总是和 <code>left</code>在同一侧。</p><h3 id="实战1：Guess-Number-Higher-or-Lower"><a href="#实战1：Guess-Number-Higher-or-Lower" class="headerlink" title="实战1：Guess Number Higher or Lower"></a>实战1：Guess Number Higher or Lower</h3><ul><li>leetcode 原题： <a href="https://leetcode.com/problems/guess-number-higher-or-lower/" rel="external nofollow noopener noreferrer" target="_blank">https://leetcode.com/problems…</a></li><li>难度等级： Easy</li></ul><blockquote><p>We are playing the Guess Game. The game is as follows:</p><p>I pick a number from 1 to n. You have to guess which number I picked.</p><p>Every time you guess wrong, I’ll tell you whether the number is higher or lower.</p><p>You call a pre-defined API guess(int num) which returns 3 possible results (-1, 1, or 0):</p><p>-1 : My number is lower<br>1 : My number is higher<br>0 : Congrats! You got it!<br>Example :</p><p>Input: n = 10, pick = 6<br>Output: 6</p></blockquote><p>这题基本是可以直接照搬二分查找的，出题者没有做任何包装，我们直接使用标准二分查找：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class Solution extends GuessGame &#123;</span><br><span class="line">    public int guessNumber(int n) &#123;</span><br><span class="line">        int left = 1;</span><br><span class="line">        int right = n;</span><br><span class="line">        while (left &lt;= right) &#123;</span><br><span class="line">            int mid = left + ((right - left) &gt;&gt; 1);</span><br><span class="line">            if (guess(mid) == 0) &#123;</span><br><span class="line">                return mid;</span><br><span class="line">            &#125; else if (guess(mid) == -1) &#123;</span><br><span class="line">                right = mid - 1;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                left = mid + 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实战2：Sqrt-x"><a href="#实战2：Sqrt-x" class="headerlink" title="实战2：Sqrt(x)"></a>实战2：Sqrt(x)</h3><ul><li>leetcode 原题： <a href="https://leetcode.com/problems/sqrtx/" rel="external nofollow noopener noreferrer" target="_blank">https://leetcode.com/problems…</a></li><li>难度等级： Easy</li></ul><blockquote><p>Implement int sqrt(int x).<br>Compute and return the square root of x, where x is guaranteed to be a non-negative integer.<br>Since the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.</p></blockquote><p>这一题其实是二分查找的应用，乍一看好像和二分查找没有关系，但是我们可以用二分查找的思想快速定位到目标值的平方根，属于二分查找的一个简单运用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int mySqrt(int x) &#123;</span><br><span class="line">        if (x &lt;= 1) return x;</span><br><span class="line">        int left = 1;</span><br><span class="line">        int right = x - 1;</span><br><span class="line">        while (left &lt;= right) &#123;</span><br><span class="line">            int mid = left + ((right - left) &gt;&gt; 1);</span><br><span class="line">            if (mid &gt; x / mid) &#123;</span><br><span class="line">                right = mid - 1;</span><br><span class="line">            &#125; else if (mid &lt; x / mid) &#123;</span><br><span class="line">                if (mid + 1 &gt; x / (mid + 1)) return mid;</span><br><span class="line">                left = mid + 1;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1; // only for return a value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然是简单的题目，但是还是要注意对溢出的处理，例如我们使用 <code>mid &gt; x / mid</code> 而不是 <code>mid * mide &gt; x</code> 作为判断条件，因为后者可能会导致溢出，这与我们使用 <code>left + ((right - left) &gt;&gt; 1)</code> 而不是 <code>(left + right) / 2</code> 作为<code>mid</code>的值是一个道理，这是因为 <code>left + right</code> 也可能溢出。</p><h2 id="二分查找左边界"><a href="#二分查找左边界" class="headerlink" title="二分查找左边界"></a>二分查找左边界</h2><p>利用二分法寻找左边界是二分查找的一个变体，应用它的题目常常有以下几种特性之一：</p><ol><li>数组有序，但包含重复元素</li><li>数组部分有序，且不包含重复元素</li><li>数组部分有序，且包含重复元素</li></ol><h3 id="左边界查找类型1"><a href="#左边界查找类型1" class="headerlink" title="左边界查找类型1"></a>左边界查找类型1</h3><p>类型1包括了上面说的第一种，第二种情况。</p><p>既然要寻找左边界，搜索范围就需要从右边开始，不断往左边收缩，也就是说即使我们找到了<code>nums[mid] == target</code>, 这个<code>mid</code>的位置也不一定就是最左侧的那个边界，我们还是要向左侧查找，所以我们在<code>nums[mid]</code>偏大或<code>者nums[mid]</code>就等于目标值的时候，继续收缩右边界，算法模板如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int search(int[] nums, int target) &#123;</span><br><span class="line">        int left = 0;</span><br><span class="line">        int right = nums.length - 1;</span><br><span class="line">        while (left &lt; right) &#123;</span><br><span class="line">            int mid = left + (right - left) / 2;</span><br><span class="line">            if (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + 1;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return nums[left] == target ? left : -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>循环条件： <code>left &lt; right</code></li><li>中间位置计算： <code>mid = left + ((right -left) &gt;&gt; 1)</code></li><li>左边界更新：<code>left = mid + 1</code></li><li>右边界更新： <code>right = mid</code></li><li>返回值： <code>nums[left] == target ? left : -1</code></li></ul><p>与标准的二分查找不同：</p><p>首先，这里的右边界的更新是<code>right = mid</code>，因为我们需要在找到目标值后，继续向左寻找左边界。</p><p>其次，这里的循环条件是<code>left &lt; right</code>。<br>因为在最后<code>left</code>与<code>right</code>相邻的时候，<code>mid</code>和<code>left</code>处于相同的位置(前面说过，<code>mid</code>偏左)，则下一步，无论怎样，<code>left</code>, <code>mid</code>, <code>right</code>都将指向同一个位置，如果此时循环的条件是<code>left &lt;= right</code>，则我们需要再进入一遍循环，此时，如果<code>nums[mid] &lt; target</code>还好说，循环正常终止；否则，我们会令<code>right = mid</code>，这样并没有改变<code>left</code>,<code>mid</code>,<code>right</code>的位置，将进入死循环。</p><p>事实上，我们只需要遍历到<code>left</code>和<code>right</code>相邻的情况就行了，因为这一轮循环后，无论怎样，<code>left</code>,<code>mid</code>,<code>right</code>都会指向同一个位置，而如果这个位置的值等于目标值，则它就一定是最左侧的目标值；如果不等于目标值，则说明没有找到目标值，这也就是为什么返回值是<code>nums[left] == target ? left : -1</code>。</p><h3 id="左边界查找类型2"><a href="#左边界查找类型2" class="headerlink" title="左边界查找类型2"></a>左边界查找类型2</h3><p>左边界查找的第二种类型用于数组部分有序且包含重复元素的情况，这种条件下在我们向左收缩的时候，不能简单的令 <code>right = mid</code>，因为有重复元素的存在，这会导致我们有可能遗漏掉一部分区域，此时向左收缩只能采用比较保守的方式，代码模板如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int search(int[] nums, int target) &#123;</span><br><span class="line">        int left = 0;</span><br><span class="line">        int right = nums.length - 1;</span><br><span class="line">        while (left &lt; right) &#123;</span><br><span class="line">            int mid = left + (right - left) / 2;</span><br><span class="line">            if (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + 1;</span><br><span class="line">            &#125; else if (nums[mid] &gt; target) &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return nums[left] == target ? left : -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它与类型1的唯一区别就在于对右侧值的收缩更加保守。这种收缩方式可以有效地防止我们一下子跳过了目标边界从而导致了搜索区域的遗漏。</p><p>关于这种类型的例子，可以看下面的实战5。</p><h3 id="实战3：First-Bad-Version"><a href="#实战3：First-Bad-Version" class="headerlink" title="实战3：First Bad Version"></a>实战3：First Bad Version</h3><ul><li>leetcode 原题： <a href="https://leetcode.com/problems/first-bad-version/" rel="external nofollow noopener noreferrer" target="_blank">https://leetcode.com/problems…</a></li><li>难度等级： Easy</li></ul><p>这道题的题目比较长，原题就不贴了，大意就是说：有这么一个数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[false, false, false, ..., fasle, true, true, ..., true]</span><br></pre></td></tr></table></figure><p>求最左侧的那个<code>true</code>的位置。</p><p>这就是一个典型的查找左边界的问题：数组中包含重复元素，我们需要找到最左侧边界的位置。直接使用二分查找左边界的模板就行了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class Solution extends VersionControl &#123;</span><br><span class="line">    public int firstBadVersion(int n) &#123;</span><br><span class="line">        int left = 0;</span><br><span class="line">        int right = n - 1;</span><br><span class="line">        while (left &lt; right) &#123;</span><br><span class="line">            int mid = left + ((right - left) &gt;&gt; 1);</span><br><span class="line">            if (!isBadVersion(mid + 1)) &#123;</span><br><span class="line">                left = mid + 1;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return isBadVersion(left + 1) ? left + 1 : -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与之类似的例子还有：<a href="https://leetcode.com/problems/find-smallest-letter-greater-than-target" rel="external nofollow noopener noreferrer" target="_blank">LeetCode 744</a> 等，都是Easy级别的题目，简单的使用二分查找左边界的模板就行了，大家可以自行练习。</p><p>当然，除了这种显而易见的题目，对于一些变体，我们也应该要有能力去分辨，比如说这一题：<a href="https://leetcode.com/problems/find-k-closest-elements/" rel="external nofollow noopener noreferrer" target="_blank">LeetCode 658</a> 。</p><h3 id="实战4：Find-Minimum-in-Rotated-Sorted-Array"><a href="#实战4：Find-Minimum-in-Rotated-Sorted-Array" class="headerlink" title="实战4：Find Minimum in Rotated Sorted Array"></a>实战4：Find Minimum in Rotated Sorted Array</h3><ul><li>leetcode 原题： <a href="https://leetcode.com/problems/find-minimum-in-rotated-sorted-array" rel="external nofollow noopener noreferrer" target="_blank">https://leetcode.com/problems…</a></li><li>难度等级： Medium</li></ul><blockquote><p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p><p>(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).</p><p>Find the minimum element.</p><p>You may assume no duplicate exists in the array.</p></blockquote><p>这一题看上去没有重复元素，但是它也是查找左边界的一种形式，即可以看做是查找旋转到右侧的部分的左边界，有了这个思想，直接用二分查找左边界的模板就行了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int findMin(int[] nums) &#123;</span><br><span class="line">        if (nums.length == 1) return nums[0];</span><br><span class="line">        int left = 0;</span><br><span class="line">        int right = nums.length - 1;</span><br><span class="line">        while (left &lt; right) &#123;</span><br><span class="line">            int mid = left + ((right - left) &gt;&gt; 1);</span><br><span class="line">            if (nums[mid] &gt; nums[nums.length - 1]) &#123;</span><br><span class="line">                left = mid + 1;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return nums[left];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实战5：Find-Minimum-in-Rotated-Sorted-Array-II"><a href="#实战5：Find-Minimum-in-Rotated-Sorted-Array-II" class="headerlink" title="实战5：Find Minimum in Rotated Sorted Array II"></a>实战5：Find Minimum in Rotated Sorted Array II</h3><ul><li>leetcode 原题： <a href="https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/" rel="external nofollow noopener noreferrer" target="_blank">https://leetcode.com/problems…</a></li><li>难度等级： Hard</li></ul><p>这道题目和上面的实战2类似，只是多了一个条件——数组中可能包含重复元素，这就是我们之前说的二分查找左边界的第二种类型，在这种情况下，我们只能采用保守收缩的方式，以规避重复元素带来的对于单调性的破坏：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int findMin(int[] nums) &#123;</span><br><span class="line">        if (nums.length == 1) return nums[0];</span><br><span class="line">        int left = 0;</span><br><span class="line">        int right = nums.length - 1;</span><br><span class="line">        while (left &lt; right) &#123;</span><br><span class="line">            int mid = left + ((right - left) &gt;&gt; 1);</span><br><span class="line">            if (nums[mid] &gt; nums[right]) &#123; // mid 位于旋转点左侧</span><br><span class="line">                left = mid + 1;</span><br><span class="line">            &#125; else if (nums[mid] &lt; nums[right]) &#123; // mid 位于旋转点右侧</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125; else &#123; </span><br><span class="line">                // 注意相等的时候的特殊处理，因为要向左查找左边界，所以直接收缩右边界</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return nums[left];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分查找右边界"><a href="#二分查找右边界" class="headerlink" title="二分查找右边界"></a>二分查找右边界</h2><p>有了寻找左边界的分析之后，再来看寻找右边界就容易很多了，毕竟左右两种情况是对称的嘛，关于使用场景这里就不再赘述了，大家对称着理解就好。我们直接给出模板代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int search(int[] nums, int target) &#123;</span><br><span class="line">        int left = 0;</span><br><span class="line">        int right = nums.length - 1;</span><br><span class="line">        while (left &lt; right) &#123;</span><br><span class="line">            int mid = left + ((right - left) &gt;&gt; 1) + 1;</span><br><span class="line">            if (nums[mid] &gt; target) &#123;</span><br><span class="line">                right = mid - 1;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                left = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return nums[right] == target ? right : -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>循环条件： <code>left &lt; right</code></li><li>中间位置计算： <code>mid = left + ((right -left) &gt;&gt; 1) + 1</code></li><li>左边界更新：<code>left = mid</code></li><li>右边界更新： <code>right = mid - 1</code></li><li>返回值： <code>nums[right] == target ? right : -1</code></li></ul><p>这里大部分和寻找左边界是对称着来写的，唯独有一点需要尤其注意——中间位置的计算变了，我们在末尾多加了1。这样，<strong>无论对于奇数还是偶数，这个中间的位置都是偏右的。</strong></p><p>对于这个操作的理解，从对称的角度看，寻找左边界的时候，中间位置是偏左的，那寻找右边界的时候，中间位置就应该偏右呗，但是这显然不是根本原因。根本原因是，在最后<code>left</code>和<code>right</code>相邻时，如果<code>mid</code>偏左，则<code>left</code>, <code>mid</code>指向同一个位置，<code>right</code>指向它们的下一个位置，在<code>nums[left]</code>已经等于目标值的情况下，这三个位置的值都不会更新，从而进入了死循环。所以我们应该让<code>mid</code>偏右，这样<code>left</code>就能向右移动。这也就是为什么我们之前一直强调查找条件，判断条件和左右边界的更新方式三者之间需要配合使用。</p><p>右边界的查找一般来说不会单独使用，如有需要，一般是需要同时查找左右边界。</p><h2 id="二分查找左右边界"><a href="#二分查找左右边界" class="headerlink" title="二分查找左右边界"></a>二分查找左右边界</h2><p>前面我们介绍了左边界和右边界的查找，那么查找左右边界就容易很多了——只要分别查找左边界和右边界就行了。</p><h3 id="实战6-Find-First-and-Last-Position-of-Element-in-Sorted-Array"><a href="#实战6-Find-First-and-Last-Position-of-Element-in-Sorted-Array" class="headerlink" title="实战6: Find First and Last Position of Element in Sorted Array"></a>实战6: Find First and Last Position of Element in Sorted Array</h3><ul><li>leetcode 原题： <a href="https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/" rel="external nofollow noopener noreferrer" target="_blank">https://leetcode.com/problems…</a></li><li>难度等级： Medium</li></ul><blockquote><p>Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.<br>Your algorithm’s runtime complexity must be in the order of O(log n).<br>If the target is not found in the array, return [-1, -1].</p></blockquote><p>这是一道特别标准的查找左右边界的题目，我们只需要分别查找左边界和右边界就行了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int[] searchRange(int[] nums, int target) &#123;</span><br><span class="line">        int[] res = new int[]&#123;-1, -1&#125;;</span><br><span class="line">        if(nums == null || nums.length == 0) return res;</span><br><span class="line">        // find the left-end</span><br><span class="line">        int left = 0;</span><br><span class="line">        int right = nums.length - 1;</span><br><span class="line">        while (left &lt; right) &#123;</span><br><span class="line">            int mid = left + ((right - left) &gt;&gt; 1);</span><br><span class="line">            if (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + 1;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res[0] = nums[left] == target ? left : -1;</span><br><span class="line">        </span><br><span class="line">        // find right-end</span><br><span class="line">        if (res[0] != -1) &#123;</span><br><span class="line">            if (left == nums.length - 1 || nums[left + 1] != target) &#123;</span><br><span class="line">                res[1] = left;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                right = nums.length - 1;</span><br><span class="line">                while (left &lt; right) &#123;</span><br><span class="line">                    int mid = left + ((right - left) &gt;&gt; 1) + 1;</span><br><span class="line">                    if (nums[mid] &gt; target) &#123;</span><br><span class="line">                        right = mid - 1;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        left = mid;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                res[1] = right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分查找极值"><a href="#二分查找极值" class="headerlink" title="二分查找极值"></a>二分查找极值</h2><p>二分查找还有一种有趣的变体是二分查找极值点，之前我们使用<code>nums[mid]</code>去比较的时候，常常是和给定的目标值<code>target</code>比，或者和左右边界比较，在二分查找极值点的应用中，我们是和相邻元素去比，以完成某种单调性的检测。关于这一点，我们直接来看一个例子就明白了。</p><h3 id="实战7：Find-Peak-Element"><a href="#实战7：Find-Peak-Element" class="headerlink" title="实战7：Find Peak Element"></a>实战7：Find Peak Element</h3><ul><li>leetcode 原题：<a href="https://leetcode.com/problems/find-peak-element" rel="external nofollow noopener noreferrer" target="_blank">https://leetcode.com/problems…</a></li><li>难度等级： Medium</li></ul><blockquote><p>A peak element is an element that is greater than its neighbors.<br>Given an input array nums, where nums[i] ≠ nums[i+1], find a peak element and return its index.<br>The array may contain multiple peaks, in that case return the index to any one of the peaks is fine.<br>You may imagine that nums[-1] = nums[n] = -∞.</p></blockquote><p>这一题的有趣之处在于他要求求一个局部极大值点，并且整个数组不包含重复元素。所以整个数组甚至可以是无序的——你可能很难想象我们可以在一个无序的数组中直接使用二分查找，但是没错！我们确实可以这么干！谁要人家只要一个局部极大值即可呢。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int findPeakElement(int[] nums) &#123;</span><br><span class="line">        int left = 0;</span><br><span class="line">        int right = nums.length - 1;</span><br><span class="line">        while (left &lt; right) &#123;</span><br><span class="line">            int mid = left + ((right - left) &gt;&gt; 1);</span><br><span class="line">            if (nums[mid] &lt; nums[mid + 1]) &#123;</span><br><span class="line">                left = mid + 1;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里尤其注意我们的判断条件<code>nums[mid] &lt; nums[mid + 1]</code>，这实际上是在判断处于<code>mid</code>处的相邻元素的单调性。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>除了本文所介绍的二分查找的应用方式，二分查找其实还有很多其他的变体和应用，但它们基本上是<strong>循环条件</strong>，<strong>判断条件</strong>，<strong>边界更新方法</strong>的不同组合，例如，有的二分查找的循环条件可以是 <code>while(left + 1 &lt; right)</code>，有的边界的更新的条件需要依赖 <code>nums[left]</code>, <code>nums[mid]</code>, <code>nums[mid+1]</code>, <code>nums[right]</code>四个值的相互关系。</p><p>但是无论如何，代码模板只是给大家一个理解问题的角度，生搬硬套总是不好的。实际应用中，我们只要记住循环条件，判断条件与边界更新方法三者之间的配套使用就行了，基于这一点原则，你就可以使用你自己习惯的方式来实现二分搜索。</p><p>但是，如果你真的只是想应付面试，我想下面这个表的总结应该就差不多足够用了：</p><table><thead><tr><th style="text-align:left">查找方式</th><th style="text-align:left">循环条件</th><th style="text-align:left">左侧更新</th><th style="text-align:left">右侧更新</th><th style="text-align:left">中间点位置</th><th style="text-align:left">返回值</th></tr></thead><tbody><tr><td style="text-align:left">标准二分查找</td><td style="text-align:left"><code>left &lt;= right</code></td><td style="text-align:left"><code>left = mid - 1</code></td><td style="text-align:left"><code>right = mid + 1</code></td><td style="text-align:left"><code>(left + right) / 2</code></td><td style="text-align:left"><code>-1 / mid</code></td></tr><tr><td style="text-align:left">二分找左边界</td><td style="text-align:left"><code>left &lt; right</code></td><td style="text-align:left"><code>left = mid - 1</code></td><td style="text-align:left"><code>right = mid</code></td><td style="text-align:left"><code>(left + right) / 2</code></td><td style="text-align:left"><code>-1 / left</code></td></tr><tr><td style="text-align:left">二分找右边界</td><td style="text-align:left"><code>left &lt; right</code></td><td style="text-align:left"><code>left = mid</code></td><td style="text-align:left"><code>right = mid - 1</code></td><td style="text-align:left"><code>(left + right) / 2 + 1</code></td><td style="text-align:left"><code>-1 / right</code></td></tr></tbody></table><p>最后，希望大家在理解二分查找的思想后都能够写出适合自己的搭配方式，共勉！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;二分查找有很多种变体，使用时需要注意查找条件，判断条件和左右边界的更新方式，三者配合不好就很容易出现死循环或者遗漏区域，本篇中我们将介绍常见的几种查找方式的模板代码，包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;标准的二分查找&lt;/li&gt;
&lt;li&gt;二分查找左边界&lt;/li&gt;
&lt;li&gt;二分查找右边界&lt;/li&gt;
&lt;li&gt;二分查找左右边界&lt;/li&gt;
&lt;li&gt;二分查找极值点
    
    </summary>
    
      <category term="算法" scheme="http://leomalik.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://leomalik.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="二分查找" scheme="http://leomalik.github.io/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>java高并发秒杀平台实战记录（一）</title>
    <link href="http://leomalik.github.io/java%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A7%92%E6%9D%80%E5%B9%B3%E5%8F%B0%E5%AE%9E%E6%88%98%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89.html"/>
    <id>http://leomalik.github.io/java高并发秒杀平台实战记录（一）.html</id>
    <published>2019-07-07T15:55:38.000Z</published>
    <updated>2019-07-14T15:45:50.705Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本节主要介绍环境搭建</strong></p><p>技术栈：</p><p>springBoot，redis，RabbitMQ</p><p>主要功能：</p><p>高并发访问 / 多种缓存 / 分布式session / RabbitMQ 异步下单 / 图形验证码 / 限流防刷</p><a id="more"></a><h3 id="第一部分："><a href="#第一部分：" class="headerlink" title="第一部分："></a>第一部分：</h3><p>开发环境：Idea，centos7，windows，maven，redis</p><h4 id="1-生成springboot项目"><a href="#1-生成springboot项目" class="headerlink" title="1.生成springboot项目"></a>1.生成springboot项目</h4><p>new project=》spring initializr=》配置maven路径=》添加依赖（这里先添加一个web即可，后续可补充）=》生成project</p><h4 id="2-maven中心仓库的更改"><a href="#2-maven中心仓库的更改" class="headerlink" title="2.maven中心仓库的更改"></a>2.maven中心仓库的更改</h4><p>首先下载maven，修改配置</p><p>maven仓库用过的人都知道，国内有多么的悲催。还好有比较好用的镜像可以使用，尽快记录下来。速度提升100倍。</p><p><a href="http://maven.aliyun.com/nexus/#view-repositories;public~browsestorage" rel="external nofollow noopener noreferrer" target="_blank">http://maven.aliyun.com/nexus/#view-repositories;public~browsestorage</a></p><p>在maven的settings.xml 文件里配置mirrors的子节点，添加如下mirror</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line">    &lt;id&gt;nexus-aliyun&lt;/id&gt;</span><br><span class="line">    &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</span><br><span class="line">    &lt;name&gt;Nexus aliyun&lt;/name&gt;</span><br><span class="line">    &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</span><br><span class="line">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure><h4 id="3-集成mybatis"><a href="#3-集成mybatis" class="headerlink" title="3.集成mybatis"></a>3.集成mybatis</h4><p>在项目的pom.xml文件中，添加mybatis的dependency<strong>（记得要加版本号，否则有可能报错）</strong></p><p>这里我直接把最后所有的依赖全部写入pom.xml，大家可以一次性导入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.imooc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sec_kill<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>sec_kill<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- FIXME change it to the project's website --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;scope&gt;runtime&lt;/scope&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-codec/commons-codec --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--provided 指编译时依赖--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- war --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">failOnMissingWebXml</span>&gt;</span>false<span class="tag">&lt;/<span class="name">failOnMissingWebXml</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-安装redis"><a href="#4-安装redis" class="headerlink" title="4.安装redis"></a>4.安装redis</h4><p>redis我们安装在centos的虚拟机环境下，首先保证虚拟机和主机之间能ping通，然后从redis的官网下载redis并解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvzf redis4.tar.gz</span><br></pre></td></tr></table></figure><p>将redis移动到用户目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv redis4 /usr/local/redis</span><br></pre></td></tr></table></figure><p>进入文件夹进行编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/redis </span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure><p><strong>修改redis.conf 配置，保证能正常访问</strong></p><p>1.允许所有用户访问redis</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim redis.conf</span><br><span class="line">找到bind，并修改为bind 0.0.0.0</span><br></pre></td></tr></table></figure><p>2.允许后台执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim redis.conf</span><br><span class="line">:/dae daemonize //搜索daemonize，修改为yes</span><br></pre></td></tr></table></figure><p>3.设置redis访问密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim redis.conf</span><br><span class="line">:/dae requirepass //搜索requirepass 设置为123456</span><br></pre></td></tr></table></figure><p>4.设置redis-server默认以指定配置文件运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/redis </span><br><span class="line">./src/redis-server ./redis.conf</span><br></pre></td></tr></table></figure><p>5.打开redis-cli命令行，测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./src/redis-cli </span><br><span class="line">set key1 value1</span><br><span class="line">keys *</span><br></pre></td></tr></table></figure><p>6.查看进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps ef | grep redis</span><br></pre></td></tr></table></figure><p>7.设置成系统服务，开机自动启动</p><p><img src="https://img-blog.csdnimg.cn/20190222202254600.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NTk3MjAz,size_16,color_FFFFFF,t_70" alt="å¨è¿éæå¥å¾çæè¿°"></p><p>8.重启redis服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop/start redis-6379</span><br></pre></td></tr></table></figure><h4 id="5-修改项目配置文件"><a href="#5-修改项目配置文件" class="headerlink" title="5..修改项目配置文件"></a>5..修改项目配置文件</h4><p>在项目根目录下新建application.properties文件，添加配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">#thymeleaf</span><br><span class="line">spring.thymeleaf.prefix=classpath:/templates/</span><br><span class="line">spring.thymeleaf.suffix=.html</span><br><span class="line">spring.thymeleaf.cache=false</span><br><span class="line">spring.thymeleaf.content-type=text/html</span><br><span class="line">spring.thymeleaf.enabled=true</span><br><span class="line">spring.thymeleaf.encoding=UTF-8</span><br><span class="line">spring.thymeleaf.mode=HTML</span><br><span class="line"># mybatis</span><br><span class="line">mybatis.type-aliases-package=com.imooc.domain</span><br><span class="line">mybatis.configuration.map-underscore-to-camel-case=true</span><br><span class="line">mybatis.configuration.default-fetch-size=100</span><br><span class="line">mybatis.configuration.default-statement-timeout=3000</span><br><span class="line">mybatis.mapperLocations = classpath:com/imooc/dao/*.xml</span><br><span class="line"># druid</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/sec_kill?useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true&amp;useSSL=false</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.type=com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">spring.datasource.filters=stat</span><br><span class="line">spring.datasource.maxActive=1000</span><br><span class="line">spring.datasource.initialSize=100</span><br><span class="line">spring.datasource.maxWait=60000</span><br><span class="line">spring.datasource.minIdle=500</span><br><span class="line">spring.datasource.timeBetweenEvictionRunsMillis=60000</span><br><span class="line">spring.datasource.minEvictableIdleTimeMillis=300000</span><br><span class="line">spring.datasource.validationQuery=select &apos;x&apos;</span><br><span class="line">spring.datasource.testWhileIdle=true</span><br><span class="line">spring.datasource.testOnBorrow=false</span><br><span class="line">spring.datasource.testOnReturn=false</span><br><span class="line">spring.datasource.poolPreparedStatements=true</span><br><span class="line">spring.datasource.maxOpenPreparedStatements=20</span><br><span class="line">#redis</span><br><span class="line">redis.host=192.168.14.33</span><br><span class="line">redis.port=6379</span><br><span class="line">redis.timeout=10</span><br><span class="line">redis.password=123456</span><br><span class="line">redis.poolMaxTotal=1000</span><br><span class="line">redis.poolMaxIdle=500</span><br><span class="line">redis.poolMaxWait=500</span><br><span class="line"></span><br><span class="line">##static</span><br><span class="line">#spring.resources.add-mappings=true</span><br><span class="line">#spring.resources.cache-period= 3600</span><br><span class="line">#spring.resources.chain.cache=true</span><br><span class="line">#spring.resources.chain.enabled=true</span><br><span class="line">#spring.resources.chain.gzipped=true</span><br><span class="line">#spring.resources.chain.html-application-cache=true</span><br><span class="line">#spring.resources.static-locations=classpath:/static/</span><br><span class="line"></span><br><span class="line">##rabbitmq</span><br><span class="line">#spring.rabbitmq.host=192.168.14.33</span><br><span class="line">#spring.rabbitmq.port=5672</span><br><span class="line">#spring.rabbitmq.username=guest</span><br><span class="line">#spring.rabbitmq.password=guest</span><br><span class="line">#spring.rabbitmq.virtual-host=/</span><br><span class="line">##\u6D88\u8D39\u8005\u6570\u91CF</span><br><span class="line">#spring.rabbitmq.listener.simple.concurrency= 10</span><br><span class="line">#spring.rabbitmq.listener.simple.max-concurrency= 10</span><br><span class="line">##\u6D88\u8D39\u8005\u6BCF\u6B21\u4ECE\u961F\u5217\u83B7\u53D6\u7684\u6D88\u606F\u6570\u91CF</span><br><span class="line">#spring.rabbitmq.listener.simple.prefetch= 1</span><br><span class="line">##\u6D88\u8D39\u8005\u81EA\u52A8\u542F\u52A8</span><br><span class="line">#spring.rabbitmq.listener.simple.auto-startup=true</span><br><span class="line">##\u6D88\u8D39\u5931\u8D25\uFF0C\u81EA\u52A8\u91CD\u65B0\u5165\u961F</span><br><span class="line">#spring.rabbitmq.listener.simple.default-requeue-rejected= true</span><br><span class="line">##\u542F\u7528\u53D1\u9001\u91CD\u8BD5</span><br><span class="line">#spring.rabbitmq.template.retry.enabled=true</span><br><span class="line">#spring.rabbitmq.template.retry.initial-interval=1000</span><br><span class="line">#spring.rabbitmq.template.retry.max-attempts=3</span><br><span class="line">#spring.rabbitmq.template.retry.max-interval=10000</span><br><span class="line">#spring.rabbitmq.template.retry.multiplier=1.0</span><br></pre></td></tr></table></figure><p>到此项目环境配置基本完成。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;本节主要介绍环境搭建&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;技术栈：&lt;/p&gt;
&lt;p&gt;springBoot，redis，RabbitMQ&lt;/p&gt;
&lt;p&gt;主要功能：&lt;/p&gt;
&lt;p&gt;高并发访问 / 多种缓存 / 分布式session / RabbitMQ 异步下单 / 图形验证码 / 限流防刷&lt;/p&gt;
    
    </summary>
    
      <category term="项目学习" scheme="http://leomalik.github.io/categories/%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="高并发" scheme="http://leomalik.github.io/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
      <category term="springBoot" scheme="http://leomalik.github.io/tags/springBoot/"/>
    
      <category term="redis" scheme="http://leomalik.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer难题总结</title>
    <link href="http://leomalik.github.io/%E5%89%91%E6%8C%87offer%E9%9A%BE%E9%A2%98%E6%80%BB%E7%BB%93.html"/>
    <id>http://leomalik.github.io/剑指offer难题总结.html</id>
    <published>2019-07-07T08:43:35.000Z</published>
    <updated>2019-07-13T15:26:24.731Z</updated>
    
    <content type="html"><![CDATA[<p>暑假到了，最近两个月在家专心准备求职的事情，也同时在牛客网上刷了不少题，概念题基本还行，但是算法题还是有些薄弱。</p><p>不得不说，程序员就像运动员一样，一天不练习，技巧便会生疏积分，于是把难题记录下来，希望总结过后有所收获</p><a id="more"></a><h3 id="1-二维数组的查找"><a href="#1-二维数组的查找" class="headerlink" title="1.二维数组的查找"></a>1.二维数组的查找</h3><p>在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><p><strong>分析</strong>：</p><p>两个思路</p><ol><li>暴力遍历法</li></ol><p>可以遍历行，获取target所在的行，然后由于数组是基本有序的，可以使用二分法，查找数据所在的位置，这样时间复杂度是O(nlgn)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span> [][] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = array.length;</span><br><span class="line">        <span class="keyword">int</span> m = array[<span class="number">0</span>].length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = m;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>||m==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(array[i][<span class="number">0</span>]&lt;=target)&#123;</span><br><span class="line">                <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">                    <span class="keyword">int</span> mid = left+(right-left)/<span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">if</span>(array[i][mid] == target)&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(array[i][mid]&gt;target)&#123;</span><br><span class="line">                        right = mid-<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        left = mid+<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>指针法</li></ol><p>由于数组不论是在行，还是在列，都是基本有序的，我们可以从第一行的最后一个数开始比较，如果比这个数大，则说明在下一行，如果比这个数小，则说明在这一行的前一个位置，如此反复，找到target所在的位置，这样的时间复杂度为O(m+n)，明显更优</p><p>代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span> [][] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = array.length;</span><br><span class="line">        <span class="keyword">int</span> y = array[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = y - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; x &amp;&amp;　ｊ&gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (array[i][j] &gt; target)&#123;</span><br><span class="line">                j = j-<span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(array[i][j] &lt; target)&#123;</span><br><span class="line">                i = i + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-重建二叉树"><a href="#2-重建二叉树" class="headerlink" title="2.重建二叉树"></a>2.重建二叉树</h3><p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。</p><p><strong>分析：</strong></p><p>由于前序遍历和中序遍历都会有一个公共的根节点，我们可以递归的获取这个根节点的左子树和右子树来重建整个二叉树</p><p>首先我们知道前序遍历的第一个节点1是二叉树的根节点，并且由于中序遍历的顺序是左-中-右，所以我们可以在中序遍历中找到根节点1的位置，1前面的数字即是左子树的数字（柚子树同理）。我们假设1在中序遍历中排第n位</p><p>这样的话我们就可以在前序遍历中位置（1-n）位左子树，(n-end)为右子树，返回根节点root。</p><p>这样不断递归，不断获取左、右子树的根节点，我们就可以重建二叉树了（记得要考虑叶子节点的边界情况），<strong>树的边界情况一般就是叶子节点和只有一个节点的情况</strong></p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for binary tree</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">reConstructBinaryTree</span><span class="params">(<span class="keyword">int</span> [] pre,<span class="keyword">int</span> [] in)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pre.length!=in.length || pre==<span class="keyword">null</span> || in ==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Construct(pre,<span class="number">0</span>,pre.length-<span class="number">1</span>,in,<span class="number">0</span>,in.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">Construct</span><span class="params">(<span class="keyword">int</span> [] preorder,<span class="keyword">int</span> ps,<span class="keyword">int</span> pe,<span class="keyword">int</span>[] inorder,<span class="keyword">int</span> is,<span class="keyword">int</span> ie)</span></span>&#123;</span><br><span class="line">        <span class="comment">//叶子节点时，ps+1，而pe不变</span></span><br><span class="line">        <span class="keyword">if</span>(ps&gt;pe || is&gt;ie)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> value = preorder[ps];</span><br><span class="line">        <span class="keyword">int</span> index = is;</span><br><span class="line">        <span class="keyword">while</span>(inorder[index]!=value &amp;&amp; index&lt;ie)&#123;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index&gt;ie)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode node = <span class="keyword">new</span> TreeNode(value);</span><br><span class="line">        </span><br><span class="line">        node.left = Construct(preorder,ps+<span class="number">1</span>,ps+index-is,inorder,is,index-<span class="number">1</span>);</span><br><span class="line">        node.right = Construct(preorder,ps+index-is+<span class="number">1</span>,pe,inorder,index+<span class="number">1</span>,pe);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-旋转数组的最小数字"><a href="#3-旋转数组的最小数字" class="headerlink" title="3.旋转数组的最小数字"></a>3.旋转数组的最小数字</h3><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。</p><p><strong>分析：</strong></p><p>建议看看这篇二分法的文章，这里数组是部分有序的，所以我们可以用二分法，这里是二分法变形中的求最左值的问题</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minNumberInRotateArray</span><span class="params">(<span class="keyword">int</span> [] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = array.length;</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>, high = len - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(low &lt; high)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(array[mid] &gt; array[high])&#123;</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(array[mid] == array[high])&#123;</span><br><span class="line">                high = high - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                high = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array[low];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-跳台阶"><a href="#4-跳台阶" class="headerlink" title="4.跳台阶"></a>4.跳台阶</h3><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。</p><p><strong>分析</strong>：</p><p>由于递归会重复调用很多语句，时间复杂度是指数级别的，所以我们一般用覆盖法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">JumpFloor</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> one = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> two = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(target==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(target == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=target;i++)&#123;</span><br><span class="line">            result = one + two;</span><br><span class="line">            one = two;</span><br><span class="line">            two = result;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-二进制中1的个数"><a href="#5-二进制中1的个数" class="headerlink" title="5.二进制中1的个数"></a>5.二进制中1的个数</h3><p>输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。</p><p><strong>分析</strong>；</p><p>求二进制中表示一的个数，就想到我们可以用位运算的与运算，把二进制数与1按位与，不为0的即为1,</p><p>这里我们要知道，数字在计算机中都是以补码存储的，而题目要求负数以补码形式表示，且恰好正数的补码和原码是相同的，所以我们可以直接按位与然后移位即可。</p><p>易错的是，由于负数的补码第一位为1，如果我们把要比较的值按位右移，while (n != 0)永远成立不了，会进入死循环。</p><p>所以我们有两种思路：</p><p>1.不带符号位的右移</p><p>使用&gt;&gt;&gt;即可</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">NumberOf1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>((<span class="number">1</span> &amp; n) == <span class="number">1</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            n=n&gt;&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.使用 n = n &amp; (n - 1);</p><p>举个例子：一个二进制数1100，从右边数起第三位是处于最右边的一个1。减去1后，第三位变成0，它后面的两位0变成了1，而前面的1保持不变，因此得到的结果是1011.我们发现减1的结果是把最右边的一个1开始的所有位都取反了。这个时候如果我们再把原来的整数和减去1之后的结果做与运算，从原来整数最右边一个1那一位开始所有位都会变成0。如1100&amp;1011=1000.也就是说，把一个整数减去1，再和原整数做与运算，会把该整数最右边一个1变成0.那么一个整数的二进制有多少个1，就可以进行多少次这样的操作。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">NumberOf1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n!= <span class="number">0</span>)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            n = n &amp; (n - <span class="number">1</span>);</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-数值的整数次方"><a href="#6-数值的整数次方" class="headerlink" title="6.数值的整数次方"></a>6.数值的整数次方</h3><p>给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。</p><p><strong>分析：</strong></p><p>这题如果使用暴力的方法会超时，所以明显我们使用的是快速幂方法，其实也是获取二进制中1的个数，快速幂代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow3</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>,base = a;</span><br><span class="line">    <span class="keyword">while</span>(b!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)</span><br><span class="line">            ans *= base;</span><br><span class="line">        base *= base;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里还要分情况讨论幂为负数的情况，总体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">Power</span><span class="params">(<span class="keyword">double</span> base, <span class="keyword">int</span> exponent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//考虑指数为负</span></span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(exponent&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            exponent=-exponent;</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//快速幂</span></span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(exponent!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>((exponent&amp;<span class="number">1</span>)!=<span class="number">0</span>)&#123;</span><br><span class="line">                res*=base;</span><br><span class="line">                base*=base;</span><br><span class="line">            &#125;</span><br><span class="line">            exponent=exponent&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回结果</span></span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1.0</span>/res;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-栈的压入，弹出序列"><a href="#7-栈的压入，弹出序列" class="headerlink" title="7.栈的压入，弹出序列"></a>7.栈的压入，弹出序列</h3><p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）</p><p><strong>分析：</strong></p><p>定义一个新的栈，如果栈顶元素和应出栈的元素相同，则pop出来，否则将应该入栈的值入栈，最后判断栈是否为空</p><p>总之就是找到第一个出栈的元素4，判断之后的出栈序列是否是按入栈序列的顺序</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">IsPopOrder</span><span class="params">(<span class="keyword">int</span> [] pushA,<span class="keyword">int</span> [] popA)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pushA==<span class="keyword">null</span> || popA==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;Integer&gt; s = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">int</span> n = pushA.length;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            s.push(pushA[i]);</span><br><span class="line">            <span class="keyword">while</span>(!s.empty()&amp;&amp;s.peek()==popA[index])&#123;</span><br><span class="line">                s.pop();</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-二叉树层次遍历"><a href="#8-二叉树层次遍历" class="headerlink" title="8.二叉树层次遍历"></a>8.二叉树层次遍历</h3><p>按二叉树的层次遍历输出二叉树</p><p><strong>分析：</strong></p><p>使用队列，每次取队列的顶部元素，将顶部元素的左子树，右子树依次入列，知道队列为空为止</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">PrintFromTopToBottom</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        ArrayList&lt;TreeNode&gt; queue = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            TreeNode node = queue.remove(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(node.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                queue.add(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                queue.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(node.val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-快速排序"><a href="#9-快速排序" class="headerlink" title="9.快速排序"></a>9.快速排序</h3><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg2NzA4MTkxNQ==&amp;mid=2247485191&amp;idx=1&amp;sn=45a43bd77495566db53b419ae82136f5&amp;source=41#wechat_redirect" rel="external nofollow noopener noreferrer" target="_blank">https://mp.weixin.qq.com/s?__biz=Mzg2NzA4MTkxNQ==&amp;mid=2247485191&amp;idx=1&amp;sn=45a43bd77495566db53b419ae82136f5&amp;source=41#wechat_redirect</a></p><p><strong>分析：</strong>首先将中心节点设为数组的起始节点，然后使用双指针，从数组的两边开始，左边遇到比数组大的元素，右边遇到比数组小的元素，则两者交换位置，双指针循环完毕后，将中心节点与右指针所在位置的节点互换，构成新的中心节点，然后递归调用quicksort方法即可</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(a.length&gt;<span class="number">0</span>)</span><br><span class="line">         quick_sort(a, <span class="number">0</span> , a.length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(low &gt; high)</span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    <span class="keyword">int</span> i = low; </span><br><span class="line">    <span class="keyword">int</span> j = high;</span><br><span class="line">    <span class="keyword">int</span> key = a[low];</span><br><span class="line">    <span class="keyword">while</span>(i &lt; j) &#123;  </span><br><span class="line">        <span class="keyword">while</span>(i &lt; j &amp;&amp; a[j] &gt; key)  </span><br><span class="line">            j--;    </span><br><span class="line">        <span class="keyword">while</span>(i &lt; j &amp;&amp; a[i] &lt;= key) </span><br><span class="line">            i++;  </span><br><span class="line">        <span class="keyword">if</span>(i &lt; j) &#123;  </span><br><span class="line">            <span class="keyword">int</span> p = a[i];  </span><br><span class="line">            a[i] = a[j];  </span><br><span class="line">            a[j] = p;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> p = a[i];</span><br><span class="line">    a[i] = a[low];</span><br><span class="line">    a[low] = p;</span><br><span class="line">    quick_sort(a,low,i - <span class="number">1</span> );  </span><br><span class="line">    quick_sort(a,i + <span class="number">1</span>,high);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-顺时针打印矩阵"><a href="#10-顺时针打印矩阵" class="headerlink" title="10.顺时针打印矩阵"></a>10.顺时针打印矩阵</h3><p><strong>分析：</strong></p><p>从外部向内部逐层遍历打印矩阵，最外面一圈打印完，里面仍然是一个矩阵<br>统计矩阵的层数，每一层最多会占据两行或者两列，最少会占据一行或者一列元素，只有一层或者一列，也算一层，分层如下图：</p><p><img src="https://raw.githubusercontent.com/LeoMalik/ImgBed/master/img/560199dcac506d6c62fcf166a0bce3960a2e5ae9be4305878e278b296273f5f9-%25E8%259E%25BA%25E6%2597%258B%25E7%259F%25A9%25E9%2598%25B51.JPG" alt="èºæç©éµ1.JPG"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int m = matrix.length;</span><br><span class="line">int n = matrix[0].length;</span><br><span class="line">int count = (Math.min(m, n)+1)/2;</span><br></pre></td></tr></table></figure><p>开始打印第 i 层的矩阵元素</p><p>如上图所示，再打印第i层的矩阵时，要经历4个循环：</p><p><img src="https://raw.githubusercontent.com/LeoMalik/ImgBed/master/img/a2e0022203893856ec9baa3fa3db6b0b1e6e49b4f3955e086f437852ec88a31d-%25E8%259E%25BA%25E6%2597%258B%25E7%259F%25A9%25E9%2598%25B52.JPG" alt="èºæç©éµ2.JPG"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">spiralOrder</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">if</span>(matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">    <span class="keyword">int</span> m = matrix.length;</span><br><span class="line">    <span class="keyword">int</span> n = matrix[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>; </span><br><span class="line">    <span class="comment">//统计矩阵从外向内的层数，如果矩阵非空，那么它的层数至少为1层</span></span><br><span class="line">    <span class="keyword">int</span> count = (Math.min(m, n)+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="comment">//从外部向内部遍历，逐层打印数据</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt; count) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n-i-<span class="number">1</span>; j++) &#123;</span><br><span class="line">list.add(matrix[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt;= m-i-<span class="number">1</span>; j++) &#123;</span><br><span class="line">list.add(matrix[j][(n-<span class="number">1</span>)-i]);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = (n-<span class="number">1</span>)-(i+<span class="number">1</span>); j &gt;= i &amp;&amp; (m-<span class="number">1</span>-i != i); j--) &#123;</span><br><span class="line">list.add(matrix[(m-<span class="number">1</span>)-i][j]);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = (m-<span class="number">1</span>)-(i+<span class="number">1</span>); j &gt;= i+<span class="number">1</span> &amp;&amp; (n-<span class="number">1</span>-i) != i; j--) &#123;</span><br><span class="line">list.add(matrix[j][i]);</span><br><span class="line">&#125;</span><br><span class="line">    i++;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-二叉树中和尾某一值的路径"><a href="#11-二叉树中和尾某一值的路径" class="headerlink" title="11.二叉树中和尾某一值的路径"></a>11.二叉树中和尾某一值的路径</h3><p>输入一颗二叉树的跟节点和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。(注意: 在返回值的list中，数组长度大的数组靠前)</p><p><strong>分析：</strong></p><p>回溯法的经典例题，首先定义递归，递归的三个条件</p><ul><li>终止条件 ：target=0且为叶子节点</li><li>问题逻辑：每次更新list，如果target=0，则将list插入结果中，否则回溯</li><li>子问题：FindPath(root.left, target); FindPath(root.right, target);</li><li>是否回溯：是</li></ul><p>然后每次操作之后回溯操作，也就是本题中的<code>list.remove(list.size()-1)</code></p><p><strong>代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; listAll = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; FindPath(TreeNode root,<span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> listAll;</span><br><span class="line">        list.add(root.val);</span><br><span class="line">        target -= root.val;</span><br><span class="line">        <span class="keyword">if</span>(target == <span class="number">0</span> &amp;&amp; root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>)</span><br><span class="line">            listAll.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(list));</span><br><span class="line">        FindPath(root.left, target);</span><br><span class="line">        FindPath(root.right, target);</span><br><span class="line">        list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> listAll;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-合并两个排序的链表"><a href="#12-合并两个排序的链表" class="headerlink" title="12.合并两个排序的链表"></a>12.合并两个排序的链表</h3><p>输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则</p><p><strong>分析：</strong></p><ul><li>子问题：<ul><li>如果list1小于list2的值，list1.next 为<code>Merge（list1.next，list2)</code>，返回list1</li><li>如果list1大于list2的值，list2.next为<code>Merge（list1，list2.next）</code>，返回list2</li></ul></li><li>问题逻辑：list1.next = Merge(list1.next, list2);</li><li>终止条件：一方链表到达结尾，返回未到达结尾的那个节点</li><li>是否回溯：否</li></ul><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">Merge</span><span class="params">(ListNode list1,ListNode list2)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(list1 == <span class="keyword">null</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> list2;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(list2 == <span class="keyword">null</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> list1;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(list1.val &lt;= list2.val)&#123;</span><br><span class="line">           list1.next = Merge(list1.next, list2);</span><br><span class="line">           <span class="keyword">return</span> list1;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           list2.next = Merge(list1, list2.next);</span><br><span class="line">           <span class="keyword">return</span> list2;</span><br><span class="line">       &#125;       </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-二叉搜索树的后续遍历序列"><a href="#13-二叉搜索树的后续遍历序列" class="headerlink" title="13.二叉搜索树的后续遍历序列"></a>13.二叉搜索树的后续遍历序列</h3><p>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。</p><p><strong>分析：</strong></p><ul><li>子问题 ：由于是后续遍历，因此最后一个节点肯定是根节点，我们从后往前，寻找到第一个小于根节点的节点，以此节点为界，将树分为左子树和右子树。</li><li>问题逻辑：我们已经把同级的左子树划分出去了，接下来只要知道同级的右子树所有节点都比界节点<code>i</code>大即可，右子树最大的节点为倒数第二个节点。</li><li>终止条件：当树只剩下两个节点的时候，不管最后有没有比根节点大的节点，start&gt;=end都会成立，所以结束条件为start&gt;=end</li><li>是否回溯：否</li></ul><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">VerifySquenceOfBST</span><span class="params">(<span class="keyword">int</span> [] sequence)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sequence.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sequence.length == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> judge(sequence,<span class="number">0</span>,sequence.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start &gt;= end)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i = start;</span><br><span class="line">        <span class="keyword">while</span>(a[i] &lt; a[end])&#123;</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;end;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j] &lt; a[end])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> judge(a,start,i-<span class="number">1</span>) &amp;&amp; judge(a,i,end-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14-树的子结构"><a href="#14-树的子结构" class="headerlink" title="14.树的子结构"></a>14.树的子结构</h3><p>输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）</p><p><strong>分析：</strong></p><ul><li>子问题：首先找到第一个相等的节点，然后判断两树是否有子结构关系，若无，则继续寻找下一个相等的节点，若有，则返回true</li><li>问题逻辑：首先将树不断分为左右两树，如果有一树根节点和B匹配上，则判断B是否事此树的子结构</li><li>终止条件：从A，B子树根节点相等的时候开始比较，如果B遍历完，A没遍历完，则返回True，A，B同时遍历完，也返回True，否则返回false</li><li>是否回溯：否</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">HasSubtree</span><span class="params">(TreeNode root1,TreeNode root2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(root1 != <span class="keyword">null</span> &amp;&amp; root2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root1.val == root2.val)&#123;</span><br><span class="line">                result = isAMother(root1,root2);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!result)&#123;result = HasSubtree(root1.left, root2)||HasSubtree(root1.right, root2);&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAMother</span><span class="params">(TreeNode root1,TreeNode root2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root1==<span class="keyword">null</span> &amp;&amp; root2!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root2==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root1.val!=root2.val)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> isAMother(root1.left,root2.left) &amp;&amp; isAMother(root1.right,root2.right);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="15-二叉搜索树和双向链表"><a href="#15-二叉搜索树和双向链表" class="headerlink" title="15.二叉搜索树和双向链表"></a>15.二叉搜索树和双向链表</h3><p>输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。</p><p><strong>分析：</strong></p><ul><li>子问题：将二叉树分为左右两个树，中序遍历</li><li>问题逻辑：首先肯定会获取到最左边的节点，然后我们定义两个指针，首先两个指针都指向最左边的节点，然后依次往上传递</li><li>终止条件：遍历完整个树</li><li>是否回溯：否</li></ul><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接用中序遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    TreeNode head = <span class="keyword">null</span>;</span><br><span class="line">    TreeNode realHead = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">Convert</span><span class="params">(TreeNode pRootOfTree)</span> </span>&#123;</span><br><span class="line">        ConvertSub(pRootOfTree);</span><br><span class="line">        <span class="keyword">return</span> realHead;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ConvertSub</span><span class="params">(TreeNode pRootOfTree)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pRootOfTree==<span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        ConvertSub(pRootOfTree.left);</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = pRootOfTree;</span><br><span class="line">            realHead = pRootOfTree;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            head.right = pRootOfTree;</span><br><span class="line">            pRootOfTree.left = head;</span><br><span class="line">            head = pRootOfTree;</span><br><span class="line">        &#125;</span><br><span class="line">        ConvertSub(pRootOfTree.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;暑假到了，最近两个月在家专心准备求职的事情，也同时在牛客网上刷了不少题，概念题基本还行，但是算法题还是有些薄弱。&lt;/p&gt;
&lt;p&gt;不得不说，程序员就像运动员一样，一天不练习，技巧便会生疏积分，于是把难题记录下来，希望总结过后有所收获&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://leomalik.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://leomalik.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="求职" scheme="http://leomalik.github.io/tags/%E6%B1%82%E8%81%8C/"/>
    
  </entry>
  
  <entry>
    <title>hexo的next主题个性化配置教程</title>
    <link href="http://leomalik.github.io/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html"/>
    <id>http://leomalik.github.io/hexo的next主题个性化配置教程.html</id>
    <published>2019-02-17T14:35:35.000Z</published>
    <updated>2019-02-17T14:36:31.768Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>看到有些next主题的网站很炫酷，那么是怎么配置的呢？接下来我会讲一讲如何实现一些炫酷的效果</p></blockquote><a id="more"></a><p>主要有以下33种：</p><ul><li>在右上角或者左上角实现fork me on github</li><li>添加RSS</li><li>添加动态背景</li><li>实现点击出现桃心效果</li><li>修改文章内链接文本样式</li><li>修改文章底部的那个带#号的标签</li><li>在每篇文章末尾统一添加“本文结束”标记</li><li>修改作者头像并旋转</li><li>博文压缩</li><li>修改<code></code>代码块自定义样式</li><li>侧边栏社交小图标设置</li><li>主页文章添加阴影效果</li><li>在网站底部加上访问量</li><li>添加热度</li><li>网站底部字数统计</li><li>添加 README.md 文件</li><li>设置网站的图标Favicon</li><li>实现统计功能</li><li>添加顶部加载条</li><li>在文章底部增加版权信息</li><li>添加网易云跟帖(跟帖关闭，已失效，改为来必力)</li><li>隐藏网页底部powered By Hexo / 强力驱动</li><li>修改网页底部的桃心</li><li>文章加密访问</li><li>添加jiathis分享</li><li>博文置顶</li><li>修改字体大小</li><li>修改打赏字体不闪动</li><li>侧边栏推荐阅读</li><li>自定义鼠标样式</li><li>为博客加上萌萌的宠物</li><li>DaoVoice 在线联系</li><li>点击爆炸效果</li></ul><hr><h1 id="1-在右上角或者左上角实现fork-me-on-github"><a href="#1-在右上角或者左上角实现fork-me-on-github" class="headerlink" title="1. 在右上角或者左上角实现fork me on github"></a>1. 在右上角或者左上角实现fork me on github</h1><p><strong>实现效果图</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/5308475-71cf61436fe2ef27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p><p><img src="http://upload-images.jianshu.io/upload_images/5308475-733457ecd3fbe289.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p><p><strong>具体实现方法</strong></p><p>点击<a href="https://github.com/blog/273-github-ribbons" rel="external nofollow noopener noreferrer" target="_blank">这里</a>或者<a href="http://tholman.com/github-corners/" rel="external nofollow noopener noreferrer" target="_blank">这里</a>挑选自己喜欢的样式，并复制代码。 例如，我是复制如下代码：<br><img src="http://upload-images.jianshu.io/upload_images/5308475-96b22eacbe43838c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"><br>然后粘贴刚才复制的代码到<code>themes/next/layout/_layout.swig</code>文件中(放在<code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code>的下面)，并把<code>href</code>改为你的github地址<br><img src="http://upload-images.jianshu.io/upload_images/5308475-d2601ad456db064b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p><hr><h1 id="2-添加RSS"><a href="#2-添加RSS" class="headerlink" title="2.添加RSS"></a>2.添加RSS</h1><p><strong>实现效果图</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/5308475-a54daae937107550.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p><p><strong>具体实现方法</strong></p><p>切换到你的blog（我是取名blog，具体的看你们的取名是什么）的路径，例如我是在<code>/Users/chenzekun/Code/Hexo/blog</code>这个路径上，也就是在你的根目录下<br><img src="http://upload-images.jianshu.io/upload_images/5308475-e8356e1ca05f23a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p><p>然后安装 Hexo 插件：(这个插件会放在<code>node_modules</code>这个文件夹里)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save hexo-generator-feed</span><br></pre></td></tr></table></figure><p>接下来打开画红线的文件，如下图：</p><p><img src="http://upload-images.jianshu.io/upload_images/5308475-55f034e749aa8e6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p><p>在里面的末尾添加：(<strong>请注意</strong>在冒号后面要加一个空格，不然会发生错误！)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: http://hexo.io/plugins/</span><br><span class="line">plugins: hexo-generate-feed</span><br></pre></td></tr></table></figure><p>然后打开next主题文件夹里面的<code>_config.yml</code>,在里面配置为如下样子：(就是在<code>rss:</code>的后面加上<code>/atom.xml</code>,<strong>注意</strong>在冒号后面要加一个空格)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Set rss to false to disable feed link.</span><br><span class="line"># Leave rss as empty to use site&apos;s feed link.</span><br><span class="line"># Set rss to specific value if you have burned your feed already.</span><br><span class="line">rss: /atom.xml</span><br></pre></td></tr></table></figure><p>配置完之后运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><p>重新生成一次，你会在<code>./public</code> 文件夹中看到 <code>atom.xml</code> 文件。然后启动服务器查看是否有效，之后再部署到 Github 中。</p><hr><h1 id="3-添加动态背景"><a href="#3-添加动态背景" class="headerlink" title="3. 添加动态背景"></a>3. 添加动态背景</h1><p><strong>实现效果图</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/5308475-ef603580be708882.gif?imageMogr2/auto-orient/strip" alt="img"></p><p><strong>具体实现方法</strong></p><p>这个我之前有一篇文章有讲过了，详情点击<a href="http://shenzekun.cn/hexo%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E5%8A%A8%E6%80%81%E8%83%8C%E6%99%AF.html" rel="external nofollow noopener noreferrer" target="_blank">我的博客</a></p><hr><h1 id="4-实现点击出现桃心效果"><a href="#4-实现点击出现桃心效果" class="headerlink" title="4. 实现点击出现桃心效果"></a>4. 实现点击出现桃心效果</h1><p><strong>实现效果图</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/5308475-78e64c0a80bb559e.gif?imageMogr2/auto-orient/strip" alt="img"></p><p><strong>具体实现方法</strong></p><p>在网址输入如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://7u2ss1.com1.z0.glb.clouddn.com/love.js</span><br></pre></td></tr></table></figure><p>然后将里面的代码copy一下，新建<code>love.js</code>文件并且将代码复制进去，然后保存。将<code>love.js</code>文件放到路径<code>/themes/next/source/js/src</code>里面，然后打开<code>\themes\next\layout\_layout.swig</code>文件,在末尾（在前面引用会出现找不到的bug）添加以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="5-修改文章内链接文本样式"><a href="#5-修改文章内链接文本样式" class="headerlink" title="5. 修改文章内链接文本样式"></a>5. 修改文章内链接文本样式</h1><p><strong>实现效果图</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/5308475-8cc4fc18c399af7e.gif?imageMogr2/auto-orient/strip" alt="img"></p><p><strong>具体实现方法</strong></p><p>修改文件 <code>themes\next\source\css\_common\components\post\post.styl</code>，在末尾添加如下css样式，：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 文章内链接文本样式</span><br><span class="line">.post-body p a&#123;</span><br><span class="line">  color: #0593d3;</span><br><span class="line">  border-bottom: none;</span><br><span class="line">  border-bottom: 1px solid #0593d3;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    color: #fc6423;</span><br><span class="line">    border-bottom: none;</span><br><span class="line">    border-bottom: 1px solid #fc6423;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中选择<code>.post-body</code> 是为了不影响标题，选择 <code>p</code> 是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义。</p><hr><h1 id="6-修改文章底部的那个带-号的标签"><a href="#6-修改文章底部的那个带-号的标签" class="headerlink" title="6. 修改文章底部的那个带#号的标签"></a>6. 修改文章底部的那个带#号的标签</h1><p><strong>实现效果图</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/5308475-9f1817d2d7627f7a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p><p><strong>具体实现方法</strong></p><p>修改模板<code>/themes/next/layout/_macro/post.swig</code>，搜索 <code>rel=&quot;tag&quot;&gt;#</code>，将 # 换成<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p><hr><h1 id="7-在每篇文章末尾统一添加“本文结束”标记"><a href="#7-在每篇文章末尾统一添加“本文结束”标记" class="headerlink" title="7. 在每篇文章末尾统一添加“本文结束”标记"></a>7. 在每篇文章末尾统一添加“本文结束”标记</h1><p><strong>实现效果图</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/5308475-90be73acbc5f8a7a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p><p><strong>具体实现方法</strong></p><p>在路径 <code>\themes\next\layout\_macro</code> 中新建 <code>passage-end-tag.swig</code> 文件,并添加以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------本文结束&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>接着打开<code>\themes\next\layout\_macro\post.swig</code>文件，在<code>post-body</code> 之后， <code>post-footer</code> 之前添加如下画红色部分代码（post-footer之前两个DIV）：</p><p><img src="http://upload-images.jianshu.io/upload_images/5308475-865c7f94f89b907e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">    &#123;% include &apos;passage-end-tag.swig&apos; %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>然后打开主题配置文件（<code>_config.yml</code>),在末尾添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 文章末尾添加“本文结束”标记</span><br><span class="line">passage_end_tag:</span><br><span class="line">  enabled: true</span><br></pre></td></tr></table></figure><p>完成以上设置之后，在每篇文章之后都会添加如上效果图的样子。</p><hr><h1 id="8-修改作者头像并旋转"><a href="#8-修改作者头像并旋转" class="headerlink" title="8. 修改作者头像并旋转"></a>8. 修改作者头像并旋转</h1><p><strong>实现效果图</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/5308475-e035ce8ac8ea0b5b.gif?imageMogr2/auto-orient/strip" alt="img"></p><p><strong>具体实现方法</strong></p><p>打开<code>\themes\next\source\css\_common\components\sidebar\sidebar-author.styl</code>，在里面添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">.site-author-image &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: $site-author-image-padding;</span><br><span class="line">  max-width: $site-author-image-width;</span><br><span class="line">  height: $site-author-image-height;</span><br><span class="line">  border: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line"></span><br><span class="line">  /* 头像圆形 */</span><br><span class="line">  border-radius: 80px;</span><br><span class="line">  -webkit-border-radius: 80px;</span><br><span class="line">  -moz-border-radius: 80px;</span><br><span class="line">  box-shadow: inset 0 -1px 0 #333sf;</span><br><span class="line"></span><br><span class="line">  /* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 </span><br><span class="line">    (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  /* 鼠标经过头像旋转360度 */</span><br><span class="line">  -webkit-transition: -webkit-transform 1.0s ease-out;</span><br><span class="line">  -moz-transition: -moz-transform 1.0s ease-out;</span><br><span class="line">  transition: transform 1.0s ease-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">img:hover &#123;</span><br><span class="line">  /* 鼠标经过停止头像旋转 </span><br><span class="line">  -webkit-animation-play-state:paused;</span><br><span class="line">  animation-play-state:paused;*/</span><br><span class="line"></span><br><span class="line">  /* 鼠标经过头像旋转360度 */</span><br><span class="line">  -webkit-transform: rotateZ(360deg);</span><br><span class="line">  -moz-transform: rotateZ(360deg);</span><br><span class="line">  transform: rotateZ(360deg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Z 轴旋转动画 */</span><br><span class="line">@-webkit-keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    -webkit-transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    -webkit-transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-moz-keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    -moz-transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    -moz-transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="9-博文压缩"><a href="#9-博文压缩" class="headerlink" title="9. 博文压缩"></a>9. 博文压缩</h1><p>在站点的根目录下执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install gulp -g</span><br><span class="line">$ npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save</span><br></pre></td></tr></table></figure><p>在如下图所示，新建 <code>gulpfile.js</code> ，并填入以下内容：</p><p><img src="http://upload-images.jianshu.io/upload_images/5308475-bb959c3fb610e69c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">var gulp = require(&apos;gulp&apos;);</span><br><span class="line">var minifycss = require(&apos;gulp-minify-css&apos;);</span><br><span class="line">var uglify = require(&apos;gulp-uglify&apos;);</span><br><span class="line">var htmlmin = require(&apos;gulp-htmlmin&apos;);</span><br><span class="line">var htmlclean = require(&apos;gulp-htmlclean&apos;);</span><br><span class="line">// 压缩 public 目录 css</span><br><span class="line">gulp.task(&apos;minify-css&apos;, function() &#123;</span><br><span class="line">    return gulp.src(&apos;./public/**/*.css&apos;)</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(gulp.dest(&apos;./public&apos;));</span><br><span class="line">&#125;);</span><br><span class="line">// 压缩 public 目录 html</span><br><span class="line">gulp.task(&apos;minify-html&apos;, function() &#123;</span><br><span class="line">  return gulp.src(&apos;./public/**/*.html&apos;)</span><br><span class="line">    .pipe(htmlclean())</span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">         removeComments: true,</span><br><span class="line">         minifyJS: true,</span><br><span class="line">         minifyCSS: true,</span><br><span class="line">         minifyURLs: true,</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(&apos;./public&apos;))</span><br><span class="line">&#125;);</span><br><span class="line">// 压缩 public/js 目录 js</span><br><span class="line">gulp.task(&apos;minify-js&apos;, function() &#123;</span><br><span class="line">    return gulp.src(&apos;./public/**/*.js&apos;)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(&apos;./public&apos;));</span><br><span class="line">&#125;);</span><br><span class="line">// 执行 gulp 命令时执行的任务</span><br><span class="line">gulp.task(&apos;default&apos;, [</span><br><span class="line">    &apos;minify-html&apos;,&apos;minify-css&apos;,&apos;minify-js&apos;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>生成博文是执行 <code>hexo g &amp;&amp; gulp</code> 就会根据 <code>gulpfile.js</code> 中的配置，对 public 目录中的静态资源文件进行压缩。</p><hr><h1 id="10-修改代码块自定义样式"><a href="#10-修改代码块自定义样式" class="headerlink" title="10. 修改代码块自定义样式"></a>10. 修改<code></code>代码块自定义样式</h1><p><strong>实现效果图</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/5308475-e83a6ac00d4d1db3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p><p><strong>具体实现方法</strong></p><p>打开<code>\themes\next\source\css\_custom\custom.styl</code>,向里面加入：(颜色可以自己定义)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// Custom styles.</span><br><span class="line">code &#123;</span><br><span class="line">    color: #ff7600;</span><br><span class="line">    background: #fbf7f8;</span><br><span class="line">    margin: 2px;</span><br><span class="line">&#125;</span><br><span class="line">// 大代码块的自定义样式</span><br><span class="line">.highlight, pre &#123;</span><br><span class="line">    margin: 5px 0;</span><br><span class="line">    padding: 5px;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">&#125;</span><br><span class="line">.highlight, code, pre &#123;</span><br><span class="line">    border: 1px solid #d6d6d6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="11-侧边栏社交小图标设置"><a href="#11-侧边栏社交小图标设置" class="headerlink" title="11. 侧边栏社交小图标设置"></a>11. 侧边栏社交小图标设置</h1><p><strong>实现效果图</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/5308475-20e8bba1ad3b343f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p><p><strong>具体实现方法</strong></p><p>打开主题配置文件（<code>_config.yml</code>），搜索<code>social_icons:</code>,在<a href="http://fontawesome.io/icons/" rel="external nofollow noopener noreferrer" target="_blank">图标库</a>找自己喜欢的小图标，并将名字复制在如下位置，保存即可</p><p><img src="http://upload-images.jianshu.io/upload_images/5308475-21e22b05edc57b5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p><hr><h1 id="12-主页文章添加阴影效果"><a href="#12-主页文章添加阴影效果" class="headerlink" title="12. 主页文章添加阴影效果"></a>12. 主页文章添加阴影效果</h1><p><strong>实现效果图</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/5308475-21046c442900bf3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p><p><strong>具体实现方法</strong></p><p>打开<code>\themes\next\source\css\_custom\custom.styl</code>,向里面加入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 主页文章添加阴影效果</span><br><span class="line"> .post &#123;</span><br><span class="line">   margin-top: 60px;</span><br><span class="line">   margin-bottom: 60px;</span><br><span class="line">   padding: 25px;</span><br><span class="line">   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span><br><span class="line">   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><hr><h1 id="13-在网站底部加上访问量"><a href="#13-在网站底部加上访问量" class="headerlink" title="13. 在网站底部加上访问量"></a>13. 在网站底部加上访问量</h1><p><strong>实现效果图</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/5308475-3124557da2b9c75f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p><p><strong>具体实现方法</strong><br>打开<code>\themes\next\layout\_partials\footer.swig</code>文件,在copyright前加上画红线这句话：<br><img src="http://upload-images.jianshu.io/upload_images/5308475-ef8a4643f33fbaa1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script async src=&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>然后再合适的位置添加显示统计的代码，如图：<br><img src="http://upload-images.jianshu.io/upload_images/5308475-bd6fb55b6847d13a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"><br>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;powered-by&quot;&gt;</span><br><span class="line">&lt;i class=&quot;fa fa-user-md&quot;&gt;&lt;/i&gt;&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;</span><br><span class="line">  本站访客数:&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>在这里有两中不同计算方式的统计代码：</p><ol><li><strong>pv</strong>的方式，单个用户连续点击n篇文章，记录n次访问量</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;</span><br><span class="line">    本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure><ol><li><strong>uv</strong>的方式，单个用户连续点击n篇文章，只记录1次访客数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;</span><br><span class="line">  本站总访问量&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;次</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure><p>添加之后再执行<code>hexo d -g</code>，然后再刷新页面就能看到效果</p><hr><h1 id="14-添加热度"><a href="#14-添加热度" class="headerlink" title="14. 添加热度"></a>14. 添加热度</h1><p><strong>实现效果图</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/5308475-9bc8a6587cd1a575.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p><p><strong>具体实现方法</strong></p><p><strong>next</strong>主题集成<strong>leanCloud</strong>，打开<code>/themes/next/layout/_macro/post.swig</code>,在画红线的区域添加<code>℃</code>：</p><p><img src="http://upload-images.jianshu.io/upload_images/5308475-f5dbda6888a79dd4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p><p>然后打开，<code>/themes/next/languages/zh-Hans.yml</code>,将画红框的改为热度就可以了<br><img src="http://upload-images.jianshu.io/upload_images/5308475-bd0e1ac5456a2f0c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p><hr><h1 id="15-网站底部字数统计"><a href="#15-网站底部字数统计" class="headerlink" title="15. 网站底部字数统计"></a>15. 网站底部字数统计</h1><p><strong>实现效果图</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/5308475-f26f21e2f2b34e18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p><p><strong>具体方法实现</strong><br>切换到根目录下，然后运行如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><p>然后在<code>/themes/next/layout/_partials/footer.swig</code>文件尾部加上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;theme-info&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;powered-by&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;span class=&quot;post-count&quot;&gt;博客全站共&#123;&#123; totalcount(site) &#125;&#125;字&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="16-添加-README-md-文件"><a href="#16-添加-README-md-文件" class="headerlink" title="16. 添加 README.md 文件"></a>16. 添加 README.md 文件</h1><p>每个项目下一般都有一个 <code>README.md</code> 文件，但是使用 hexo 部署到仓库后，项目下是没有 <code>README.md</code> 文件的。</p><p>在 Hexo 目录下的 <code>source</code> 根目录下添加一个 <code>README.md</code> 文件，修改站点配置文件 _<code>config.yml</code>，将 <code>skip_render</code> 参数的值设置为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip_render: README.md</span><br></pre></td></tr></table></figure><p>保存退出即可。再次使用 <code>hexo d</code> 命令部署博客的时候就不会在渲染 README.md 这个文件了。</p><hr><h1 id="17-设置网站的图标Favicon"><a href="#17-设置网站的图标Favicon" class="headerlink" title="17. 设置网站的图标Favicon"></a>17. 设置网站的图标Favicon</h1><p><strong>实现效果图</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/5308475-da012d2c0586a1e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p><p><strong>具体方法实现</strong></p><p>在<a href="http://www.easyicon.net/" rel="external nofollow noopener noreferrer" target="_blank">EasyIcon</a>中找一张（32*32）的<code>ico</code>图标,或者去别的网站下载或者制作，并将图标名称改为<code>favicon.ico</code>，然后把图标放在<code>/themes/next/source/images</code>里，并且修改主题配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Put your favicon.ico into `hexo-site/source/` directory.</span><br><span class="line">favicon: /favicon.ico</span><br></pre></td></tr></table></figure><hr><h1 id="18-实现统计功能"><a href="#18-实现统计功能" class="headerlink" title="18. 实现统计功能"></a>18. 实现统计功能</h1><p><strong>实现效果图</strong><br><img src="http://upload-images.jianshu.io/upload_images/5308475-11cf11fe888748a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p><p><strong>具体实现方法</strong></p><p>在根目录下安装 <code>hexo-wordcount</code>,运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><p>然后在主题的配置文件中，配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Post wordcount display settings</span><br><span class="line"># Dependencies: https://github.com/willin/hexo-wordcount</span><br><span class="line">post_wordcount:</span><br><span class="line">  item_text: true</span><br><span class="line">  wordcount: true</span><br><span class="line">  min2read: true</span><br></pre></td></tr></table></figure><hr><h1 id="19-添加顶部加载条"><a href="#19-添加顶部加载条" class="headerlink" title="19. 添加顶部加载条"></a>19. 添加顶部加载条</h1><p><strong>实现效果图</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/5308475-2f5051d9f0352b90.gif?imageMogr2/auto-orient/strip" alt="img"></p><p><strong>具体实现方法</strong></p><p>打开<code>/themes/next/layout/_partials/head.swig</code>文件，添加红框上的代码<br><img src="http://upload-images.jianshu.io/upload_images/5308475-72a578a8e3eee672.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"><br>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;//cdn.bootcss.com/pace/1.0.2/pace.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;link href=&quot;//cdn.bootcss.com/pace/1.0.2/themes/pink/pace-theme-flash.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br></pre></td></tr></table></figure><p>但是，默认的是粉色的，要改变颜色可以在<code>/themes/next/layout/_partials/head.swig</code>文件中添加如下代码（接在刚才link的后面）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .pace .pace-progress &#123;</span><br><span class="line">        background: #1E92FB; /*进度条颜色*/</span><br><span class="line">        height: 3px;</span><br><span class="line">    &#125;</span><br><span class="line">    .pace .pace-progress-inner &#123;</span><br><span class="line">         box-shadow: 0 0 10px #1E92FB, 0 0 5px     #1E92FB; /*阴影颜色*/</span><br><span class="line">    &#125;</span><br><span class="line">    .pace .pace-activity &#123;</span><br><span class="line">        border-top-color: #1E92FB;    /*上边框颜色*/</span><br><span class="line">        border-left-color: #1E92FB;    /*左边框颜色*/</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><blockquote><p>目前，博主的增加顶部加载条的pull request 已被Merge😀===&gt;<a href="https://github.com/iissnan/hexo-theme-next/pull/1689" rel="external nofollow noopener noreferrer" target="_blank">详情</a><br>现在升级最新版的next主题，升级后只需修改主题配置文件(_config.yml)将<code>pace: false</code>改为<code>pace: true</code>就行了，你还可以换不同样式的加载条，如下图：<br><img src="http://upload-images.jianshu.io/upload_images/5308475-6d44a78e76dbf950.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p></blockquote><hr><h1 id="20-在文章底部增加版权信息"><a href="#20-在文章底部增加版权信息" class="headerlink" title="20. 在文章底部增加版权信息"></a>20. 在文章底部增加版权信息</h1><p><strong>实现效果图</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/5308475-a264542f53665849.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p><p>在目录 <code>next/layout/_macro/下</code>添加 <code>my-copyright.swig</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if page.copyright %&#125;</span><br><span class="line">&lt;div class=&quot;my_post_copyright&quot;&gt;</span><br><span class="line">  &lt;script src=&quot;//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- JS库 sweetalert 可修改路径 --&gt;</span><br><span class="line">  &lt;script src=&quot;https://cdn.bootcss.com/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;https://unpkg.com/sweetalert/dist/sweetalert.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot;&gt;&#123;&#123; page.title &#125;&#125;&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&lt;a href=&quot;/&quot; title=&quot;访问 &#123;&#123; theme.author &#125;&#125; 的个人博客&quot;&gt;&#123;&#123; theme.author &#125;&#125;&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;发布时间:&lt;/span&gt;&#123;&#123; page.date.format(&quot;YYYY年MM月DD日 - HH:mm&quot;) &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;最后更新:&lt;/span&gt;&#123;&#123; page.updated.format(&quot;YYYY年MM月DD日 - HH:mm&quot;) &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot; title=&quot;&#123;&#123; page.title &#125;&#125;&quot;&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt;</span><br><span class="line">    &lt;span class=&quot;copy-path&quot;  title=&quot;点击复制文章链接&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; data-clipboard-text=&quot;&#123;&#123; page.permalink &#125;&#125;&quot;  aria-label=&quot;复制成功！&quot;&gt;&lt;/i&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;许可协议:&lt;/span&gt;&lt;i class=&quot;fa fa-creative-commons&quot;&gt;&lt;/i&gt; &lt;a rel=&quot;license&quot; href=&quot;https://creativecommons.org/licenses/by-nc-nd/4.0/&quot; target=&quot;_blank&quot; title=&quot;Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)&quot;&gt;署名-非商业性使用-禁止演绎 4.0 国际&lt;/a&gt; 转载请保留原文链接及作者。&lt;/p&gt;  </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt; </span><br><span class="line">    var clipboard = new Clipboard(&apos;.fa-clipboard&apos;);</span><br><span class="line">    $(&quot;.fa-clipboard&quot;).click(function()&#123;</span><br><span class="line">      clipboard.on(&apos;success&apos;, function()&#123;</span><br><span class="line">        swal(&#123;   </span><br><span class="line">          title: &quot;&quot;,   </span><br><span class="line">          text: &apos;复制成功&apos;,</span><br><span class="line">          icon: &quot;success&quot;, </span><br><span class="line">          showConfirmButton: true</span><br><span class="line">          &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    &#125;);  </span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>在目录<code>next/source/css/_common/components/post/</code>下添加<code>my-post-copyright.styl</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">.my_post_copyright &#123;</span><br><span class="line">  width: 85%;</span><br><span class="line">  max-width: 45em;</span><br><span class="line">  margin: 2.8em auto 0;</span><br><span class="line">  padding: 0.5em 1.0em;</span><br><span class="line">  border: 1px solid #d3d3d3;</span><br><span class="line">  font-size: 0.93rem;</span><br><span class="line">  line-height: 1.6em;</span><br><span class="line">  word-break: break-all;</span><br><span class="line">  background: rgba(255,255,255,0.4);</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright p&#123;margin:0;&#125;</span><br><span class="line">.my_post_copyright span &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  width: 5.2em;</span><br><span class="line">  color: #b5b5b5;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .raw &#123;</span><br><span class="line">  margin-left: 1em;</span><br><span class="line">  width: 5em;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright a &#123;</span><br><span class="line">  color: #808080;</span><br><span class="line">  border-bottom:0;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright a:hover &#123;</span><br><span class="line">  color: #a3d2a3;</span><br><span class="line">  text-decoration: underline;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright:hover .fa-clipboard &#123;</span><br><span class="line">  color: #000;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .post-url:hover &#123;</span><br><span class="line">  font-weight: normal;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .copy-path &#123;</span><br><span class="line">  margin-left: 1em;</span><br><span class="line">  width: 1em;</span><br><span class="line">  +mobile()&#123;display:none;&#125;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .copy-path:hover &#123;</span><br><span class="line">  color: #808080;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改<code>next/layout/_macro/post.swig</code>，在代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">      &#123;% if not is_index %&#125;</span><br><span class="line">        &#123;% include &apos;wechat-subscriber.swig&apos; %&#125;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>之前添加增加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">      &#123;% if not is_index %&#125;</span><br><span class="line">        &#123;% include &apos;my-copyright.swig&apos; %&#125;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>如下：</p><p><img src="http://upload-images.jianshu.io/upload_images/5308475-769a382b6c9ada3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p><p>修改<code>next/source/css/_common/components/post/post.styl</code>文件，在最后一行增加代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;my-post-copyright&quot;</span><br></pre></td></tr></table></figure><p>保存重新生成即可。<br>如果要在该博文下面增加版权信息的显示，需要在 Markdown 中增加copyright: true的设置，类似：</p><blockquote><p><strong>小技巧</strong>：如果你觉得每次都要输入<code>copyright: true</code>很麻烦的话,那么在<code>/scaffolds/post.md</code>文件中添加：<br><img src="http://upload-images.jianshu.io/upload_images/5308475-51f087ce1f1903a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"><br>这样每次<code>hexo new &quot;你的内容&quot;</code>之后，生成的md文件会自动把<code>copyright:</code>加到里面去<br>(<strong>注意</strong>：如果解析出来之后，你的原始链接有问题：如：<code>http://yoursite.com/前端小项目：使用canvas绘画哆啦A梦.html</code>,那么在根目录下<code>_config.yml</code>中写成类似这样：）<br><img src="http://upload-images.jianshu.io/upload_images/5308475-980129b36907d103.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img">就行了。</p></blockquote><hr><h1 id="21-添加网易云跟帖-跟帖关闭，已失效，改为来必力"><a href="#21-添加网易云跟帖-跟帖关闭，已失效，改为来必力" class="headerlink" title="21. 添加网易云跟帖(跟帖关闭，已失效，改为来必力)"></a>21. 添加网易云跟帖(跟帖关闭，已失效，改为来必力)</h1><p><strong>实现效果图</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/5308475-86b212c1221292ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p><p><strong>具体方法实现</strong><br>有两种实现方法：<br>①更新next主题，因为最新版本的主题已经支持这种评论。直接在主题配置文件<code>_config.yml</code> 文件中添加如下配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gentie_productKey: #your-gentie-product-key</span><br></pre></td></tr></table></figure><p>②如果你不想更新的话，那么按下面步骤进行：<br>首先，还是在主题配置文件<code>_config.yml</code> 文件中添加如下配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gentie_productKey: #your-gentie-product-key</span><br></pre></td></tr></table></figure><p>你的<code>productKey</code>就是下面画红线部分<br><img src="http://upload-images.jianshu.io/upload_images/5308475-2d1eeef55db50cfc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p><p>然后在在<code>layout/_scripts/third-party/comments/</code> 目录中添加 <code>gentie.swig</code>，文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if not (theme.duoshuo and theme.duoshuo.shortname) and not theme.duoshuo_shortname and not theme.disqus_shortname and not theme.hypercomments_id %&#125;</span><br><span class="line">  &#123;% if theme.gentie_productKey %&#125;</span><br><span class="line">    &#123;% set gentie_productKey = theme.gentie_productKey %&#125;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      var cloudTieConfig = &#123;</span><br><span class="line">        url: document.location.href, </span><br><span class="line">        sourceId: &quot;&quot;,</span><br><span class="line">        productKey: &quot;&#123;&#123;gentie_productKey&#125;&#125;&quot;,</span><br><span class="line">        target: &quot;cloud-tie-wrapper&quot;</span><br><span class="line">      &#125;;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://img1.ws.126.net/f2e/tie/yun/sdk/loader.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>layout/_scripts/third-party/comments.swig</code>文件中追加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include &apos;./comments/gentie.swig&apos; %&#125;</span><br></pre></td></tr></table></figure><p>最后，在 <code>layout/_partials/comments.swig</code> 文件中条件最后追加网易云跟帖插件引用的判断逻辑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% elseif theme.gentie_productKey %&#125;</span><br><span class="line">      &lt;div id=&quot;cloud-tie-wrapper&quot; class=&quot;cloud-tie-wrapper&quot;&gt;</span><br><span class="line">      &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>具体位置如下：<br><img src="http://upload-images.jianshu.io/upload_images/5308475-c9199439d2396989.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p><p>可能你<code>hexo s</code>时可能看不到，直接<code>hexo d</code>就可以看到了</p><hr><blockquote><p>近日，我朋友发来消息，说网易云跟帖要关了，我网上查了一下，果然如此</p></blockquote><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fhdq9vii8pj310k0iqjse.jpg" alt="img"></p><blockquote><p>😭都是泪,上次用了多说，结果多说关了，接着是网易云跟帖😷，这次直接用国外的来必力，应该不会这么容易关吧😏</p></blockquote><p>方法其实还是跟上面差不多的</p><p>首先在 <code>_config.yml</code> 文件中添加如下配置：(<strong>注意！如果主题是最新版的，直接写你的liver_uid就行了</strong>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Support for LiveRe comments system.</span><br><span class="line"># You can get your uid from https://livere.com/insight/myCode (General web site)</span><br><span class="line">livere_uid: your uid</span><br></pre></td></tr></table></figure><p>其中，<code>livere_uid</code>就是画红线的部分<br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fhdqgyeu2fj30ms02yglr.jpg" alt="img"></p><p>然后在 <code>layout/_scripts/third-party/comments/</code> 目录中添加 livere.swig，文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if not (theme.duoshuo and theme.duoshuo.shortname) and not theme.duoshuo_shortname and not theme.disqus_shortname and not theme.hypercomments_id and not theme.gentie_productKey %&#125;</span><br><span class="line">  &#123;% if theme.livere_uid %&#125;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">      (function(d, s) &#123;</span><br><span class="line">        var j, e = d.getElementsByTagName(s)[0];</span><br><span class="line">        if (typeof LivereTower === &apos;function&apos;) &#123; return; &#125;</span><br><span class="line">        j = d.createElement(s);</span><br><span class="line">        j.src = &apos;https://cdn-city.livere.com/js/embed.dist.js&apos;;</span><br><span class="line">        j.async = true;</span><br><span class="line">        e.parentNode.insertBefore(j, e);</span><br><span class="line">      &#125;)(document, &apos;script&apos;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>然后在 <code>layout/_scripts/third-party/comments.swig</code>文件中追加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include &apos;./comments/livere.swig&apos; %&#125;</span><br></pre></td></tr></table></figure><p>最后，在 <code>layout/_partials/comments.swig</code> 文件中条件最后追加 LiveRe 插件是否引用的判断逻辑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% elseif theme.livere_uid %&#125;</span><br><span class="line">      &lt;div id=&quot;lv-container&quot; data-id=&quot;city&quot; data-uid=&quot;&#123;&#123; theme.livere_uid &#125;&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>完</p><hr><h1 id="22-隐藏网页底部powered-By-Hexo-强力驱动"><a href="#22-隐藏网页底部powered-By-Hexo-强力驱动" class="headerlink" title="22. 隐藏网页底部powered By Hexo / 强力驱动"></a>22. 隐藏网页底部powered By Hexo / 强力驱动</h1><p>打开<code>themes/next/layout/_partials/footer.swig</code>,使用”<!-- -->”隐藏之间的代码即可，或者直接删除。位置如图：</p><p><img src="http://upload-images.jianshu.io/upload_images/5308475-8e8340c7a0489bce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p><hr><h1 id="23-修改网页底部的桃心"><a href="#23-修改网页底部的桃心" class="headerlink" title="23. 修改网页底部的桃心"></a>23. 修改网页底部的桃心</h1><p>还是打开<code>themes/next/layout/_partials/footer.swig</code>，找到：<br><img src="http://upload-images.jianshu.io/upload_images/5308475-f6355823aef7f723.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img">，然后还是在<a href="http://fontawesome.io/icons/" rel="external nofollow noopener noreferrer" target="_blank">图标库</a>中找到你自己喜欢的图标，然后修改画红线的部分就可以了。</p><hr><h1 id="24-文章加密访问"><a href="#24-文章加密访问" class="headerlink" title="24. 文章加密访问"></a>24. 文章加密访问</h1><p><strong>实现效果图</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/5308475-0c7e5e61b78dc937.gif?imageMogr2/auto-orient/strip" alt="img"></p><p><strong>具体实现方法</strong></p><p>打开<code>themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig</code>文件,在以下位置插入这样一段代码：</p><p><img src="http://upload-images.jianshu.io/upload_images/5308475-446793cd6d740b19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    (function () &#123;</span><br><span class="line">        if (&apos;&#123;&#123; page.password &#125;&#125;&apos;) &#123;</span><br><span class="line">            if (prompt(&apos;请输入文章密码&apos;) !== &apos;&#123;&#123; page.password &#125;&#125;&apos;) &#123;</span><br><span class="line">                alert(&apos;密码错误！&apos;);</span><br><span class="line">                if (history.length === 1) &#123;</span><br><span class="line">                    location.replace(&quot;http://xxxxxxx.xxx&quot;); // 这里替换成你的首页</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    history.back();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>然后在文章上写成类似这样：</p><p><img src="http://upload-images.jianshu.io/upload_images/5308475-e6c726a0152cb8ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p><hr><h1 id="25-添加jiathis分享"><a href="#25-添加jiathis分享" class="headerlink" title="25. 添加jiathis分享"></a>25. 添加jiathis分享</h1><blockquote><p><strong>注意：</strong>JiaThis 不支持 https</p></blockquote><p>在<strong>主题配置文件</strong>中，JiaThis为true，就行了，如下图</p><p><img src="http://upload-images.jianshu.io/upload_images/5308475-f381bc9e7c73b1e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p><p>默认是这样子的：<br><img src="http://upload-images.jianshu.io/upload_images/5308475-a88228b9ea43ab2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"><br>如果你想自定义话，打开<code>themes/next/layout/_partials/share/jiathis.swig</code>修改画红线部分就可以了<br><img src="http://upload-images.jianshu.io/upload_images/5308475-68c51498744e1636.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img"></p><hr><h1 id="26-博文置顶"><a href="#26-博文置顶" class="headerlink" title="26. 博文置顶"></a>26. 博文置顶</h1><p>修改 <code>hero-generator-index</code> 插件，把文件：<code>node_modules/hexo-generator-index/lib/generator.js</code> 内的代码替换为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line">var pagination = require(&apos;hexo-pagination&apos;);</span><br><span class="line">module.exports = function(locals)&#123;</span><br><span class="line">  var config = this.config;</span><br><span class="line">  var posts = locals.posts;</span><br><span class="line">    posts.data = posts.data.sort(function(a, b) &#123;</span><br><span class="line">        if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义</span><br><span class="line">            if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排</span><br><span class="line">            else return b.top - a.top; // 否则按照top值降序排</span><br><span class="line">        &#125;</span><br><span class="line">        else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">        else if(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;</span><br><span class="line">        else return b.date - a.date; // 都没定义按照文章日期降序排</span><br><span class="line">    &#125;);</span><br><span class="line">  var paginationDir = config.pagination_dir || &apos;page&apos;;</span><br><span class="line">  return pagination(&apos;&apos;, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [&apos;index&apos;, &apos;archive&apos;],</span><br><span class="line">    format: paginationDir + &apos;/%d/&apos;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在文章中添加 <code>top</code> 值，数值越大文章越靠前，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 解决Charles乱码问题</span><br><span class="line">date: 2017-05-22 22:45:48</span><br><span class="line">tags: 技巧</span><br><span class="line">categories: 技巧</span><br><span class="line">copyright: true</span><br><span class="line">top: 100</span><br><span class="line">---</span><br></pre></td></tr></table></figure><hr><h1 id="27-修改字体大小"><a href="#27-修改字体大小" class="headerlink" title="27. 修改字体大小"></a>27. 修改字体大小</h1><p>打开<code>\themes\next\source\css\ _variables\base.styl</code>文件，将<code>$font-size-base</code>改成<code>16px</code>，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$font-size-base =16px</span><br></pre></td></tr></table></figure><hr><h1 id="28-修改打赏字体不闪动"><a href="#28-修改打赏字体不闪动" class="headerlink" title="28. 修改打赏字体不闪动"></a>28. 修改打赏字体不闪动</h1><p>修改文件<code>next/source/css/_common/components/post/post-reward.styl</code>，然后注释其中的函数<code>wechat:hover</code>和<code>alipay:hover</code>，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/* 注释文字闪动函数</span><br><span class="line"> #wechat:hover p&#123;</span><br><span class="line">    animation: roll 0.1s infinite linear;</span><br><span class="line">    -webkit-animation: roll 0.1s infinite linear;</span><br><span class="line">    -moz-animation: roll 0.1s infinite linear;</span><br><span class="line">&#125;</span><br><span class="line"> #alipay:hover p&#123;</span><br><span class="line">   animation: roll 0.1s infinite linear;</span><br><span class="line">    -webkit-animation: roll 0.1s infinite linear;</span><br><span class="line">    -moz-animation: roll 0.1s infinite linear;</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><hr><h1 id="29-侧边栏推荐阅读"><a href="#29-侧边栏推荐阅读" class="headerlink" title="29. 侧边栏推荐阅读"></a>29. 侧边栏推荐阅读</h1><p>今天有位网友问推荐阅读是怎么弄，其实挺简单的，打开主题配置文件修改成这样就行了(links里面写你想要的链接):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Blogrolls</span><br><span class="line">links_title: 推荐阅读</span><br><span class="line">#links_layout: block</span><br><span class="line">links_layout: inline</span><br><span class="line">links:</span><br><span class="line">  优设: http://www.uisdc.com/</span><br><span class="line">  张鑫旭: http://www.zhangxinxu.com/</span><br><span class="line">  Web前端导航: http://www.alloyteam.com/nav/</span><br><span class="line">  前端书籍资料: http://www.36zhen.com/t?id=3448</span><br><span class="line">  百度前端技术学院: http://ife.baidu.com/</span><br><span class="line">  google前端开发基础: http://wf.uisdc.com/cn/</span><br></pre></td></tr></table></figure><h1 id="30-自定义鼠标样式"><a href="#30-自定义鼠标样式" class="headerlink" title="30. 自定义鼠标样式"></a>30. 自定义鼠标样式</h1><p>打开<code>themes/next/source/css/_custom/custom.styl</code>,在里面写下如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 鼠标样式</span><br><span class="line">  * &#123;</span><br><span class="line">      cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword2.ico&quot;),auto!important</span><br><span class="line">  &#125;</span><br><span class="line">  :active &#123;</span><br><span class="line">      cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword1.ico&quot;),auto!important</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>其中 url 里面必须是 ico 图片，ico 图片可以上传到网上（我是使用七牛云图床），然后获取外链，复制到 url 里就行了</p><hr><h1 id="31-为博客加上萌萌的宠物"><a href="#31-为博客加上萌萌的宠物" class="headerlink" title="31.为博客加上萌萌的宠物"></a>31.为博客加上萌萌的宠物</h1><p><strong>实现效果图</strong><br><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/15006365382590.jpg" alt="img"></p><p><strong>具体实现方法</strong><br>在终端切换到你的博客的路径里，然后输入如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -save hexo-helper-live2d</span><br></pre></td></tr></table></figure><p><del>然后打开<code>Hexo/blog/themes/next/layout</code><br>的<code>_layout.swig</code>,将下面代码放到<code>&lt;/body&gt;</code>之前：</del></p><p>(<strong>注意，由于官方更新了包，所以画删除线的不用弄</strong>)</p><p>然后在在 <code>hexo</code> 的 <code>_config.yml</code>中添加参数：（具体配置可以看<a href="https://github.com/EYHN/hexo-helper-live2d" rel="external nofollow noopener noreferrer" target="_blank">官方文档</a>）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-wanko</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: true</span><br></pre></td></tr></table></figure><p>然后hexo clean ，hexo g ，hexo d 就可以看到了。</p><blockquote><p>注意！如果你在 hexo d 的时候出现我下面这个问题<br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fhrqw92685j31dk0q4grl.jpg" alt="img"><br>你可以这样，首先删除hexo 下面的.deploy_git文件夹，然后运行</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.autocrlf false</span><br></pre></td></tr></table></figure><blockquote><p>重新 hexo clean,hexo g,hexo d就行了</p></blockquote><hr><h1 id="32-DaoVoice-在线联系"><a href="#32-DaoVoice-在线联系" class="headerlink" title="32.DaoVoice 在线联系"></a>32.DaoVoice 在线联系</h1><p><strong>实现效果图</strong></p><p><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/2017-12-18-053222.png" alt="img"></p><p><strong>具体实现方法</strong></p><p>首先在 <a href="https://account.daocloud.io/signin" rel="external nofollow noopener noreferrer" target="_blank">daovoice</a> 注册账号,<a href="http://dashboard.daovoice.io/get-started?invite_code=0f81ff2f" rel="external nofollow noopener noreferrer" target="_blank">邀请码</a>是<code>0f81ff2f</code>，注册完成后会得到一个 app_id :</p><p><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/2017-12-18-054308.png" alt="img"><br>记下这个 app_id的值，然后打开<code>/themes/next/layout/_partials/head.swig</code>,写下如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.daovoice %&#125;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  (function(i,s,o,g,r,a,m)&#123;i[&quot;DaoVoiceObject&quot;]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=&quot;utf-8&quot;;m.parentNode.insertBefore(a,m)&#125;)(window,document,&quot;script&quot;,(&apos;https:&apos; == document.location.protocol ? &apos;https:&apos; : &apos;http:&apos;) + &quot;//widget.daovoice.io/widget/0f81ff2f.js&quot;,&quot;daovoice&quot;)</span><br><span class="line">  daovoice(&apos;init&apos;, &#123;</span><br><span class="line">      app_id: &quot;&#123;&#123;theme.daovoice_app_id&#125;&#125;&quot;</span><br><span class="line">    &#125;);</span><br><span class="line">  daovoice(&apos;update&apos;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/2017-12-18-054603.png" alt="img"></p><p>接着打开<strong>主题配置文件</strong>，在最后写下如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Online contact </span><br><span class="line">daovoice: true</span><br><span class="line"></span><br><span class="line">daovoice_app_id: 这里填你的刚才获得的 app_id</span><br></pre></td></tr></table></figure><p>重新 hexo g ，hexo s 就能看到效果了。</p><blockquote><p>安装成功后可以在DaoVoice 控制台上的聊天设置里设置聊天窗口样式，附上我的设置</p></blockquote><p><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/2017-12-18-055639.png" alt="img"></p><hr><h1 id="33-点击爆炸效果"><a href="#33-点击爆炸效果" class="headerlink" title="33.点击爆炸效果"></a>33.点击爆炸效果</h1><p><strong>实现效果图</strong></p><p><img src="https://blog-1257878287.cos.ap-chengdu.myqcloud.com/2017-12-18-084649.png" alt="img"></p><p><strong>实现方法</strong></p><p>跟那个红心是差不多的，首先在<code>themes/next/source/js/src</code>里面建一个叫fireworks.js的文件，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;vart=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;functioncreateParticule(e,t)&#123;var a=&#123;&#125;;returna.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;returna.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;functionrenderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(vara=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;returne.endPos.x&#125;,y:function(e)&#123;returne.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;vara;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;varctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;&quot;use strict&quot;;functionupdateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;vart=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;functioncreateParticule(e,t)&#123;var a=&#123;&#125;;returna.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;returna.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;functionrenderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(vara=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;returne.endPos.x&#125;,y:function(e)&#123;returne.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;vara;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;varctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;;</span><br></pre></td></tr></table></figure><p>打开<code>themes/next/layout/_layout.swig</code>,在<code>&lt;/body&gt;</code>上面写下如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.fireworks %&#125;</span><br><span class="line">   &lt;canvas class=&quot;fireworks&quot; style=&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;/canvas&gt; </span><br><span class="line">   &lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;&gt;&lt;/script&gt; </span><br><span class="line">   &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/fireworks.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>打开主题配置文件，在里面最后写下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Fireworks</span><br><span class="line">fireworks: true</span><br></pre></td></tr></table></figure><p>完😀</p><hr><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><blockquote><p>感谢大神们的文章，真的学到了许多，有些忘了记录下来，在这里由衷的感谢。虽然比较折腾，但是确实满满的成就感，Road endless its long and far, I will seek up and down！</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;看到有些next主题的网站很炫酷，那么是怎么配置的呢？接下来我会讲一讲如何实现一些炫酷的效果&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://leomalik.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://leomalik.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>二分查找</title>
    <link href="http://leomalik.github.io/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html"/>
    <id>http://leomalik.github.io/二分查找.html</id>
    <published>2019-02-17T13:00:01.000Z</published>
    <updated>2019-07-07T11:47:34.437Z</updated>
    
    <content type="html"><![CDATA[<p>二分查找多次刷题时遇到，虽然每次也能写对，但花了蛮多时间，没好好想过。而且网上的太多版本，并不是很简洁，而且边界条件变化情况太多，容易混淆，下面是自己对二分查找的一些思考和总结，尽量写得简单易懂。</p><h3 id="小技巧："><a href="#小技巧：" class="headerlink" title="小技巧："></a>小技巧：</h3><ul><li>优化二维数组查找时间复杂度：使用[n/column] [n%column]来表示行数和列数，避免双重循环</li><li>遍历两个数组：使用双指针，每次判断前进哪个指针</li><li>搜索问题中，如果有相同的两个元素，则必须要用O(n)的时间复杂度（例：全是2的数组）</li></ul><a id="more"></a><h3 id="三步翻转法："><a href="#三步翻转法：" class="headerlink" title="三步翻转法："></a>三步翻转法：</h3><p><strong>题目描述:</strong><br>给定一个字符串，要求把字符串前面的若干个字符移动到字符串的尾部，如把字符串“abcdef”前面的2个字符’a’和’b’移动到字符串的尾部，使得原字符串变成字符串“cdefab”。请写一个函数完成此功能，要求对长度为n的字符串操作的时间复杂度为 O(n)，空间复杂度为 O(1)。</p><p><strong>三步反转法</strong><br>对于这个问题，换一个角度思考一下。</p><p>将一个字符串分成X和Y两个部分，在每部分字符串上定义反转操作，如X^T，即把X的所有字符反转（如，X=”abc”，那么X^T=”cba”），那么就得到下面的结论：(X^TY^T)^T=YX，显然就解决了字符串的反转问题。</p><p>例如，字符串 abcdef ，若要让def翻转到abc的前头，只要按照下述3个步骤操作即可：</p><p>首先将原字符串分为两个部分，即X:abc，Y:def；<br>将X反转，X-&gt;X^T，即得：abc-&gt;cba；将Y反转，Y-&gt;Y^T，即得：def-&gt;fed。<br>反转上述步骤得到的结果字符串X^TY^T，即反转字符串cbafed的两部分（cba和fed）给予反转，cbafed得到defabc，形式化表示为(X^TY^T)^T=YX，这就实现了整个反转。</p><p><strong>代码</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReverseString</span><span class="params">(<span class="keyword">char</span>* s,<span class="keyword">int</span> from,<span class="keyword">int</span> to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (from &lt; to)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> t = s[from];</span><br><span class="line">        s[from++] = s[to];</span><br><span class="line">        s[to--] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LeftRotateString</span><span class="params">(<span class="keyword">char</span>* s,<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m %= n;               <span class="comment">//若要左移动大于n位，那么和%n 是等价的</span></span><br><span class="line">    ReverseString(s, <span class="number">0</span>, m - <span class="number">1</span>); <span class="comment">//反转[0..m - 1]，套用到上面举的例子中，就是X-&gt;X^T，即 abc-&gt;cba</span></span><br><span class="line">    ReverseString(s, m, n - <span class="number">1</span>); <span class="comment">//反转[m..n - 1]，例如Y-&gt;Y^T，即 def-&gt;fed</span></span><br><span class="line">    ReverseString(s, <span class="number">0</span>, n - <span class="number">1</span>); <span class="comment">//反转[0..n - 1]，即如整个反转，(X^TY^T)^T=YX，即 cbafed-&gt;defabc。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基本二分查找："><a href="#基本二分查找：" class="headerlink" title="基本二分查找："></a>基本二分查找：</h3><p>二分查找原始版–查找某个数的下标：</p><p>对于一个sorted array分以下几步：</p><ul><li>输入数组为空或者NULL</li><li>while(s+1&lt;e)，s为开始下标，e为结束下标减一 (nums.size()-1)</li><li>先考虑边界情况，再缩小搜索区间</li><li>这样可以把最后得到的元素缩减至两个，最后做判断<ul><li>如果是判断最后一个O元素，则先判断nums[e]是不是等于target，</li><li>如果是判断第一个X元素，则先判断nums[s]是不是等于target</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @param nums: The integer array.</span></span><br><span class="line"><span class="comment">     * @param target: Target to find.</span></span><br><span class="line"><span class="comment">     * @return: The first position of target. Position starts from 0.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write your code here</span></span><br><span class="line">        <span class="keyword">int</span> s=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> e=nums.size()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums.size() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(s+<span class="number">1</span>&lt;e)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = s+(e-s)/<span class="number">2</span>; <span class="comment">//防止越界</span></span><br><span class="line">            <span class="keyword">if</span>(nums[mid] == target)&#123;</span><br><span class="line">                e = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target)&#123;</span><br><span class="line">                e = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                s = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nums[s] == target)&#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nums[e] == target)&#123;</span><br><span class="line">            <span class="keyword">return</span> e;  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="拓展题型："><a href="#拓展题型：" class="headerlink" title="拓展题型："></a>拓展题型：</h3><p>0.未定长度型，搜索特定值</p><p><strong>描述：</strong>给定一个排序数组，未给定最大长度，搜索其中的一个值</p><p><strong>分析：</strong>通过倍增法，不断的扩大区间，求出搜索范围，再进行二分</p><p>1.OOOXXX型，寻找分界点</p><p><a href="https://www.lintcode.com/problem/first-bad-version/description" rel="external nofollow noopener noreferrer" target="_blank">https://www.lintcode.com/problem/first-bad-version/description</a></p><p><strong>描述：</strong>代码库的版本号是从 1 到 <em>n</em> 的整数。某一天，有人提交了错误版本的代码，因此造成自身及之后版本的代码在单元测试中均出错。请找出第一个错误的版本号。</p><p>你可以通过 <code>isBadVersion</code> 的接口来判断版本号 version 是否在单元测试中出错，具体接口详情和调用方法请见代码的注释部分。</p><p><strong>分析：</strong>转换成求最后一个O或者是第一个X，使用二分法查找</p><p>2.旋转数组型，寻找分界点</p><p><a href="https://www.lintcode.com/problem/find-minimum-in-rotated-sorted-array/" rel="external nofollow noopener noreferrer" target="_blank">https://www.lintcode.com/problem/find-minimum-in-rotated-sorted-array/</a></p><p><strong>描述：</strong>假设一个排好序的数组在其某一未知点发生了旋转（比如<strong>0 1 2 4 5 6 7</strong>可能在第3和第4个元素间发生旋转变成<strong>4 5 6 7 0 1 2</strong>）。</p><p>你需要找到其中最小的元素。</p><p>你可以假设数组中不存在重复的元素。</p><p><img src="https://raw.githubusercontent.com/LeoMalik/ImgBed/master/img/c364e082gy1g09rbg519ej20e80amwee.jpg" alt=""></p><p><strong>分析：</strong>一开始想转换成求大于A的第一个点或者是小于B的最后一个点，使用二分法查找，后来发现，当数组处于特殊情况时，例如数组是从A到B递增时，不存在小于A的点，所以选择找&lt;=B的最后一个点。</p><p>3.搜索二维矩阵中的最小值</p><p><a href="https://www.lintcode.com/problem/search-a-2d-matrix/description" rel="external nofollow noopener noreferrer" target="_blank">https://www.lintcode.com/problem/search-a-2d-matrix/description</a></p><p><strong>描述：</strong>写出一个高效的算法来搜索 <em>m</em> × <em>n</em>矩阵中的值。</p><p>这个矩阵具有以下特性：</p><ul><li>每行中的整数从左到右是排序的。</li><li>每行的第一个数大于上一行的最后一个整数。</li></ul><p><strong>分析：</strong>搜索二维数组的时候，可以计算出这个二维数组的总长度，然后用</p><p>[n/column] [n%column]来表示行数和列数，间接的减小时间复杂度。</p><p>4.搜索波峰</p><p><a href="https://www.lintcode.com/problem/find-peak-element/description" rel="external nofollow noopener noreferrer" target="_blank">https://www.lintcode.com/problem/find-peak-element/description</a></p><p><strong>描述</strong>：你给出一个整数数组(size为n)，其具有以下特点：</p><ul><li>相邻位置的数字是不同的</li><li>A[0] &lt; A[1] 并且 A[n - 2] &gt; A[n - 1]</li></ul><p>假定<em>P</em>是峰值的位置则满足<code>A[P] &gt; A[P-1]</code>且<code>A[P] &gt; A[P+1]</code>，返回数组中任意一个峰值的位置。</p><p><strong>分析：</strong>搜索波峰时，比较a[n]和a[n+1]之间的大小关系，判断是在走上坡还是下坡还是在波峰，从而判断波峰是在左边还是右边，从而缩小范围</p><p>5.旋转数组型，寻找特定值</p><p><strong>描述：</strong>假设有一个排序的按未知的旋转轴旋转的数组(比如，<strong>0 1 2 4 5 6 7</strong> 可能成为<strong>4 5 6 7 0 1 2</strong>)。给定一个目标值进行搜索，如果在数组中找到目标值返回数组中的索引位置，否则返回-1。</p><p>你可以假设数组中不存在重复的元素。</p><p><img src="https://raw.githubusercontent.com/LeoMalik/ImgBed/master/img/c364e082gy1g09rw2d79yj20f50aujrb.jpg" alt=""></p><p><strong>分析：</strong>先切一刀，找到mid，判断target是否在 s~m 区间内，</p><p>如果在，则设置e=mid，在此区间内使用二分法查找，</p><p>如果不在，由于剩下的还是一个Rotated array，我们可以定义s=mid，进行查找</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @param A: an integer rotated sorted array</span></span><br><span class="line"><span class="comment">     * @param target: an integer to be searched</span></span><br><span class="line"><span class="comment">     * @return: an integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">         <span class="comment">// write your code here</span></span><br><span class="line">        <span class="keyword">int</span> s=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> e=A.size()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> mid;</span><br><span class="line">        <span class="keyword">if</span>(e==<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;           </span><br><span class="line">        <span class="keyword">while</span>(s+<span class="number">1</span>&lt;e)&#123;</span><br><span class="line">            mid = s+(e-s)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(A[mid]==target)&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(A[s]&lt;A[mid])&#123;</span><br><span class="line">                <span class="keyword">if</span>(target&gt;=A[s]&amp;&amp;target&lt;=A[mid])&#123;</span><br><span class="line">                    e=mid;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    s=mid;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(target&gt;=A[mid]&amp;&amp;target&lt;=A[e])&#123;</span><br><span class="line">                    s=mid;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    e=mid;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(A[s]==target)</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        <span class="keyword">if</span>(A[e]==target)</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;二分查找多次刷题时遇到，虽然每次也能写对，但花了蛮多时间，没好好想过。而且网上的太多版本，并不是很简洁，而且边界条件变化情况太多，容易混淆，下面是自己对二分查找的一些思考和总结，尽量写得简单易懂。&lt;/p&gt;
&lt;h3 id=&quot;小技巧：&quot;&gt;&lt;a href=&quot;#小技巧：&quot; class=&quot;headerlink&quot; title=&quot;小技巧：&quot;&gt;&lt;/a&gt;小技巧：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;优化二维数组查找时间复杂度：使用[n/column] [n%column]来表示行数和列数，避免双重循环&lt;/li&gt;
&lt;li&gt;遍历两个数组：使用双指针，每次判断前进哪个指针&lt;/li&gt;
&lt;li&gt;搜索问题中，如果有相同的两个元素，则必须要用O(n)的时间复杂度（例：全是2的数组）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="算法" scheme="http://leomalik.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://leomalik.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LintCode" scheme="http://leomalik.github.io/tags/LintCode/"/>
    
  </entry>
  
  <entry>
    <title>动态规划小结</title>
    <link href="http://leomalik.github.io/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%B0%8F%E7%BB%93.html"/>
    <id>http://leomalik.github.io/动态规划小结.html</id>
    <published>2019-02-13T15:03:06.000Z</published>
    <updated>2019-07-14T08:47:29.101Z</updated>
    
    <content type="html"><![CDATA[<p>动态规划的四个组成部分：</p><p>1.确定状态，化为子问题</p><p>2.转移方程</p><p>3.边界情况</p><p>4.计算顺序</p><a id="more"></a><p><img src="https://raw.githubusercontent.com/LeoMalik/ImgBed/master/img/c364e082ly1g058s33bzhj20nh0jt47e.jpg" alt=""></p><p>动态规划和递归效率的比较：</p><p>如图所示，递归会重复计算，效率极差：</p><p><img src="https://raw.githubusercontent.com/LeoMalik/ImgBed/master/img/c364e082ly1g058snod1oj213u0j4ai1.jpg" alt=""></p><h3 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h3><h3 id="Unique-path"><a href="#Unique-path" class="headerlink" title="Unique path"></a>Unique path</h3><p><img src="https://raw.githubusercontent.com/LeoMalik/ImgBed/master/img/c364e082ly1g0585av1qsj213f07bjuz.jpg" alt=""></p><p><img src="https://raw.githubusercontent.com/LeoMalik/ImgBed/master/img/c364e082ly1g057x4f423j211l0jqtcu.jpg" alt=""></p><p><strong>1.初始化</strong>：</p><ol><li><p>初始化数组大小：</p><ul><li><strong>从0开始</strong>，一般为坐标型，建立一个n大小的数组，从0开始遍历。</li><li><strong>从1开始</strong>，一般为坐标型，建立一个n+1大小的数组，从1开始遍历</li></ul></li><li><p>初始化起始位置：</p><ul><li><p>如果是<strong>序列型</strong>，n代表前n项，循环则从1开始</p></li><li><p>如果是<strong>坐标型</strong>，n代表对应位置的坐标，循环由0开始。</p></li></ul></li><li><p>初始化每个元素：</p><ul><li><p>无法走到的地方最一开始都初始化为0。</p></li><li><p><strong>求最值型动态规划</strong>：DP[0]一般初始化为0，</p></li><li><p><strong>其他位置：求最小值时初始化为MAX，求最大值初始化为MIN等</strong>…</p></li><li><p><strong>求有多少种方法型动态规划</strong>：DP[0]一般初始化为1</p></li></ul></li><li><p>初始化初始值：最一开始的地方有一种走法，dp[0] [0]定义为1</p></li></ol><p><strong>2.状态转移</strong>：当行走过程中有障碍物的情况下，定义边界情况为第一行或者第一列为1是不成立的，因为障碍物的行走方式永远是0，所以这题我们还可以采用一种更通用的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">    for(int j=0;j&lt;m;j++)&#123;</span><br><span class="line">        if(i&gt;0)&#123;</span><br><span class="line">            dp[i][j]+=dp[i-1][j];</span><br><span class="line">        &#125;</span><br><span class="line">        if(j&gt;0)&#123;</span><br><span class="line">            dp[i][j]+=dp[i][j-1];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.边界情况考虑：</strong>考虑到不可到达的时候初始化为多少，什么情况下发生状态转移（例如有三种钱币，f[j]=min{f[i-a[1]],f[i-a[2]]} 求最小值）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(j!=k &amp;&amp; dp[i<span class="number">-1</span>][k]+costs[i<span class="number">-1</span>][j]&lt;dp[i][j])&#123;</span><br><span class="line">dp[i][j]=dp[i<span class="number">-1</span>][k]+costs[i<span class="number">-1</span>][j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.返回值问题</strong>：需要注意的是最后return的是dp[n-1] [m-1]，因为这个坐标型动态规划坐标就代表实际的位置，而数组是从0开始的，所以index为数组长度-1</p><p><strong>5.空间复杂度优化</strong>：如果这一项只和前几项有关，则可以用滚动数组优化空间复杂度，滚动数组大小不仅限于2，如图：</p><p><img src="https://raw.githubusercontent.com/LeoMalik/ImgBed/master/img/c364e082ly1g059v1i6ebj209k0anq44.jpg" alt=""></p><h3 id="Coin-change"><a href="#Coin-change" class="headerlink" title="Coin change"></a>Coin change</h3><p><img src="https://raw.githubusercontent.com/LeoMalik/ImgBed/master/img/c364e082ly1g058up3cq6j20z80g9n1g.jpg" alt=""></p><p><img src="https://raw.githubusercontent.com/LeoMalik/ImgBed/master/img/c364e082gy1g05913xqwtj20mi0ctjur.jpg" alt=""></p><h3 id="Paint-House"><a href="#Paint-House" class="headerlink" title="Paint-House"></a>Paint-House</h3><p>这里有<code>n</code>个房子在一列直线上，现在我们需要给房屋染色，分别有红色蓝色和绿色。每个房屋染不同的颜色费用也不同，你需要设计一种染色方案使得<strong>相邻的房屋颜色不同</strong>，并且费用最小，返回最小的费用。</p><p>费用通过一个<code>n</code>x<code>3</code> 的矩阵给出，比如<code>cost[0][0]</code>表示房屋<code>0</code>染红色的费用，<code>cost[1][2]</code>表示房屋<code>1</code>染绿色的费用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @param costs: n x 3 cost matrix</span></span><br><span class="line"><span class="comment">     * @return: An integer, the minimum cost to paint all houses</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minCost</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;costs)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write your code here</span></span><br><span class="line">        <span class="keyword">int</span> n = costs.size();</span><br><span class="line">        <span class="keyword">int</span> dp[n+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=dp[<span class="number">0</span>][<span class="number">1</span>]=dp[<span class="number">0</span>][<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line">                dp[i][j]=<span class="number">9999999</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">3</span>;k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(j!=k &amp;&amp; dp[i<span class="number">-1</span>][k]+costs[i<span class="number">-1</span>][j]&lt;dp[i][j])&#123;</span><br><span class="line">                        dp[i][j]=dp[i<span class="number">-1</span>][k]+costs[i<span class="number">-1</span>][j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> res=dp[n][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(dp[n][<span class="number">1</span>]&lt;res)</span><br><span class="line">            res = dp[n][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(dp[n][<span class="number">2</span>]&lt;res)</span><br><span class="line">            res = dp[n][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;动态规划的四个组成部分：&lt;/p&gt;
&lt;p&gt;1.确定状态，化为子问题&lt;/p&gt;
&lt;p&gt;2.转移方程&lt;/p&gt;
&lt;p&gt;3.边界情况&lt;/p&gt;
&lt;p&gt;4.计算顺序&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://leomalik.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://leomalik.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="动态规划" scheme="http://leomalik.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Git合并多个commit</title>
    <link href="http://leomalik.github.io/Git%E5%90%88%E5%B9%B6%E5%A4%9A%E4%B8%AAcommit.html"/>
    <id>http://leomalik.github.io/Git合并多个commit.html</id>
    <published>2019-02-13T13:37:11.000Z</published>
    <updated>2019-02-13T13:40:46.039Z</updated>
    
    <content type="html"><![CDATA[<h2 id="「Git」合并多个-Commit"><a href="#「Git」合并多个-Commit" class="headerlink" title="「Git」合并多个 Commit"></a>「Git」合并多个 Commit</h2><blockquote><p>在使用 Git 作为版本控制的时候，我们可能会由于各种各样的原因提交了许多临时的 commit，而这些 commit 拼接起来才是完整的任务。那么我们为了避免太多的 commit 而造成版本控制的混乱，通常我们推荐将这些 commit 合并成一个。</p></blockquote><a id="more"></a><p>首先假设我们有3个 commit</p><p><img src="https:////upload-images.jianshu.io/upload_images/228805-ffd461efeb8a26a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p><p>git-log-origin.png</p><p>我们需要将 <code>2dfbc7e8</code> 和 <code>c4e858b5</code> 合并成一个 commit，那么我们输入如下命令</p><p><img src="https:////upload-images.jianshu.io/upload_images/228805-e96334b872909dc4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p><p>git-rebase-i.png</p><p>其中，<code>-i</code> 的参数是不需要合并的 commit 的 hash 值，这里指的是第一条 commit， 接着我们就进入到 <code>vi</code> 的编辑模式</p><p><img src="https:////upload-images.jianshu.io/upload_images/228805-fce11005e6ee8e2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p><p>git-rebase-edit.png</p><p>可以看到其中分为两个部分，上方未注释的部分是填写要执行的指令，而下方注释的部分则是指令的提示说明。指令部分中由前方的命令名称、commit  hash 和 commit message 组成。</p><p>当前我们只要知道 <code>pick</code> 和 <code>squash</code> 这两个命令即可。</p><ul><li><code>pick</code> 的意思是要会执行这个 commit</li><li><code>squash</code> 的意思是这个 commit 会被合并到前一个commit</li></ul><p>我们将 <code>c4e858b5</code> 这个 commit 前方的命令改成 <code>squash</code> 或 <code>s</code>，然后输入<code>:wq</code>以保存并退出</p><p><img src="https:////upload-images.jianshu.io/upload_images/228805-8c742e137feb7ce5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p><p>git-rebase-squash.png</p><p>这是我们会看到 commit message 的编辑界面</p><p><img src="https:////upload-images.jianshu.io/upload_images/228805-e0ca7e9d694e3f52.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p><p>git-rebase-commit-message.png</p><p>其中, 非注释部分就是两次的 commit message, 你要做的就是将这两个修改成新的 commit message。</p><p><img src="https:////upload-images.jianshu.io/upload_images/228805-7bb2a59daa90975c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p><p>git-rebase-commit-message-combination.png</p><p>输入<code>wq</code>保存并推出, 再次输入<code>git log</code>查看 commit 历史信息，你会发现这两个 commit 已经合并了。</p><p><img src="https:////upload-images.jianshu.io/upload_images/228805-aa15aa1014eadbcf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p><p>git-rebase-log-new.png</p><p><strong>注意事项</strong>：如果这个过程中有操作错误，可以使用 <code>git rebase --abort</code>来撤销修改，回到没有开始操作合并之前的状态。</p><p>转自简书：<a href="https://www.jianshu.com/p/964de879904a" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/964de879904a</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;「Git」合并多个-Commit&quot;&gt;&lt;a href=&quot;#「Git」合并多个-Commit&quot; class=&quot;headerlink&quot; title=&quot;「Git」合并多个 Commit&quot;&gt;&lt;/a&gt;「Git」合并多个 Commit&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在使用 Git 作为版本控制的时候，我们可能会由于各种各样的原因提交了许多临时的 commit，而这些 commit 拼接起来才是完整的任务。那么我们为了避免太多的 commit 而造成版本控制的混乱，通常我们推荐将这些 commit 合并成一个。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Git" scheme="http://leomalik.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="http://leomalik.github.io/tags/Git/"/>
    
      <category term="版本控制" scheme="http://leomalik.github.io/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Git如何回滚错误的提交</title>
    <link href="http://leomalik.github.io/Git%E5%A6%82%E4%BD%95%E5%9B%9E%E6%BB%9A%E9%94%99%E8%AF%AF%E7%9A%84%E6%8F%90%E4%BA%A4.html"/>
    <id>http://leomalik.github.io/Git如何回滚错误的提交.html</id>
    <published>2019-02-13T12:42:30.000Z</published>
    <updated>2019-02-13T12:57:48.383Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git如何回滚一次错误的合并"><a href="#Git如何回滚一次错误的合并" class="headerlink" title="Git如何回滚一次错误的合并"></a>Git如何回滚一次错误的合并</h1><p>转自<a href="https://juejin.im/post/5b5ab8136fb9a04f834659ba#heading-4" rel="external nofollow noopener noreferrer" target="_blank">掘金：Git如何回滚一次错误的合并</a></p><blockquote><p>原文发表在知乎专栏 <a href="https://link.juejin.im/?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F40220954" rel="external nofollow noopener noreferrer" target="_blank">前端杂货铺</a>, 欢迎关注我的专栏，转载请注明出处</p></blockquote><p>今天不说前端，来聊聊git吧。 发现现在的小孩，玩框架一套一套的，等到玩点实质的工程化的东西就不行了。 git 这么好的工具，培训班怎么可以忽视他的重要性呢？</p><a id="more"></a><h2 id="再来聊聊git的工作流程"><a href="#再来聊聊git的工作流程" class="headerlink" title="再来聊聊git的工作流程"></a>再来聊聊git的工作流程</h2><p>很多人对<a href="https://link.juejin.im/?target=https%3A%2F%2Fgit-scm.com%2Fbook%2Fzh%2Fv2%2F%25E8%25B5%25B7%25E6%25AD%25A5-Git-%25E5%259F%25BA%25E7%25A1%2580" rel="external nofollow noopener noreferrer" target="_blank">Git究竟是一个怎样的系统</a>，还是一知半解。 在这里强烈建议大家先理解git的核心思想和工作原理，有过<code>subversion</code>或者<code>perforce</code>使用经验的人更是需要摒弃之前所见所学，重新接受这样一个新思想。 我们不再这里赘述其几本原理，我们来介绍一下其简单工作流程。 Git以一个自有的思维框架管理着三个不同的盒子<code>Commit History</code>、<code>INDEX</code>、<code>Working Directory</code>。</p><ul><li><code>Commit History</code> 历史记录，存储着所有提交的版本快照，并由当前分支引用的指针HEAD指向该分支最新一条提交。</li><li><code>INDEX</code> 索引，也叫暂存区域。它是一个文件，保存着即将提交的文件列表快照。</li><li><code>Working Directory</code> 工作目录，是从git仓库压缩数据当前版本中解包出来的文件列表。所以你在本地磁盘看到的你项目源码的文件列表，其实就是git开放给你的一个沙盒。在你将文件的修改天道到暂存区域并将快照记录到历史之前，你可以随意更改。</li></ul><p>理解了这三者的含义后，我们试着来理解一下git的工作流程。 一切的开始，混沌之间，我们要干一件大事，在terminal里面敲打了几下键盘</p><figure class="highlight plain"><figcaption><span>wiki</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init </span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>混沌初开，幻化三界：<code>HEAD</code>、<code>INDEX</code>、<code>Working Directory</code>。这就是世界最开始的样子git仓库仿佛就是掌管三界之神。而<code>Working Directory</code>就是他分配给你生产和工作的地方，你可以在这里肆意的创造。而为了安全和管理的有序我们需要把我们的添加与修改的文件交给git仓库。Git首先会将修改的文件标记起来放入暂存区、然后git找到暂存区域的文件内容将其永久性的存储为快照到git仓库，此时<code>HEAD</code>的指针指向这个最新的快照。</p><p><img src="https://user-gold-cdn.xitu.io/2018/7/27/164da5f0836dcb23?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>如图，总结下三个步骤</p><ol><li>在工作目录中修改文件。</li><li>暂存文件，将文件的快照放入暂存区域。<code>git add</code></li><li>提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录 <code>git commit</code></li></ol><p>git 的基本工作流程就是在不断的重复这三个步骤,最终git仓库目录形成了一个快照堆栈，每产生一次新的版本，HEAD就会指向这个版本。</p><p>这里我们创建了下面这些文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">├── README.md</span><br><span class="line">├── v1.js</span><br><span class="line">├── v2.js</span><br><span class="line">└── v3.js</span><br><span class="line"></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>形成了下图的提交历史</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">3aa5dfb v3  (&lt;- HEAD)</span><br><span class="line">        |</span><br><span class="line">5aab391 v2</span><br><span class="line">        |</span><br><span class="line">ff7b88e v1</span><br><span class="line">        |</span><br><span class="line">95d7816 init commit</span><br><span class="line"></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>下面我们来看看怎么利用checkout、reset、revert 来操作这个仓库目录</p><h2 id="checkout-、reset-还是-revert-？"><a href="#checkout-、reset-还是-revert-？" class="headerlink" title="checkout 、reset 还是 revert ？"></a>checkout 、reset 还是 revert ？</h2><h3 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a>checkout</h3><p>版本控制系统背后的思想就是「安全」地储存项目的拷贝，这样你永远不用担心什么时候不可复原地破坏了你的代码库。当你建立了项目历史之后，git checkout 是一种便捷的方式，来将保存的快照「解包」到你的工作目录上去。 <code>git checkout</code> 可以检出提交、也可以检出单个文件甚至还可以检出分支(此处省略)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout 5aab391</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>检出v2,当前工作目录和<code>5aab391</code>完全一致，你可以查看这个版本的文件编辑、运行、测试都不会被保存到git仓库里面。你可以<code>git checkout master</code> 或者 <code>git checkout -</code>回到原来的工作状态上来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout 5aab391 v1.js</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>以检出v2版本对于v1.js的改动，只针对v1.js这个文件检出到<code>5aab391</code>版本。所以 它会影响你当前的工作状态，它会把当前状态的v1.js文件内容覆盖为<code>5aab391</code>版本。所以除非你清楚你在做什么，最好不要轻易的做这个操作。但这个操作对于舍弃我当前的所有改动很有用：比如当前我在v1.js上面做了一些改动，但我又不想要这些改动了，而我又不想一个个去还原，那么我可以<code>git checkout HEAD v1.js</code> 或者 <code>git checkout -- v1.js</code></p><h3 id="reset-重置"><a href="#reset-重置" class="headerlink" title="reset 重置"></a>reset 重置</h3><p>和 <code>git checkout</code> 一样, <code>git reset</code> 有很多用法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset &lt;file&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>从暂存区移除特定文件，但不改变工作目录。它会取消这个文件的缓存，而不覆盖任何更改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>重置暂存区，匹配最近的一次提交，但工作目录不变。它会取消所有文件的暂存，而不会覆盖任何修改，给你了一个重设暂存快照的机会。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>加上<code>--hard</code>标记后会告诉git要重置缓存区和工作目录的更改，就是说：先将你的暂存区清除掉，然后将你所有未暂存的更改都清除掉，所以在使用前确定你想扔掉所有的本地工作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset &lt;commit&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>将当前分支的指针HEAD移到 ，将缓存区重设到这个提交，但不改变工作目录。所有 之后的更改会保留在工作目录中，这允许你用更干净、原子性的快照重新提交项目历史。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard &lt;commit&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>将当前分支的指针HEAD移到 ，将缓存区和工作目录都重设到这个提交。它不仅清除了未提交的更改，同时还清除了 之后的所有提交。</p><p>可以看出，<code>git reset</code> 通过取消缓存或者取消一系列提交的操作会摒弃一些你当前工作目录上的更改，这样的操作带有一定的危险性。下面我们开始介绍一种相对稳妥的方式 <code>revert</code></p><h3 id="revert-撤销"><a href="#revert-撤销" class="headerlink" title="revert 撤销"></a>revert 撤销</h3><p><code>git revert</code>被用来撤销一个已经提交的快照。但实现上和reset是完全不同的。通过搞清楚如何撤销这个提交引入的更改，然后在最后加上一个撤销了更改的 新 提交，而不是从项目历史中移除这个提交。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git revert &lt;commit&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>生成一个撤消了 引入的修改的新提交，然后应用到当前分支。</p><p><img src="https://user-gold-cdn.xitu.io/2018/7/27/164da5f083cd9c5b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">81f734d commit after bug</span><br><span class="line">        |</span><br><span class="line">3a395af bug</span><br><span class="line">        |</span><br><span class="line">3aa5dfb v3  (&lt;- HEAD)</span><br><span class="line">        |</span><br><span class="line">5aab391 v2</span><br><span class="line">        |</span><br><span class="line">ff7b88e v1</span><br><span class="line">        |</span><br><span class="line">95d7816 init commit</span><br><span class="line"></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>我们在<code>3a395af</code> 引入了一个bug，我们明确是由于<code>3a395af</code>造成的bug的时候，以其我们通过新的提交来fix这个bug，不如<code>git revert</code>, 让他来帮你剔除这个bug。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git revert 3a395af</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>得到结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cfb71fc Revert &quot;bug&quot;</span><br><span class="line">        |</span><br><span class="line">81f734d commit after bug</span><br><span class="line">        |</span><br><span class="line">3a395af bug</span><br><span class="line">        |</span><br><span class="line">3aa5dfb v3  (&lt;- HEAD)</span><br><span class="line">        |</span><br><span class="line">5aab391 v2</span><br><span class="line">        |</span><br><span class="line">ff7b88e v1</span><br><span class="line">        |</span><br><span class="line">95d7816 init commit</span><br><span class="line"></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>这个时候bug的改动被撤销了，产生了一个新的commit，但是<code>commit after bug</code>没有被清初。</p><p>所以相较于<code>reset</code> ，<code>revert</code>不会改变项目历史，对那些已经发布到共享仓库的提交来说这是一个安全的操作。其次<code>git revert</code>可以将提交历史中的任何一个提交撤销、而<code>reset</code>会把历史上某个提交及之后所有的提交都移除掉，这太野蛮了。</p><p>另外<code>revert</code>的设计，还有一个考量，那就是撤销一个公共仓库的提交。至于为什么不能用<code>reset</code>，你们可以自己思考一下。 下面我们就用一个麻烦事（回滚一个错误的合并），来讲解这个操作。</p><h2 id="合并操作"><a href="#合并操作" class="headerlink" title="合并操作"></a>合并操作</h2><p>相对于常规的<code>commit</code>，当使用<code>git merge &lt;branch&gt;</code>合并两个分支的时候，你会得到一个新的<code>merge commit</code>. 当我们<code>git show &lt;commit&gt;</code>的时候会出现类似信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">commit 6dd0e2b9398ca8cd12bfd1faa1531d86dc41021a</span><br><span class="line">Merge: d24d3b4 11a7112</span><br><span class="line">Author: 前端杂货铺 </span><br><span class="line">...............</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><code>Merge: d24d3b4 11a7112</code> 这行表明了两个分支在合并时，所处的parent的版本线索。</p><p>比如在上述项目中我们开出了一个dev分支并做了一些操作，现在分支的样子变成了这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">init -&gt; v1 -&gt; v2 -&gt; v3  (master)</span><br><span class="line">           \      </span><br><span class="line">            d1 -&gt; d2  (dev)</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>当我们在dev开发的差不多了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#git:(dev)</span><br><span class="line">git checkout master </span><br><span class="line">#git:(master)</span><br><span class="line">git merge dev</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>这个时候形成了一个Merge Commit <code>faulty merge</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">init -&gt; v1 -&gt; v2 -&gt; v3 -- faulty merge  (master)</span><br><span class="line">           \            /</span><br><span class="line">            d1  --&gt;  d2  (dev)</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>此时<code>faulty merge</code>有两个parent 分别是v3 和 d2。</p><h2 id="回滚错误的合并"><a href="#回滚错误的合并" class="headerlink" title="回滚错误的合并"></a>回滚错误的合并</h2><p>这个merge之后还继续在dev开发，另一波人也在从别的分支往master合并代码。变成这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">init -&gt; v1 -&gt; v2 -&gt; v3 -- faulty merge -&gt; v4 -&gt; vc3 (master)</span><br><span class="line">        \  \            /                     /</span><br><span class="line">         \  d1  --&gt;  d2  --&gt; d3 --&gt; d4  (dev)/</span><br><span class="line">          \                                 / </span><br><span class="line">           c1  --&gt;  c2 -------------------c3 (other)</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>这个时候你发现， 妈也上次那个merge 好像给共享分支master引入了一个bug。这个bug导致团队其他同学跑不通测试，或者这是一个线上的bug，如果不及时修复老板要骂街了。</p><p>这个时候第一想到的肯定是回滚代码，但怎么回滚呢。用<code>reset</code>?不现实，因为太流氓不说，还会把别人的代码也干掉，所以只能用<code>revert</code>。而<code>revert</code>它最初被设计出来就是干这个活的。</p><p>怎么操作呢？首先想到的是上面所说的 <code>git revert &lt;commit&gt;</code> ,但是貌似不太行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git revert faulty merge</span><br><span class="line">error: Commit faulty merge is a merge but no -m option was given.</span><br><span class="line">fatal: revert failed</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>这是因为试图撤销两个分支的合并的时候Git不知道要保留哪一个分支上的修改。所以我们需要告诉git我们保留那个分支<code>m</code> 或者<code>mainline</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git revert -m 1 faulty merge</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><code>-m</code>后面带的参数值 可以是1或者2，对应着parent的顺序.上面列子：1代表<code>v3</code>，2代表<code>d2</code> 所以该操作会保留master分支的修改，而撤销dev分支合并过来的修改。</p><p>提交历史变为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">init -&gt; v1 -&gt; v2 -&gt; v3 -- faulty merge -&gt; v4 -&gt; vc3 -&gt; rev3 (master)</span><br><span class="line">          \            /                     </span><br><span class="line">           d1  --&gt;  d2  --&gt; d3 --&gt; d4  (dev)</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>此处<code>rev3</code>是一个常规commit，其内容包含了之前在<code>faulty merge</code>撤销掉的dev合并过来的commit的【反操作】的合集。</p><p>到这个时候还没完，我们要记住，因为我们抛弃过之前dev合并过来的commit，下次dev再往master合并，之前抛弃过的其实是不包含在里面的。那怎么办呢？</p><h2 id="恢复之前的回滚"><a href="#恢复之前的回滚" class="headerlink" title="恢复之前的回滚"></a>恢复之前的回滚</h2><p>很简单我们把之前master那个带有【反操作】的commit给撤销掉不就好了？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git revert rev3</span><br><span class="line">git merge dev</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>此时提交历史变成了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">init -&gt; v1 -&gt; v2 -&gt; v3 -- faulty merge -&gt; v4 -&gt; vc3 -&gt; rev3 -&gt; rev3` -&gt; final merge (master)</span><br><span class="line">          \            /                                               /</span><br><span class="line">           d1  --&gt;  d2  --&gt; d3 --&gt; d4  --------------------------------(dev)</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是我想要讲的关于git回滚代码的一些操作，有不对的地方还望指正。另Git 是一门艺术，是一种非常精妙的设计，当你使用上手后，你会发现越来越多好玩的东西，并为设计git的人默默点个赞。也希望在前端领域不论是初学还是深凿者，在追逐流行框架的时候，都不要忘了学习这些基础的工具。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>《pro git》</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fgit-scm.com%2Fbook%2Fzh%2Fv2%2FGit-%25E5%25B7%25A5%25E5%2585%25B7-%25E9%2587%258D%25E7%25BD%25AE%25E6%258F%25AD%25E5%25AF%2586" rel="external nofollow noopener noreferrer" target="_blank">重置揭秘</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fgeeeeeeeeek%2Fgit-recipes" rel="external nofollow noopener noreferrer" target="_blank">git-recipes</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Git如何回滚一次错误的合并&quot;&gt;&lt;a href=&quot;#Git如何回滚一次错误的合并&quot; class=&quot;headerlink&quot; title=&quot;Git如何回滚一次错误的合并&quot;&gt;&lt;/a&gt;Git如何回滚一次错误的合并&lt;/h1&gt;&lt;p&gt;转自&lt;a href=&quot;https://juejin.im/post/5b5ab8136fb9a04f834659ba#heading-4&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;掘金：Git如何回滚一次错误的合并&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;原文发表在知乎专栏 &lt;a href=&quot;https://link.juejin.im/?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F40220954&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;前端杂货铺&lt;/a&gt;, 欢迎关注我的专栏，转载请注明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天不说前端，来聊聊git吧。 发现现在的小孩，玩框架一套一套的，等到玩点实质的工程化的东西就不行了。 git 这么好的工具，培训班怎么可以忽视他的重要性呢？&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://leomalik.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="http://leomalik.github.io/tags/Git/"/>
    
      <category term="版本控制" scheme="http://leomalik.github.io/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>01背包、完全背包、多重背包</title>
    <link href="http://leomalik.github.io/01%E8%83%8C%E5%8C%85%E3%80%81%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85%E3%80%81%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85.html"/>
    <id>http://leomalik.github.io/01背包、完全背包、多重背包.html</id>
    <published>2019-02-09T14:26:14.000Z</published>
    <updated>2019-08-04T15:17:35.272Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>今天花了一下午加一晚上的时间，在HDUOJ才ac了一道简单的多重背包题目2069，其实也是一道动态规划题目，看来要加紧动态规划的练习了，之前没做过多重背包的题目，导致我做题时复杂化了，虽然是假期但是也不能这么浪费时间，果断总结一下，这里参考了dd_engi大牛的<a href="https://www.kancloud.cn/kancloud/pack/70124" rel="external nofollow noopener noreferrer" target="_blank">背包九讲</a>，非常棒。以下是个人对其前四讲内容的梳理和Java实现，用于快速回顾知识点。</p><a id="more"></a><h2 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h2><p>问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">N件物品，一个容量M的背包。A[]是物品体积，V[]是物品价值，求背包能装物品的最大价值。</span><br></pre></td></tr></table></figure><p>思路：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j]表前i件物品在容量最大为j的限制下能得到的最大价值。</span><br></pre></td></tr></table></figure><p><img src="https://segmentfault.com/img/bV8fRH?w=531&amp;h=207" alt="图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pack01Solution1</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> A[],<span class="keyword">int</span> V[] )</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[A.length+<span class="number">1</span>][m+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;A.length;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(A[i]&gt;j)dp[i+<span class="number">1</span>][j] = dp[i][j];</span><br><span class="line">            <span class="keyword">else</span> dp[i+<span class="number">1</span>][j] = Math.max(dp[i][j],dp[i][j-A[i]]+V[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[A.length][m];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度O(NM),空间复杂度O(NM)。</p><p>空间优化为O(M)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public int pack01Solution2(int m,int A[],int V[] )&#123;</span><br><span class="line">    int[]dp = new int[m+1];</span><br><span class="line">    for(int i=0;i&lt;A.length;i++)&#123;</span><br><span class="line">        for(int j=m;j&gt;=A[i];j--)&#123;</span><br><span class="line">            dp[j] = Math.max(dp[j],dp[j-A[i]]+V[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return dp[m];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以把01背包中对一件物品的处理抽取为方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public void ZeroOnePack(int cost,int value,int[] dp,int m)&#123;</span><br><span class="line">    for(int j=m;j&gt;=cost;j--)</span><br><span class="line">        dp[j] = Math.max(dp[j],dp[j-cost]+value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>初始化的细节问题</strong>:</p><blockquote><p><img src="https://segmentfault.com/img/bV8fY8?w=931&amp;h=333" alt="clipboard.png"></p></blockquote><h2 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h2><p>问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">N种物品，背包容量为M，每种无限件，给出物品体积和价值A[]、V[]，求最大价值。</span><br></pre></td></tr></table></figure><p>思路：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] = max&#123;dp[i-1][j-k*A[i]]+k*V[i]|0&lt;=k*A[i]&lt;=M&#125;</span><br><span class="line"></span><br><span class="line">时间复杂度:有O(NM)个状态，每个状态求解时间O(M/A[i]),总时间O(Σ(M/A[i])*M).</span><br></pre></td></tr></table></figure><p>转化为01背包问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-第i种物品转化为M/A[i]件体积和价值不变的物品,复杂度不变</span><br><span class="line">-第i种物品表示成2^k件物品的总和，A[i]*(2^k)&lt;=M,每种物品可拆成O(logM/A[i])件物品</span><br><span class="line">-一维数组实现的**O(NM)**算法:dp[i][j] = max&#123;dp[i-1][j],dp[i][j-A[i]]+V[j]&#125;</span><br><span class="line">    public int packComSolution(int m,int[] A,int[] V)&#123;</span><br><span class="line">        int[] dp = new int[m+1];</span><br><span class="line">        for(int i=0;i&lt;A.length;i++)&#123;</span><br><span class="line">            for(int j=A[i];j&lt;=m;j++)</span><br><span class="line">                dp[j] = Math.max(dp[j],dp[j-A[i]]+V[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        return dp[m];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其中处理一种完全背包的物品可以抽取方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public  void CompletePack(int cost,int value,int[] dp,int m)&#123;</span><br><span class="line">    for(int j=cost;j&lt;=m;j--)</span><br><span class="line">        dp[j] = Math.max(dp[j],dp[j-cost]+value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h2><p>问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在01背包基础上，增加条件每件物品的可取件数n[];</span><br></pre></td></tr></table></figure><p>思路：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">转化成01背包，每种物品的n[i]都可以用2^0,2^1,..2^(k-1),n-(2^k-1)中若干数的和表示，k是满足n[i]-2^k+1&gt;0的最大整数。</span><br><span class="line">第i种物品分成了O(log n[i])种物品，复杂度从O(M*Σn[i])变为O(M* Σlog n[i])</span><br></pre></td></tr></table></figure><p>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> a = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> b = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[a + <span class="number">1</span>][b + <span class="number">1</span>];</span><br><span class="line">            <span class="comment">//价格</span></span><br><span class="line">            <span class="keyword">int</span>[] P = <span class="keyword">new</span> <span class="keyword">int</span>[a];</span><br><span class="line">            <span class="comment">//价值</span></span><br><span class="line">            <span class="keyword">int</span>[] V = <span class="keyword">new</span> <span class="keyword">int</span>[a];</span><br><span class="line">            <span class="comment">//数量</span></span><br><span class="line">            <span class="keyword">int</span>[] M = <span class="keyword">new</span> <span class="keyword">int</span>[a];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a; i++) &#123;</span><br><span class="line">                P[i] = sc.nextInt();</span><br><span class="line">                V[i] = sc.nextInt();</span><br><span class="line">                M[i] = sc.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= b; j++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= M[i] &amp;&amp; k * P[i] &lt;= j; k++) &#123;</span><br><span class="line">                        dp[i + <span class="number">1</span>][j] = Math.max(dp[i + <span class="number">1</span>][j], dp[i][j - k * P[i]] + k * V[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(dp[a][b]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;今天花了一下午加一晚上的时间，在HDUOJ才ac了一道简单的多重背包题目2069，其实也是一道动态规划题目，看来要加紧动态规划的练习了，之前没做过多重背包的题目，导致我做题时复杂化了，虽然是假期但是也不能这么浪费时间，果断总结一下，这里参考了dd_engi大牛的&lt;a href=&quot;https://www.kancloud.cn/kancloud/pack/70124&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;背包九讲&lt;/a&gt;，非常棒。以下是个人对其前四讲内容的梳理和Java实现，用于快速回顾知识点。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://leomalik.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://leomalik.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Coursera Algorithms week1 3Sum in quadratic time</title>
    <link href="http://leomalik.github.io/Coursera%20Algorithms%20week1%203Sum%20in%20quadratic%20time.html"/>
    <id>http://leomalik.github.io/Coursera Algorithms week1 3Sum in quadratic time.html</id>
    <published>2019-02-08T14:16:11.000Z</published>
    <updated>2019-02-08T14:21:54.073Z</updated>
    
    <content type="html"><![CDATA[<p>本题为《算法4》作者 Robert Sedgewick 和 Kevin Wayne 在 Cursera 上开设的公开课的习题解答，本题出自以下地址中的课后题。<br>题目链接：<a href="https://www.coursera.org/learn/algorithms-part1/quiz/lhs1X/interview-questions-analysis-of-algorithms-ungraded" rel="external nofollow noopener noreferrer" target="_blank">coursera</a></p><p>题目要求：</p><p>Design an algorithm for the 3-SUM problem that takes time proportional to n2 in the worst case. You may assume that you can sort the n integers in time proportional to n2 or better.</p><a id="more"></a><p><strong>分析：</strong></p><p>《算法4》这本书提供的TwoSumFast解法为NlogN，ThreeSumFast解法为N2logN，根据课后练习，要实现3Sum复杂度为N2，建议先把2Sum复杂度实现为N。同时教材提示用排好序的数组可以实现复杂度N。我想了很久，没有发现排好序的数组对复杂度降至N有太大帮助，于是在网上搜索了下大家的做法。网上的大部分都是建议用set或map来做，我决定采用map试试，果然用map很方便。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"> <span class="number">2</span> <span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"> <span class="number">3</span> </span><br><span class="line"> <span class="number">4</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoSumLinear</span> </span>&#123;</span><br><span class="line"> <span class="number">5</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</span><br><span class="line"> <span class="number">6</span>         <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"> <span class="number">7</span>         <span class="keyword">int</span> n = a.length;</span><br><span class="line"> <span class="number">8</span>         HashMap&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer,Integer&gt;();</span><br><span class="line"> <span class="number">9</span>         <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i&lt;n;i++)&#123;</span><br><span class="line"><span class="number">10</span>             <span class="keyword">if</span>(map.get(a[i]) == <span class="keyword">null</span>) map.put(a[i], i);</span><br><span class="line"><span class="number">11</span>             Integer negIndex = map.get(-a[i]);</span><br><span class="line"><span class="number">12</span>             <span class="keyword">if</span>(negIndex != <span class="keyword">null</span> &amp;&amp; negIndex != i)&#123;</span><br><span class="line"><span class="number">13</span>                 System.out.println(<span class="string">"a["</span>+negIndex+<span class="string">"]="</span>+(-a[i])+<span class="string">"和a["</span>+i+<span class="string">"]="</span>+a[i]);</span><br><span class="line"><span class="number">14</span>                 cnt++;</span><br><span class="line"><span class="number">15</span>             &#125;</span><br><span class="line"><span class="number">16</span>         &#125;</span><br><span class="line"><span class="number">17</span>         <span class="keyword">return</span> cnt;</span><br><span class="line"><span class="number">18</span>     &#125;</span><br><span class="line"><span class="number">19</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="number">20</span>         <span class="keyword">int</span>[] a = &#123; <span class="number">30</span>, -<span class="number">40</span>, -<span class="number">20</span>, -<span class="number">10</span>, <span class="number">40</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">5</span> &#125;;</span><br><span class="line"><span class="number">21</span>         System.out.println(Arrays.toString(a));</span><br><span class="line"><span class="number">22</span>         System.out.println(count(a));</span><br><span class="line"><span class="number">23</span>     &#125;</span><br><span class="line"><span class="number">24</span> &#125;</span><br></pre></td></tr></table></figure><p>3Sum的作业提示可以先将数组排序，基于这个思路，结合写过的2Sum线性实现方法，写出了复杂度为N2的3Sum，个人认为实现的方式已经很精简了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"> <span class="number">2</span> <span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"> <span class="number">3</span> </span><br><span class="line"> <span class="number">4</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreeSumQuadratic</span> </span>&#123;</span><br><span class="line"> <span class="number">5</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line"> <span class="number">6</span>         Arrays.sort(a);<span class="comment">// 数组从小到大排序，后面要使用有序数组的性质简化运算</span></span><br><span class="line"> <span class="number">7</span>         System.out.println(Arrays.toString(a));</span><br><span class="line"> <span class="number">8</span>         System.out.println(<span class="string">"target="</span>+target);</span><br><span class="line"> <span class="number">9</span>         <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="number">10</span>         <span class="keyword">int</span> n = a.length;</span><br><span class="line"><span class="number">11</span>         HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line"><span class="number">12</span>         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="number">13</span>             map.put(a[i], i); <span class="comment">//以数组value为key，index为map值</span></span><br><span class="line"><span class="number">14</span>         &#125;</span><br><span class="line"><span class="number">15</span>         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;<span class="comment">//i不会超过n-2</span></span><br><span class="line"><span class="number">16</span>             <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;<span class="comment">//j从i+1开始统计，不会超过n-1</span></span><br><span class="line"><span class="number">17</span>                 <span class="keyword">int</span> smallValue = a[i] + a[j]; <span class="comment">//因为排好序了，所以最开始的a[i]+a[j]</span></span><br><span class="line"><span class="number">18</span>                 <span class="keyword">if</span> (smallValue &gt; target) <span class="comment">//当a[i]+a[j]&gt;target时没必要计算了，因为后续的查找就会重复</span></span><br><span class="line"><span class="number">19</span>                     <span class="keyword">break</span>;</span><br><span class="line"><span class="number">20</span>                 <span class="keyword">int</span> bigValue = target-smallValue; <span class="comment">//计算出对应的数值较大的value</span></span><br><span class="line"><span class="number">21</span>                 Integer bigIndex = map.get(bigValue); <span class="comment">//查找数值较大的value所在的位置</span></span><br><span class="line"><span class="number">22</span>                 <span class="keyword">if</span> (bigIndex != <span class="keyword">null</span> &amp;&amp; bigIndex &gt; i &amp;&amp; bigIndex &gt; j) &#123;</span><br><span class="line"><span class="number">23</span>                     System.out.println(</span><br><span class="line"><span class="number">24</span>                             <span class="string">"["</span> + i + <span class="string">"]="</span> + a[i] + <span class="string">",["</span> + j + <span class="string">"]"</span> + a[j] + <span class="string">",["</span> + bigIndex + <span class="string">"]"</span> + (bigValue));</span><br><span class="line"><span class="number">25</span>                     cnt++;</span><br><span class="line"><span class="number">26</span>                 &#125;</span><br><span class="line"><span class="number">27</span>             &#125;</span><br><span class="line"><span class="number">28</span>         &#125;</span><br><span class="line"><span class="number">29</span>         <span class="keyword">return</span> cnt;</span><br><span class="line"><span class="number">30</span>     &#125;</span><br><span class="line"><span class="number">31</span> </span><br><span class="line"><span class="number">32</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="number">33</span>         <span class="keyword">int</span>[] a = &#123; <span class="number">30</span>, -<span class="number">40</span>, -<span class="number">20</span>, -<span class="number">10</span>, <span class="number">40</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">5</span> &#125;;        </span><br><span class="line"><span class="number">34</span>         System.out.println(count(a,<span class="number">0</span>));</span><br><span class="line"><span class="number">35</span>     &#125;</span><br><span class="line"><span class="number">36</span> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本题为《算法4》作者 Robert Sedgewick 和 Kevin Wayne 在 Cursera 上开设的公开课的习题解答，本题出自以下地址中的课后题。&lt;br&gt;题目链接：&lt;a href=&quot;https://www.coursera.org/learn/algorithms-part1/quiz/lhs1X/interview-questions-analysis-of-algorithms-ungraded&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;coursera&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;题目要求：&lt;/p&gt;
&lt;p&gt;Design an algorithm for the 3-SUM problem that takes time proportional to n2 in the worst case. You may assume that you can sort the n integers in time proportional to n2 or better.&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://leomalik.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://leomalik.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>二分图最大匹配与匈牙利算法</title>
    <link href="http://leomalik.github.io/%E4%BA%8C%E5%88%86%E5%9B%BE%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D-%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95.html"/>
    <id>http://leomalik.github.io/二分图最大匹配-匈牙利算法.html</id>
    <published>2019-02-08T12:54:57.000Z</published>
    <updated>2019-02-08T14:11:57.262Z</updated>
    
    <content type="html"><![CDATA[<p>推荐阅读：<a href="https://www.renfei.org/blog/bipartite-matching.html" rel="external nofollow noopener noreferrer" target="_blank">二分图的最大匹配、完美匹配和匈牙利算法</a></p><h3 id="匈牙利算法"><a href="#匈牙利算法" class="headerlink" title="匈牙利算法"></a>匈牙利算法</h3><p>匈牙利算法是由匈牙利数学家Edmonds于1965年提出，因而得名。匈牙利算法是基于Hall定理中充分性证明的思想，它是部图匹配最常见的算法，该算法的核心就是寻找增广路径，它是一种用增广路径求二分图<strong>最大匹配</strong>的算法。</p><a id="more"></a><p>——-等等，看得头大？那么请看下面的版本：</p><p>通过数代人的努力，你终于赶上了剩男剩女的大潮，假设你是一位光荣的新世纪媒人，在你的手上有N个剩男，M个剩女，每个人都可能对多名异性有好感（-_-||暂时不考虑特殊的性取向），如果一对男女互有好感，那么你就可以把这一对撮合在一起，现在让我们无视掉所有的单相思（好忧伤的感觉），你拥有的大概就是下面这样一张关系图，每一条连线都表示互有好感。</p><p><img src="https://img-blog.csdn.net/20130503155150538" alt=""></p><p>本着救人一命，胜造七级浮屠的原则，你想要尽可能地撮合更多的情侣，匈牙利算法的工作模式会教你这样做：</p><p>===============================================================================</p><p>一： 先试着给1号男生找妹子，发现第一个和他相连的1号女生还名花无主，got it，连上一条蓝线</p><p><img src="https://img-blog.csdn.net/20130503155256629" alt=""></p><p>===============================================================================</p><p>二：接着给2号男生找妹子，发现第一个和他相连的2号女生名花无主，got it</p><p><img src="https://img-blog.csdn.net/20130503155344972" alt=""></p><p>===============================================================================</p><p>三：接下来是3号男生，很遗憾1号女生已经有主了，怎么办呢？</p><p>我们试着给之前1号女生匹配的男生（也就是1号男生）另外分配一个妹子。</p><p>(黄色表示这条边被临时拆掉)</p><p><img src="https://img-blog.csdn.net/20130503155428908" alt=""></p><p>与1号男生相连的第二个女生是2号女生，但是2号女生也有主了，怎么办呢？我们再试着给2号女生的原配()重新找个妹子(注意这个步骤和上面是一样的，这是一个递归的过程)</p><p><img src="https://img-blog.csdn.net/20130503155441032" alt=""></p><p>此时发现2号男生还能找到3号女生，那么之前的问题迎刃而解了，回溯回去</p><p>2号男生可以找3号妹子~              1号男生可以找2号妹子了~        3号男生可以找1号妹子</p><p><img src="https://img-blog.csdn.net/20130503155453501" alt=""><img src="https://img-blog.csdn.net/20130503155626560" alt=""><img src="https://img-blog.csdn.net/20130503162147840" alt=""></p><p>所以第三步最后的结果就是：</p><p><img src="https://img-blog.csdn.net/20130503160156253" alt=""></p><p>===============================================================================</p><p>四： 接下来是4号男生，很遗憾，按照第三步的节奏我们没法给4号男生腾出来一个妹子，我们实在是无能为力了……香吉士同学走好。</p><p>===============================================================================</p><p>这就是匈牙利算法的流程，其中找妹子是个递归的过程，最最关键的字就是“腾”字<br>其原则大概是：有机会上，没机会创造机会也要上</p><p>【code】</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=m;j++)&#123;    <span class="comment">//扫描每个妹子</span></span><br><span class="line"><span class="keyword">if</span> (line[x][j]==<span class="literal">true</span> &amp;&amp; used[j]==<span class="literal">false</span>)      </span><br><span class="line"><span class="comment">//如果有暧昧并且还没有标记过(这里标记的意思是这次查找曾试图改变过该妹子的归属问题，但是没有成功，所以就不用瞎费工夫了）</span></span><br><span class="line">&#123;</span><br><span class="line">used[j]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (girl[j]==<span class="number">0</span> || find(girl[j])) &#123; </span><br><span class="line"><span class="comment">//名花无主或者能腾出个位置来，这里使用递归</span></span><br><span class="line">girl[j]=x;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在主程序我们这样做：每一步相当于我们上面描述的一二三四中的一步</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(used,<span class="number">0</span>,<span class="keyword">sizeof</span>(used));    <span class="comment">//这个在每一步中清空</span></span><br><span class="line">if find(i) all+=1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二分图的最大匹配、完美匹配和匈牙利算法"><a href="#二分图的最大匹配、完美匹配和匈牙利算法" class="headerlink" title="二分图的最大匹配、完美匹配和匈牙利算法"></a>二分图的最大匹配、完美匹配和匈牙利算法</h3><p>这篇文章讲无权二分图（unweighted bipartite graph）的最大匹配（maximum matching）和完美匹配（perfect matching），以及用于求解匹配的匈牙利算法（Hungarian Algorithm）；不讲带权二分图的最佳匹配。</p><p><strong>二分图</strong>：简单来说，如果图中点可以被分为两组，并且使得所有边都跨越组的边界，则这就是一个二分图。准确地说：把一个图的顶点划分为两个不相交集 $U$ 和$V$ ，使得每一条边都分别连接$U$、$V$中的顶点。如果存在这样的划分，则此图为一个二分图。二分图的一个等价定义是：不含有「含奇数条边的环」的图。图 1 是一个二分图。为了清晰，我们以后都把它画成图 2 的形式。</p><p><strong>匹配</strong>：在图论中，一个「匹配」（matching）是一个边的集合，其中任意两条边都没有公共顶点。例如，图 3、图 4 中红色的边就是图 2 的匹配。</p><p><img src="https://img.renfei.org/2013/08/1.png" alt="Bipartite Graph(1)">  <img src="https://img.renfei.org/2013/08/2.png" alt="Bipartite Graph(2)">  <img src="https://img.renfei.org/2013/08/3.png" alt="Matching">  <img src="https://img.renfei.org/2013/08/4.png" alt="Maximum Matching"></p><p>我们定义<strong>匹配点</strong>、<strong>匹配边</strong>、<strong>未匹配点</strong>、<strong>非匹配边</strong>，它们的含义非常显然。例如图 3 中 1、4、5、7 为匹配点，其他顶点为未匹配点；1-5、4-7为匹配边，其他边为非匹配边。</p><p><strong>最大匹配</strong>：一个图所有匹配中，所含匹配边数最多的匹配，称为这个图的最大匹配。图 4 是一个最大匹配，它包含 4 条匹配边。</p><p><strong>完美匹配</strong>：如果一个图的某个匹配中，所有的顶点都是匹配点，那么它就是一个完美匹配。图 4 是一个完美匹配。显然，完美匹配一定是最大匹配（完美匹配的任何一个点都已经匹配，添加一条新的匹配边一定会与已有的匹配边冲突）。但并非每个图都存在完美匹配。</p><p>举例来说：如下图所示，如果在某一对男孩和女孩之间存在相连的边，就意味着他们彼此喜欢。是否可能让所有男孩和女孩两两配对，使得每对儿都互相喜欢呢？图论中，这就是<strong>完美匹配</strong>问题。如果换一个说法：最多有多少互相喜欢的男孩/女孩可以配对儿？这就是<strong>最大匹配</strong>问题。</p><p><img src="https://img.renfei.org/2013/08/0.png" alt="0"></p><p>基本概念讲完了。求解最大匹配问题的一个算法是<strong>匈牙利算法</strong>，下面讲的概念都为这个算法服务。</p><p><img src="https://img.renfei.org/2013/08/5.png" alt="5"></p><p><strong>交替路</strong>：从一个未匹配点出发，依次经过非匹配边、匹配边、非匹配边…形成的路径叫交替路。</p><p><strong>增广路</strong>：从一个未匹配点出发，走交替路，如果途径另一个未匹配点（出发的点不算），则这条交替路称为增广路（agumenting path）。例如，图 5 中的一条增广路如图 6 所示（图中的匹配点均用红色标出）：</p><p><img src="https://img.renfei.org/2013/08/6.png" alt="6"></p><p>增广路有一个重要特点：非匹配边比匹配边多一条。因此，研究增广路的意义是<strong>改进匹配</strong>。只要把增广路中的匹配边和非匹配边的身份交换即可。由于中间的匹配节点不存在其他相连的匹配边，所以这样做不会破坏匹配的性质。交换后，图中的匹配边数目比原来多了 1 条。</p><p>我们可以通过不停地找增广路来增加匹配中的匹配边和匹配点。找不到增广路时，达到最大匹配（这是增广路定理）。匈牙利算法正是这么做的。在给出匈牙利算法 DFS 和 BFS 版本的代码之前，先讲一下匈牙利树。</p><p><strong>匈牙利树</strong>一般由 BFS 构造（类似于 BFS 树）。从一个未匹配点出发运行 BFS（唯一的限制是，必须走交替路），直到不能再扩展为止。例如，由图 7，可以得到如图 8 的一棵 BFS 树：</p><p><img src="https://img.renfei.org/2013/08/7.png" alt="7">   <img src="https://img.renfei.org/2013/08/8.png" alt="8">    <img src="https://img.renfei.org/2013/08/9.png" alt="9"></p><p>这棵树存在一个叶子节点为非匹配点（7 号），但是匈牙利树要求所有叶子节点均为匹配点，因此这不是一棵匈牙利树。如果原图中根本不含 7 号节点，那么从 2 号节点出发就会得到一棵匈牙利树。这种情况如图 9 所示（顺便说一句，图 8 中根节点 2 到非匹配叶子节点 7 显然是一条增广路，沿这条增广路扩充后将得到一个完美匹配）。</p><p>下面给出<strong>匈牙利算法</strong>的 DFS 和 BFS 版本的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 顶点、边的编号均从 0 开始</span></span><br><span class="line"><span class="comment">// 邻接表储存</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> from;</span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line"></span><br><span class="line">    Edge(<span class="keyword">int</span> f, <span class="keyword">int</span> t, <span class="keyword">int</span> w):from(f), to(t), weight(w) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[__maxNodes]; <span class="comment">/* G[i] 存储顶点 i 出发的边的编号 */</span></span><br><span class="line"><span class="built_in">vector</span>&lt;Edge&gt; edges;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator <span class="keyword">iterator_t</span>;</span><br><span class="line"><span class="keyword">int</span> num_nodes;</span><br><span class="line"><span class="keyword">int</span> num_left;</span><br><span class="line"><span class="keyword">int</span> num_right;</span><br><span class="line"><span class="keyword">int</span> num_edges;</span><br><span class="line"><span class="keyword">int</span> matching[__maxNodes]; <span class="comment">/* 存储求解结果 */</span></span><br><span class="line"><span class="keyword">int</span> check[__maxNodes];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">iterator_t</span> i = G[u].begin(); i != G[u].end(); ++i) &#123; <span class="comment">// 对 u 的每个邻接点</span></span><br><span class="line">        <span class="keyword">int</span> v = edges[*i].to;</span><br><span class="line">        <span class="keyword">if</span> (!check[v]) &#123;     <span class="comment">// 要求不在交替路中</span></span><br><span class="line">            check[v] = <span class="literal">true</span>; <span class="comment">// 放入交替路</span></span><br><span class="line">            <span class="keyword">if</span> (matching[v] == <span class="number">-1</span> || dfs(matching[v])) &#123;</span><br><span class="line">                <span class="comment">// 如果是未盖点，说明交替路为增广路，则交换路径，并返回成功</span></span><br><span class="line">                matching[v] = u;</span><br><span class="line">                matching[u] = v;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 不存在增广路，返回失败</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hungarian</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(matching, <span class="number">-1</span>, <span class="keyword">sizeof</span>(matching));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u=<span class="number">0</span>; u &lt; num_left; ++u) &#123;</span><br><span class="line">        <span class="keyword">if</span> (matching[u] == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">memset</span>(check, <span class="number">0</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line">            <span class="keyword">if</span> (dfs(u))</span><br><span class="line">                ++ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line"><span class="keyword">int</span> prev[__maxNodes];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Hungarian</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(matching, <span class="number">-1</span>, <span class="keyword">sizeof</span>(matching));</span><br><span class="line">    <span class="built_in">memset</span>(check, <span class="number">-1</span>, <span class="keyword">sizeof</span>(check));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num_left; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (matching[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!Q.empty()) Q.pop();</span><br><span class="line">            Q.push(i);</span><br><span class="line">            prev[i] = <span class="number">-1</span>; <span class="comment">// 设 i 为路径起点</span></span><br><span class="line">            <span class="keyword">bool</span> flag = <span class="literal">false</span>; <span class="comment">// 尚未找到增广路</span></span><br><span class="line">            <span class="keyword">while</span> (!Q.empty() &amp;&amp; !flag) &#123;</span><br><span class="line">                <span class="keyword">int</span> u = Q.front();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">iterator_t</span> ix = G[u].begin(); ix != G[u].end() &amp;&amp; !flag; ++ix) &#123;</span><br><span class="line">                    <span class="keyword">int</span> v = edges[*ix].to;</span><br><span class="line">                    <span class="keyword">if</span> (check[v] != i) &#123;</span><br><span class="line">                        check[v] = i;</span><br><span class="line">                        Q.push(matching[v]);</span><br><span class="line">                        <span class="keyword">if</span> (matching[v] &gt;= <span class="number">0</span>) &#123; <span class="comment">// 此点为匹配点</span></span><br><span class="line">                            prev[matching[v]] = u;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 找到未匹配点，交替路变为增广路</span></span><br><span class="line">                            flag = <span class="literal">true</span>;</span><br><span class="line">                            <span class="keyword">int</span> d=u, e=v;</span><br><span class="line">                            <span class="keyword">while</span> (d != <span class="number">-1</span>) &#123;</span><br><span class="line">                                <span class="keyword">int</span> t = matching[d];</span><br><span class="line">                                matching[d] = e;</span><br><span class="line">                                matching[e] = d;</span><br><span class="line">                                d = prev[d];</span><br><span class="line">                                e = t;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                Q.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (matching[i] != <span class="number">-1</span>) ++ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>匈牙利算法的要点如下</strong></p><ol><li>从左边第 1 个顶点开始，挑选未匹配点进行搜索，寻找增广路。<ol><li>如果经过一个未匹配点，说明寻找成功。更新路径信息，匹配边数 +1，停止搜索。</li><li>如果一直没有找到增广路，则不再从这个点开始搜索。事实上，此时搜索后会形成一棵匈牙利树。我们可以永久性地把它从图中删去，而不影响结果。</li></ol></li><li>由于找到增广路之后需要沿着路径更新匹配，所以我们需要一个结构来记录路径上的点。DFS 版本通过函数调用隐式地使用一个栈，而 BFS 版本使用 <code>prev</code> 数组。</li></ol><p><strong>性能比较</strong></p><p>两个版本的时间复杂度均为$O\big(V \cdot E\big)$。DFS 的优点是思路清晰、代码量少，但是性能不如 BFS。我测试了两种算法的性能。对于稀疏图，BFS 版本明显快于 DFS 版本；而对于稠密图两者则不相上下。在完全随机数据 9000 个顶点 4,0000 条边时前者领先后者大约 97.6%，9000 个顶点 100,0000 条边时前者领先后者 8.6%, 而达到 500,0000 条边时 BFS 仅领先 0.85%。</p><p>补充定义和定理：</p><p><strong>最大匹配数</strong>：最大匹配的匹配边的数目</p><p><strong>最小点覆盖数</strong>：选取最少的点，使任意一条边至少有一个端点被选择</p><p><strong>最大独立数</strong>：选取最多的点，使任意所选两点均不相连</p><p><strong>最小路径覆盖数</strong>：对于一个 DAG（有向无环图），选取最少条路径，使得每个顶点属于且仅属于一条路径。路径长可以为 0（即单个点）。</p><p>定理1：最大匹配数 = 最小点覆盖数（这是 Konig 定理）</p><p>定理2：最大匹配数 = 最大独立数</p><p>定理3：最小路径覆盖数 = 顶点数 - 最大匹配数</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;推荐阅读：&lt;a href=&quot;https://www.renfei.org/blog/bipartite-matching.html&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;二分图的最大匹配、完美匹配和匈牙利算法&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;匈牙利算法&quot;&gt;&lt;a href=&quot;#匈牙利算法&quot; class=&quot;headerlink&quot; title=&quot;匈牙利算法&quot;&gt;&lt;/a&gt;匈牙利算法&lt;/h3&gt;&lt;p&gt;匈牙利算法是由匈牙利数学家Edmonds于1965年提出，因而得名。匈牙利算法是基于Hall定理中充分性证明的思想，它是部图匹配最常见的算法，该算法的核心就是寻找增广路径，它是一种用增广路径求二分图&lt;strong&gt;最大匹配&lt;/strong&gt;的算法。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://leomalik.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://leomalik.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Dijkstra-最短路径算法</title>
    <link href="http://leomalik.github.io/Dijkstra-%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95.html"/>
    <id>http://leomalik.github.io/Dijkstra-最短路径算法.html</id>
    <published>2019-02-08T12:50:03.000Z</published>
    <updated>2019-02-08T14:12:03.354Z</updated>
    
    <content type="html"><![CDATA[<p>推荐阅读，转自:<a href="http://ahalei.blog.51cto.com/4767671/1387799" rel="external nofollow noopener noreferrer" target="_blank">【啊哈！算法】系列7：Dijkstra最短路算法</a></p><p>上周我们介绍了神奇的只有五行的Floyd最短路算法，它可以方便的求得任意两点的最短路径，这称为“多源最短路”。本周来来介绍指定一个点（源点）到其余各个顶点的最短路径，也叫做“单源最短路径”。例如求下图中的1号顶点到2、3、4、5、6号顶点的最短路径。</p><p><img src="http://bbs.ahalei.com/data/attachment/forum/201403/31/090644t797fce7n20of7j9.png" alt="090644t797fce7n20of7j9.png"></p><a id="more"></a><p>​       与Floyd-Warshall算法一样这里仍然使用二维数组e来存储顶点之间边的关系，初始值如下。</p><p><img src="http://bbs.ahalei.com/data/attachment/forum/201403/31/090651l6pt4666tptut66u.png" alt="090651l6pt4666tptut66u.png"></p><p>​       我们还需要用一个一维数组dis来存储1号顶点到其余各个顶点的初始路程，如下。</p><p><img src="http://bbs.ahalei.com/data/attachment/forum/201403/31/090657ofidcactthcig33i.png" alt="090657ofidcactthcig33i.png"></p><p>​       我们将此时dis数组中的值称为最短路的“估计值”。</p><p>​       既然是求1号顶点到其余各个顶点的最短路程，那就先找一个离1号顶点最近的顶点。通过数组dis可知当前离1号顶点最近是2号顶点。当选择了2号顶点后，dis[2]的值就已经从“估计值”变为了“确定值”，即1号顶点到2号顶点的最短路程就是当前dis[2]值。为什么呢？你想啊，目前离1号顶点最近的是2号顶点，并且这个图所有的边都是正数，那么肯定不可能通过第三个顶点中转，使得1号顶点到2号顶点的路程进一步缩短了。因为1号顶点到其它顶点的路程肯定没有1号到2号顶点短，对吧O(∩_∩)O~</p><p>​       既然选了2号顶点，接下来再来看2号顶点有哪些出边呢。有2-&gt;3和2-&gt;4这两条边。先讨论通过2-&gt;3这条边能否让1号顶点到3号顶点的路程变短。也就是说现在来比较dis[3]和dis[2]+e[2] [3]的大小。其中dis[3]表示1号顶点到3号顶点的路程。dis[2]+e[2] [3]中dis[2]表示1号顶点到2号顶点的路程，e[2] [3]表示2-&gt;3这条边。所以dis[2]+e[2] [3]就表示从1号顶点先到2号顶点，再通过2-&gt;3这条边，到达3号顶点的路程。</p><p>​       我们发现dis[3]=12，dis[2]+e[2] [3]=1+9=10，dis[3]&gt;dis[2]+e[2] [3]，因此dis[3]要更新为10。这个过程有个专业术语叫做“松弛”。即1号顶点到3号顶点的路程即dis[3]，通过2-&gt;3这条边松弛成功。这便是Dijkstra算法的主要思想：通过“边”来松弛1号顶点到其余各个顶点的路程。</p><p>​       同理通过2-&gt;4（e[2] [4]），可以将dis[4]的值从∞松弛为4（dis[4]初始为∞，dis[2]+e[2] [4]=1+3=4，dis[4]&gt;dis[2]+e[2] [4]，因此dis[4]要更新为4）。</p><p>​       刚才我们对2号顶点所有的出边进行了松弛。松弛完毕之后dis数组为：</p><p><img src="http://bbs.ahalei.com/data/attachment/forum/201403/31/090706vmjy7l2ee2lyalia.png" alt="090706vmjy7l2ee2lyalia.png"></p><p>​       接下来，继续在剩下的3、4、5和6号顶点中，选出离1号顶点最近的顶点。通过上面更新过dis数组，当前离1号顶点最近是4号顶点。此时，dis[4]的值已经从“估计值”变为了“确定值”。下面继续对4号顶点的所有出边（4-&gt;3，4-&gt;5和4-&gt;6）用刚才的方法进行松弛。松弛完毕之后dis数组为：</p><p><img src="http://bbs.ahalei.com/data/attachment/forum/201403/31/090714f2p1wppynngj2pep.png" alt="090714f2p1wppynngj2pep.png"></p><p>​       继续在剩下的3、5和6号顶点中，选出离1号顶点最近的顶点，这次选择3号顶点。此时，dis[3]的值已经从“估计值”变为了“确定值”。对3号顶点的所有出边（3-&gt;5）进行松弛。松弛完毕之后dis数组为：</p><p><img src="http://bbs.ahalei.com/data/attachment/forum/201403/31/090722ywunackk35i8cni5.png" alt="090722ywunackk35i8cni5.png"></p><p>​       继续在剩下的5和6号顶点中，选出离1号顶点最近的顶点，这次选择5号顶点。此时，dis[5]的值已经从“估计值”变为了“确定值”。对5号顶点的所有出边（5-&gt;4）进行松弛。松弛完毕之后dis数组为：</p><p><img src="http://bbs.ahalei.com/data/attachment/forum/201403/31/090730eq6oqzyq7laqha9y.png" alt="090730eq6oqzyq7laqha9y.png"></p><p>​       最后对6号顶点所有点出边进行松弛。因为这个例子中6号顶点没有出边，因此不用处理。到此，dis数组中所有的值都已经从“估计值”变为了“确定值”。</p><p>​       最终dis数组如下，这便是1号顶点到其余各个顶点的最短路径。</p><p><img src="http://bbs.ahalei.com/data/attachment/forum/201403/31/090738azt5clcozl899ekt.png" alt="090738azt5clcozl899ekt.png"></p><p>​       OK，现在来总结一下刚才的算法。算法的基本思想是：每次找到离源点（上面例子的源点就是1号顶点）最近的一个顶点，然后以该顶点为中心进行扩展，最终得到源点到其余所有点的最短路径。基本步骤如下：</p><ul><li>将所有的顶点分为两部分：已知最短路程的顶点集合P和未知最短路径的顶点集合Q。最开始，已知最短路径的顶点集合P中只有源点一个顶点。我们这里用一个book[ i ]数组来记录哪些点在集合P中。例如对于某个顶点i，如果book[ i ]为1则表示这个顶点在集合P中，如果book[ i ]为0则表示这个顶点在集合Q中。</li><li>设置源点s到自己的最短路径为0即dis=0。若存在源点有能直接到达的顶点i，则把dis[ i ]设为e[s] [ i ]。同时把所有其它（源点不能直接到达的）顶点的最短路径为设为∞。</li><li>在集合Q的所有顶点中选择一个离源点s最近的顶点u（即dis[u]最小）加入到集合P。并考察所有以点u为起点的边，对每一条边进行松弛操作。例如存在一条从u到v的边，那么可以通过将边u-&gt;v添加到尾部来拓展一条从s到v的路径，这条路径的长度是dis[u]+e[u] [v]。如果这个值比目前已知的dis[v]的值要小，我们可以用新值来替代当前dis[v]中的值。</li><li>重复第3步，如果集合Q为空，算法结束。最终dis数组中的值就是源点到所有顶点的最短路径。</li></ul><p>​       完整的Dijkstra算法代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> e[<span class="number">10</span>][<span class="number">10</span>],dis[<span class="number">10</span>],book[<span class="number">10</span>],i,j,n,m,t1,t2,t3,u,v,min;</span><br><span class="line">    <span class="keyword">int</span> inf=<span class="number">99999999</span>; <span class="comment">//用inf(infinity的缩写)存储一个我们认为的正无穷值</span></span><br><span class="line">    <span class="comment">//读入n和m，n表示顶点个数，m表示边的条数</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">                                                                  </span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>(i==j) e[i][j]=<span class="number">0</span>;</span><br><span class="line">              <span class="keyword">else</span> e[i][j]=inf;</span><br><span class="line">                                                                            </span><br><span class="line">    <span class="comment">//读入边</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;t1,&amp;t2,&amp;t3);</span><br><span class="line">        e[t1][t2]=t3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化dis数组，这里是1号顶点到其余各个顶点的初始路程</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        dis[i]=e[<span class="number">1</span>][i];</span><br><span class="line">    <span class="comment">//book数组初始化</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        book[i]=<span class="number">0</span>;</span><br><span class="line">    book[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">                                                                  </span><br><span class="line">    <span class="comment">//Dijkstra算法核心语句</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//找到离1号顶点最近的顶点</span></span><br><span class="line">        min=inf;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(book[j]==<span class="number">0</span> &amp;&amp; dis[j]&lt;min)</span><br><span class="line">            &#123;</span><br><span class="line">                min=dis[j];</span><br><span class="line">                u=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        book[u]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(v=<span class="number">1</span>;v&lt;=n;v++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(e[u][v]&lt;inf)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(dis[v]&gt;dis[u]+e[u][v])</span><br><span class="line">                    dis[v]=dis[u]+e[u][v];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">                                                                  </span><br><span class="line">    <span class="comment">//输出最终的结果</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,dis[i]);</span><br><span class="line">                                                                      </span><br><span class="line">    getchar();</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​       可以输入以下数据进行验证。第一行两个整数n  m。n表示顶点个数（顶点编号为1~n），m表示边的条数。接下来m行表示，每行有3个数x y z。表示顶点x到顶点y边的权值为z。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span> <span class="number">9</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">12</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">9</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">13</span></span><br><span class="line"><span class="number">4</span> <span class="number">6</span> <span class="number">15</span></span><br><span class="line"><span class="number">5</span> <span class="number">6</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><p>​       运行结果是</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">8</span> <span class="number">4</span> <span class="number">13</span> <span class="number">17</span></span><br></pre></td></tr></table></figure><p>   通过上面的代码我们可以看出，这个算法的时间复杂度是O(N2)。其中每次找到离1号顶点最近的顶点的时间复杂度是O(N)，这里我们可以用“堆”（以后再说）来优化，使得这一部分的时间复杂度降低到O(logN)。另外对于边数M少于N2的稀疏图来说（我们把M远小于N2的图称为稀疏图，而M相对较大的图称为稠密图），我们可以用邻接表（这是个神马东西？不要着急，下周再仔细讲解）来代替邻接矩阵，使得整个时间复杂度优化到O( (M+N)logN )。请注意！在最坏的情况下M就是N2，这样的话MlogN要比N2还要大。但是大多数情况下并不会有那么多边，因此(M+N)logN要比N2小很多。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;推荐阅读，转自:&lt;a href=&quot;http://ahalei.blog.51cto.com/4767671/1387799&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;【啊哈！算法】系列7：Dijkstra最短路算法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上周我们介绍了神奇的只有五行的Floyd最短路算法，它可以方便的求得任意两点的最短路径，这称为“多源最短路”。本周来来介绍指定一个点（源点）到其余各个顶点的最短路径，也叫做“单源最短路径”。例如求下图中的1号顶点到2、3、4、5、6号顶点的最短路径。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://bbs.ahalei.com/data/attachment/forum/201403/31/090644t797fce7n20of7j9.png&quot; alt=&quot;090644t797fce7n20of7j9.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://leomalik.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://leomalik.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>贪心算法</title>
    <link href="http://leomalik.github.io/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95.html"/>
    <id>http://leomalik.github.io/贪心算法.html</id>
    <published>2019-02-07T15:07:04.000Z</published>
    <updated>2019-02-08T14:11:53.659Z</updated>
    
    <content type="html"><![CDATA[<h1 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h1><p>贪心算法是指在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的是在某种意义上的局部最优解。</p><a id="more"></a><p>贪心算法的基本思路是从问题的某一个初始解出发一步一步地进行，根据某个优化测度，每一步都要确保能获得局部最优解。每一步只考虑一个数据，他的选取应该满足局部优化的条件。若下一个数据和部分最优解连在一起不再是可行解时，就不把该数据添加到部分解中，直到把所有数据枚举完，或者不能再添加算法停。</p><p>贪心算法不是对所有问题都能得到整体最优解，关键是贪心策略的选择，选择的贪心策略必须具备无后效性，即某个状态以前的过程不会影响以后的状态，只与当前状态有关。</p><p><strong>一句话：不求最优，仅仅求可行解。</strong></p><h2 id="选择使用贪心算法"><a href="#选择使用贪心算法" class="headerlink" title="选择使用贪心算法"></a>选择使用贪心算法</h2><p>　我们能够依据贪心法的2个重要的性质去证明：<strong>贪心选择性质和最优子结构性质</strong>。</p><h3 id="1、贪心选择"><a href="#1、贪心选择" class="headerlink" title="1、贪心选择"></a>1、贪心选择</h3><p>　　什么叫贪心选择？从字义上就是贪心也就是目光短线。贪图眼前利益。在算法中就是仅仅依据当前已有的信息就做出选择，并且以后都不会改变这次选择。（这是和动态规划法的主要差别）　　</p><p>　　所以对于一个详细问题。要确定它是否具有贪心选择性质，必须证明每做一步贪心选择是否终于导致问题的总体最优解。</p><h3 id="2、最优子结构"><a href="#2、最优子结构" class="headerlink" title="2、最优子结构"></a>2、最优子结构</h3><p>　　当一个问题的最优解包括其子问题的最优解时，称此问题具有最优子结构性质。</p><p>​       运用贪心策略在每一次转化时都取得了最优解。问题的最优子结构性质是该问题可用贪心算法或动态规划算法求解的关键特征。贪心算法的每一次操作都对结果产生直接影响，而动态规划则不是。贪心算法对每个子问题的解决方案都做出选择，不能回退；动态规划则会根据以前的选择结果对当前进行选择，有回退功能。动态规划主要运用于二维或三维问题，而贪心一般是一维问题</p><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><p>贪心算法的基本思路是从问题的某一个初始解触发一步一步地进行，根据抹个优化测度，每一步都要确保能获得局部最优解，每一步值考虑一个数据，他的选取应该满足局部优化的条件。若下一个数据和部分最优解连载一起不再是可行解时，就不把改数据添加到部分解中，知道把所有数据枚举玩，或者不能在添加算法停止。</p><p><strong>过程</strong></p><ol><li>建立数学模型来描述问题；</li><li>把求解的问题分成若干个子问题；</li><li>对每一子问题求解，得到子问题的局部最优解；</li><li>把子问题的解局部最优解合成原来解问题的一个解。</li></ol><h2 id="算法特性"><a href="#算法特性" class="headerlink" title="算法特性"></a>算法特性</h2><ol><li>随着算法的进行，将积累起其它两个集合：一个包含已经被考虑过并被选出的候选对象，另一个包含已经被考虑过但被丢弃的候选对象。</li><li>有一个函数来检查一个候选对象的集合是否提供了问题的解答。该函数不考虑此时的解决方法是否最优。</li><li>还有一个函数检查是否一个候选对象的集合是可行的，也即是否可能往该集合上添加更多的候选对象以获得一个解。和上一个函数一样，此时不考虑解决方法的最优性。</li><li>选择函数可以指出哪一个剩余的候选对象最有希望构成问题的解。</li><li>最后，目标函数给出解的值。</li><li>为了解决问题，需要寻找一个构成解的候选对象集合，它可以优化目标函数，贪婪算法一步一步的进行。起初，算法选出的候选对象的集合为空。接下来的每一步中，根据选择函数，算法从剩余候选对象中选出最有希望构成解的对象。如果集合中加上该对象后不可行，那么该对象就被丢弃并不再考虑；否则就加到集合里。每一次都扩充集合，并检查该集合是否构成解。如果贪婪算法正确工作，那么找到的第一个解通常是最优的。</li></ol><h2 id="一般求解过程"><a href="#一般求解过程" class="headerlink" title="一般求解过程"></a>一般求解过程</h2><p>　　使用贪心法求解能够依据下面几个方面进行（终于也相应着每步代码的实现），以找零钱为例：</p><h3 id="1、候选集合-C"><a href="#1、候选集合-C" class="headerlink" title="　　1、候选集合(C)"></a>　　1、候选集合(C)</h3><p>　　　　通过一个候选集合C作为问题的可能解。（终于解均取自于候选集合C）</p><p>　　　　比如。在找零钱问题中，各种面值的货币构成候选集合。</p><h3 id="2、解集合-S"><a href="#2、解集合-S" class="headerlink" title="　　2、解集合(S)"></a>　　2、解集合(S)</h3><p>　　　　每完毕一次贪心选择，将一个解放入S。终于获得一个完整解S</p><h3 id="3、解决函数-solution"><a href="#3、解决函数-solution" class="headerlink" title="　　3、解决函数(solution)"></a>　　3、解决函数(solution)</h3><p>　　　　检查解集合S是否构成问题的完整解。</p><p>　　　　比如，在找零钱问题中。解决函数是已付出的货币金额恰好等于应付款。</p><h3 id="4、选择函数-select"><a href="#4、选择函数-select" class="headerlink" title="　　4、选择函数(select)"></a>　　4、选择函数(select)</h3><p>　　　　即贪心策略。这是贪心法的关键，选择出最有希望构成问题的解的对象。</p><p>（这个选择函数通常和目标函数有关）</p><p>　　 比如，在找零钱问题中，贪心策略就是在候选集合中选择面值最大的货币。</p><h3 id="5、可行函数-feasible"><a href="#5、可行函数-feasible" class="headerlink" title="　　5、可行函数(feasible)"></a>　　5、可行函数(feasible)</h3><p>　　　　检查解集合中增加一个候选对象是否可行。（增加下一个对象后是不是满足约束条件）</p><p>　　　　比如。在找零钱问题中，可行函数是每一步选择的货币和已付出的货币相加不超过应付款。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="1-活动选择问题"><a href="#1-活动选择问题" class="headerlink" title="1.活动选择问题"></a>1.活动选择问题</h3><p>有n个需要在同一天使用同一个教室的活动a1,a2,…,an，教室同一时刻只能由一个活动使用。每个活动ai都有一个开始时间si和结束时间fi 。一旦被选择后，活动ai就占据半开时间区间[si,fi)。如果[si,fi]和[sj,fj]互不重叠，ai和aj两个活动就可以被安排在这一天。该问题就是要安排这些活动使得尽量多的活动能不冲突的举行。<img src="data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;602&quot; height=&quot;159&quot;&gt;&lt;/svg" alt="img"></p><p>问题分析：<br>活动安排问题要求安排一系列争用某一公共资源的活动。用贪心算法可提供一个简单、漂亮的方法，使尽可能多的活动能兼容的使用公共资源。设有n个活动的集合｛0，1，2，…，n-1｝，其中每个活动都要求使用同一资源，如会场等，而在同一时间内只有一个活动能使用这一资源。每个活动i都有一个要求使用该资源的起始时间starti和一个结束时间endi，且starti&lt;endi。如选择了活动i，则它在半开时间区间[starti,endi）内占用资源。若区间[starti,endi)与区间[startj,endj)不相交，称活动i与活动j是相容的。也就是说，当startj≥endi或starti≥endj时，活动i与活动j相容。活动安排问题就是在所给的活动集合中选出最多的不相容活动。<br>活动安排问题就是要在所给的活动集合中选出最大的相容活动子集合，是可以用贪心算法有效求解的很好例子。该问题要求高效地安排一系列争用某一公共资源的活动。贪心算法提供了一个简单、漂亮的方法使得尽可能多的活动能兼容地使用公共资源。</p><p>算法设计：<br>若被检查的活动i的开始时间starti小于最近选择的活动j的结束时间endj，则不选择活动i，否则选择活动i加入集合中。运用该算法解决活动安排问题的效率极高。当输入的活动已按结束时间的非减序排列，算法只需O(n)的时间安排n个活动，使最多的活动能相容地使用公共资源。如果所给出的活动未按非减序排列，可以用O(nlogn)的时间重排。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;   </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;   </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;      </span><br><span class="line"><span class="keyword">int</span> N;  </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Act</span>  </span></span><br><span class="line"><span class="class">&#123;</span>  </span><br><span class="line">    <span class="keyword">int</span> start;  </span><br><span class="line">    <span class="keyword">int</span> end;  </span><br><span class="line">&#125;act[<span class="number">100010</span>];  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Act a,Act b)</span>    </span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="keyword">return</span> a.end&lt;b.end;    </span><br><span class="line">&#125;   </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">greedy_activity_selector</span><span class="params">()</span>    </span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">1</span>,i=<span class="number">1</span>;     </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=N;j++)    </span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="keyword">if</span>(act[j].start&gt;=act[i].end)    </span><br><span class="line">        &#123;    </span><br><span class="line">            i=j;    </span><br><span class="line">            num++;    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> num;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>    </span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="keyword">int</span> t;  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);  </span><br><span class="line">    <span class="keyword">while</span>(t--)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>,&amp;act[i].start,&amp;act[i].end);  </span><br><span class="line">        &#125;  </span><br><span class="line">        act[<span class="number">0</span>].start=<span class="number">-1</span>;  </span><br><span class="line">        act[<span class="number">0</span>].end=<span class="number">-1</span>;  </span><br><span class="line">        sort(act+<span class="number">1</span>,act+N+<span class="number">1</span>,cmp);   </span><br><span class="line">        <span class="keyword">int</span> res=greedy_activity_selector();  </span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;    </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-钱币找零问题"><a href="#2-钱币找零问题" class="headerlink" title="2.钱币找零问题"></a>2.钱币找零问题</h3><p>这个问题在我们的日常生活中就更加普遍了。假设1元、2元、5元、10元、20元、50元、100元的纸币分别有c0, c1, c2, c3, c4, c5, c6张。现在要用这些钱来支付K元，至少要用多少张纸币？用贪心算法的思想，很显然，每一步尽可能用面值大的纸币即可。在日常生活中我们自然而然也是这么做的。在程序中已经事先将Value按照从小到大的顺序排好。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">7</span>; </span><br><span class="line"><span class="keyword">int</span> Count[N]=&#123;<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> Value[N]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="number">100</span>&#125;;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> money)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=N<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> c=min(money/Value[i],Count[i]);</span><br><span class="line">money=money-c*Value[i];</span><br><span class="line">num+=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(money&gt;<span class="number">0</span>) num=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> money;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;money;</span><br><span class="line"><span class="keyword">int</span> res=solve(money);</span><br><span class="line"><span class="keyword">if</span>(res!=<span class="number">-1</span>) <span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-背包问题"><a href="#3-背包问题" class="headerlink" title="3.背包问题"></a>3.背包问题</h3><p>有一个背包，背包容量是M=150kg。有7个物品，物品不可以分割成任意大小。要求尽可能让装入背包中的物品总价值最大，但不能超过总容量。<img src="data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;459&quot; height=&quot;114&quot;&gt;&lt;/svg" alt="img"></p><p>问题分析<br>目标函数： ∑pi最大，使得装入背包中的所有物品pi的价值加起来最大。</p><p>约束条件：装入的物品总重量不超过背包容量：∑wi&lt;=M( M=150)</p><p>贪心策略：</p><p>⑴根据贪心的策略，每次挑选价值最大的物品装入背包，得到的结果是否最优？</p><p>⑵每次挑选所占重量最小的物品装入是否能得到最优解？</p><p>⑶每次选取单位重量价值最大的物品，成为解本题的策略。</p><p><strong>⑴贪心策略：选取价值最大者。</strong></p><p>W=30</p><p>物品：A B C</p><p>重量：28 12 12</p><p>价值：30 20 20</p><p>根据策略，首先选取物品A，接下来就无法再选取了，可是，选取B、C则更好。</p><p><strong>⑵贪心策略：选取重量最小。</strong>它的反例与第一种策略的反例差不多。</p><p><strong>⑶贪心策略：选取单位重量价值最大的物品。</strong></p><p>反例：</p><p>W=30</p><p>物品：A B C</p><p>重量：28 20 10</p><p>价值：28 20 10</p><p>根据策略，三种物品单位重量价值一样，程序无法依据现有策略作出判断，如果选择A，则答案错误。</p><p>【注意：如果物品可以分割为任意大小，那么策略3可得最优解】</p><p>对于选取单位重量价值最大的物品这个策略，可以再加一条优化的规则：对于单位重量价值一样的，则优先选择重量小的！这样，上面的反例就解决了。</p><p>但是，如果题目是如下所示，这个策略就也不行了。</p><p>W=40</p><p>物品：A B C</p><p>重量：25 20 15</p><p>价值：25 20 15</p><ul><li>算法设计：</li></ul><ol><li>计算出每个物品单位重量的价值</li><li>按单位价值从大到小将物品排序</li><li>根据背包当前所剩容量选取物品</li><li>如果背包的容量大于当前物品的重量，那么就将当前物品装进去。否则，那么就将当前物品舍去，然后跳出循环结束。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">double</span> avg;</span><br><span class="line">&#125;P;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(P a,P b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.avg&gt;b.avg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    P *p;</span><br><span class="line">    <span class="keyword">int</span> n,i,m;<span class="comment">//n 物品个数 m背包容量</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line">        p=<span class="keyword">new</span> P[n];</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;p[i].w&gt;&gt;p[i].v;</span><br><span class="line">            p[i].avg=p[i].v/p[i].w*<span class="number">1.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(p,p+n,cmp);</span><br><span class="line">        <span class="keyword">int</span> maxvalue=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p[i].w&lt;=m)&#123;</span><br><span class="line">                m-=p[i].w;</span><br><span class="line">                maxvalue+=p[i].v;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;maxvalue&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;贪心算法&quot;&gt;&lt;a href=&quot;#贪心算法&quot; class=&quot;headerlink&quot; title=&quot;贪心算法&quot;&gt;&lt;/a&gt;贪心算法&lt;/h1&gt;&lt;p&gt;贪心算法是指在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的是在某种意义上的局部最优解。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://leomalik.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://leomalik.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>HDU 2000-2099 入门笔记</title>
    <link href="http://leomalik.github.io/HDU%202000-2099%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0.html"/>
    <id>http://leomalik.github.io/HDU 2000-2099入门笔记.html</id>
    <published>2019-02-02T03:46:03.000Z</published>
    <updated>2019-02-09T15:13:48.077Z</updated>
    
    <content type="html"><![CDATA[<p>都说HDU 2000-2099 是acm入门必刷题，为了备战蓝桥杯，巩固知识，我做了一些小笔记与总结。<br><!-- ![](https://i1.hoopchina.com.cn/hupuapp/bbs/180153855732716/thread_180153855732716_20181109165433_s_24245_w_456_h_256_98723.jpg?x-oss-process=image/resize,w_800/format,webp) --><br><a id="more"></a></p><h3 id="HDU-1002-A-B-Problem-two-大数问题"><a href="#HDU-1002-A-B-Problem-two-大数问题" class="headerlink" title="HDU 1002 A+B Problem two(大数问题)"></a>HDU 1002 A+B Problem two(大数问题)</h3><p>大数问题，通用的方法是使用string进行ascii码的加减</p><ul><li>两个数字的ascii码相加减去 <code>0</code> 就是对应数字的ascii码</li><li>如果相加的数大于10,相加的ascii码减去<code>10</code>就是个位数</li></ul><p>代码如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">sum</span><span class="params">(<span class="built_in">string</span> &amp;s1, <span class="built_in">string</span> &amp;s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s1 == <span class="string">""</span> &amp;&amp; s2 == <span class="string">""</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">    <span class="keyword">if</span> (s1 == <span class="string">""</span>)</span><br><span class="line">        <span class="keyword">return</span> s2;</span><br><span class="line">    <span class="keyword">if</span> (s2 == <span class="string">""</span>)</span><br><span class="line">        <span class="keyword">return</span> s1;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> max, min;</span><br><span class="line">    <span class="keyword">int</span> lens1 = s1.length();</span><br><span class="line">    <span class="keyword">int</span> lens2 = s2.length();</span><br><span class="line">    <span class="keyword">if</span> (lens1 &lt; lens2)</span><br><span class="line">    &#123;</span><br><span class="line">        max = s2;</span><br><span class="line">        min = s1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        max = s1;</span><br><span class="line">        min = s2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> maxlen = max.length();</span><br><span class="line">    <span class="keyword">int</span> minlen = min.length();</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = maxlen - <span class="number">1</span>, j = minlen - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--, i--)</span><br><span class="line">    &#123;</span><br><span class="line">        max[i] = max[i] + min[i] - <span class="string">'0'</span>; <span class="comment">//相加的ascii码-0就是对应数组的ascii码</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = maxlen - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (max[i] &gt; <span class="string">'9'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            max[i] = max[i] - <span class="number">10</span>; <span class="comment">//相加的ascii码-10就是个位数</span></span><br><span class="line">            max[i - <span class="number">1</span>] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (max[<span class="number">0</span>] &gt; <span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        max[<span class="number">0</span>] -= <span class="number">10</span>;</span><br><span class="line">        max = <span class="string">"1"</span> + max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> count = num;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (num)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> s1, s2;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case "</span> &lt;&lt; i &lt;&lt; <span class="string">":"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; s1 &lt;&lt; <span class="string">" + "</span> &lt;&lt; s2 &lt;&lt; <span class="string">" = "</span> &lt;&lt; sum(s1, s2) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; count)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        num--;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HDU-2018-母牛的故事-递推"><a href="#HDU-2018-母牛的故事-递推" class="headerlink" title="HDU 2018 母牛的故事(递推)"></a>HDU 2018 母牛的故事(递推)</h3><p>相似：<strong>HDU 2044~2050,HDU2041</strong></p><p><strong>Description</strong><br>　　有一头母牛，它每年年初生一头小母牛。每头小母牛从第四个年头开始，每年年初也生一头小母牛。请编程实现在第n年的时候，共有多少头母牛？<br><strong>Input</strong><br>　　输入数据由多个测试实例组成，每个测试实例占一行，包括一个整数n(0&lt; n&lt; 55)，n的含义如题目中描述。<br>　　n=0表示输入数据的结束，不做处理。<br><strong>Output</strong><br>　　对于每个测试实例，输出在第n年的时候母牛的数量。<br>　　每个输出占一行。</p><p><strong>分析</strong>:<br>​    以n=6为例，fn=9头牛可以分解为6+3，其中6是上一年（第5年）的牛，3是新生的牛（因为第3年有3头牛，这3头在第6年各生一头牛）。<br>　　我们可以得出这样一个公式：fn=fn-1+fn-3<br>　　再理解一下，fn-1是前一年的牛，第n年仍然在，fn-3是前三年那一年的牛，但换句话说也就是第n年具有生育能力的牛，也就是第n年能生下的小牛数。</p><p><strong>代码:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&amp;&amp;n!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;f(n)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">return</span> n; <span class="comment">//第1，2，3年，各为1，2，3头</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> f(n<span class="number">-1</span>)+f(n<span class="number">-3</span>);  <span class="comment">//第n年为前一年的和前3年的相加</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HDU-2031-进制转换-模拟"><a href="#HDU-2031-进制转换-模拟" class="headerlink" title="HDU 2031 进制转换(模拟):"></a>HDU 2031 进制转换(模拟):</h3><p><strong>Problem Description</strong></p><p>输入一个十进制数N，将它转换成R进制数输出。</p><p><strong>Input</strong></p><p>输入数据包含多个测试实例，每个测试实例包含两个整数N(32位整数)和R（2&lt;=R&lt;=16, R&lt;&gt;10）。 </p><p><strong>Output</strong></p><p>为每个测试实例输出转换后的数，每个输出占一行。如果R大于10，则对应的数字规则参考16进制（比如，10用A表示，等等）。</p><p><strong>分析:</strong></p><p> 进制转换,也就是取余,以7的二进制表示:</p><ol><li>7%2=1…7/2=3</li><li>3%2=1…3/2=1</li><li>1%2=1…1/2=0</li></ol><p>取余的数字拼接为111,直到商为0为止,即是7的二进制表示</p><p><strong>代码:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,r,i,x,flag;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;r)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (n&lt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            n=-n;</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        x=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n)</span><br><span class="line">        &#123;</span><br><span class="line">            a[x]=n%r;</span><br><span class="line">            n/=r;</span><br><span class="line">            x++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (x--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"-"</span>);</span><br><span class="line">                flag=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (a[x]&lt;<span class="number">10</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>,a[x]);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%c"</span>,<span class="number">55</span>+a[x]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HDU-2048-神、上帝以及老天爷-错排问题"><a href="#HDU-2048-神、上帝以及老天爷-错排问题" class="headerlink" title="HDU 2048 神、上帝以及老天爷(错排问题)"></a>HDU 2048 神、上帝以及老天爷(错排问题)</h3><p>相似：<strong>HDU 2049</strong></p><p><strong>Description</strong></p><p>HDU 2006’10 ACM contest的颁奖晚会隆重开始了！<br>为了活跃气氛，组织者举行了一个别开生面、奖品丰厚的抽奖活动，这个活动的具体要求是这样的：</p><p>首先，所有参加晚会的人员都将一张写有自己名字的字条放入抽奖箱中；<br>然后，待所有字条加入完毕，每人从箱中取一个字条；<br>最后，如果取得的字条上写的就是自己的名字，那么“恭喜你，中奖了！”</p><p>大家可以想象一下当时的气氛之热烈，毕竟中奖者的奖品是大家梦寐以求的Twins签名照呀！不过，正如所有试图设计的喜剧往往以悲剧结尾，这次抽奖活动最后竟然没有一个人中奖！</p><p>我的神、上帝以及老天爷呀，怎么会这样呢？</p><p>不过，先不要激动，现在问题来了，你能计算一下发生这种情况的概率吗？</p><p>不会算？难道你也想以悲剧结尾？！</p><p><strong>Input</strong></p><p>输入数据的第一行是一个整数C,表示测试实例的个数，然后是C 行数据，每行包含一个整数n(1 &lt; n &lt; =20),表示参加抽奖的人数。</p><p><strong>Output</strong></p><p>对于每个测试实例，请输出发生这种情况的百分比，每个实例的输出占一行, 结果保留两位小数(四舍五入)，具体格式请参照sample output。</p><p><strong>分析:</strong></p><p>典型的错排问题,具体思路如下:</p><p>当n个编号元素放在n个编号位置，元素编号与位置编号各不对应的方法数用D(n)表示，那么D(n-1)就表示n-1个编号元素放在n-1个编号位置，各不对应的方法数，其它类推. </p><ol><li>把第n个元素放在一个位置，比如位置k，一共有n-1种方法； </li><li>放编号为k的元素，这时有两种情况：⑴把它放到位置n，那么，对于剩下的n-1个元素，由于第k个元素放到了位置n，剩下n-2个元素就有D(n-2)种方法；⑵第k个元素不把它放到位置n，这时，对于这n-1个元素，有D(n-1)种方法；<br> 综上得到 D(n) = (n-1) [D(n-2) + D(n-1)]<br> 特殊地，D(1) = 0, D(2) = 1.</li></ol><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> i,j,num;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> D[<span class="number">22</span>],F[<span class="number">22</span>];</span><br><span class="line">    D[<span class="number">1</span>]=<span class="number">0</span>;D[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">3</span>;i&lt;<span class="number">21</span>;i++)</span><br><span class="line">        D[i]=(i<span class="number">-1</span>)*(D[i<span class="number">-1</span>]+D[i<span class="number">-2</span>]);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">20</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">        F[i]=i;</span><br><span class="line">        <span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;<span class="number">1</span>;j--)</span><br><span class="line">            F[i]*=j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num);</span><br><span class="line">    <span class="keyword">while</span>(num--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2lf%%\n"</span>,D[n]*<span class="number">100.0</span>/F[n]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HDU-2053-Switch-Game-开灯问题-唯一分解定理"><a href="#HDU-2053-Switch-Game-开灯问题-唯一分解定理" class="headerlink" title="HDU 2053 Switch Game(开灯问题,唯一分解定理)"></a>HDU 2053 Switch Game(开灯问题,唯一分解定理)</h3><p><strong>Problem Description</strong></p><p>There are many lamps in a line. All of them are off at first. A series of operations are carried out on these lamps. On the i-th operation, the lamps whose numbers are the multiple of i change the condition ( on to off and off to on ).</p><p><strong>Input</strong></p><p>Each test case contains only a number n ( 0&lt; n&lt;= 10^5) in a line.</p><p><strong>Output</strong></p><p>Output the condition of the n-th lamp after infinity operations ( 0 - off, 1 - on ).</p><p><strong>分析：</strong></p><p>36的约数是 (1,36), (2,18), (3,12), (4,9), (6)，任何一个数都是由两个不同的数相乘得到的，但是如果一个数为平方数，那么这两个数就可以相等，例如36由两个6相乘得到，所以要判断灯的状态，只需要判断这个数是不是平方数即可</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> x=<span class="built_in">sqrt</span>(n*<span class="number">1.0</span>);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;(x==<span class="keyword">int</span>(x))&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HDU-2057-A-B-Again-16进制数相加"><a href="#HDU-2057-A-B-Again-16进制数相加" class="headerlink" title="HDU 2057 A + B Again (16进制数相加)"></a>HDU 2057 A + B Again (16进制数相加)</h3><p><strong>Problem Description</strong></p><p>There must be many A + B problems in our HDOJ , now a new one is coming.<br>Give you two hexadecimal integers , your task is to calculate the sum of them,and print it in hexadecimal too.<br>Easy ? AC it !</p><p><strong>Input</strong></p><p>The input contains several test cases, please process to the end of the file.<br>Each case consists of two hexadecimal integers A and B in a line seperated by a blank.<br>The length of A and B is less than 15.</p><p><strong>Output</strong></p><p>For each test case,print the sum of A and B in hexadecimal in one line.</p><p><strong>分析：</strong></p><p>涉及到16进制内的加法，可以用%I64x直接来处理，要<strong>注意到16进制中负数是用补码来表示的</strong>。一个比较困惑的事实是，这道题再输出时，%64X中‘X’必须是大写，小写是过不了的。</p><p><strong>注意</strong>：__int64 %I64X ,输出用大写</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstdio"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __int64 a,b,c;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%I64X%I64X"</span>,&amp;a,&amp;b))</span><br><span class="line">    &#123;</span><br><span class="line">        c=a+b;</span><br><span class="line">        <span class="keyword">if</span>(c&gt;=<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%I64X\n"</span>,c);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"-%I64X\n"</span>,-c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HDU-2062-Subset-sequence（子序列）"><a href="#HDU-2062-Subset-sequence（子序列）" class="headerlink" title="HDU 2062 Subset sequence（子序列）"></a>HDU 2062 Subset sequence（子序列）</h3><p><strong>Problem Description</strong></p><p>Consider the aggregate An= { 1, 2, …, n }. For example, A1={1}, A3={1,2,3}. A subset sequence is defined as a array of a non-empty subset. Sort all the subset sequece of An in lexicography order. Your task is to find the m-th one.</p><p><strong>Input</strong></p><p>The input contains several test cases. Each test case consists of two numbers n and m ( 0&lt; n&lt;= 20, 0&lt; m&lt;= the total number of the subset sequence of An ).</p><p><strong>Output</strong></p><p>For each test case, you should output the m-th subset sequence of An in one line.</p><p><strong>分析：</strong></p><p>当n=2的时候</p><p>子序列从小到大</p><p>{1},</p><p>{1, 2},</p><p>{2},</p><p>{2, 1}</p><p>当n=3的时候</p><p>子序列从小到大</p><p>{1}</p><p>{1, 2}</p><p>{1, 2, 3}</p><p>{1, 3}</p><p>{1, 3, 2}</p><p>{2}<br>{2, 1}<br>{2, 1, 3}<br>{2, 3}<br>{2, 3, 1}</p><p>{3}<br>{3, 1}<br>{3, 1, 2}<br>{3, 2}<br>{3, 2, 1}</p><p>不难发现，An可以按首数字分成n组，而每组里除了第一项，剩下的就是An-1的子集合了。</p><p>∴f(n) = n[f(n-1) + 1]</p><p>f(1) = 1</p><p>我们拿测试数据3 10来做个示范，解释一下怎么求解。</p><p>因为n=3，所以开始数组里1、2、3三个数。</p><p>我们知道，n=2时，有4种排列，所以上面n=3可以分成三组，每组5个(加上空集)。</p><p>//空集就是说去掉该组第一个数字后为空集</p><p>因此第10个在第二组里。所以第一个是2，把2输出。原来的数组里删除2，变成1、3两个数。然后10 - (2 - 1) * 5 =5，即它在第2组的第5个。</p><p>//请自行推导所在位置</p><p>减去首个空集合，5 - 1 = 4 ≠ 0，表示2后面还有数字。</p><p>因为A1 = 1是，所以再第2组里又可以分成两组，每组2个(加上空集)。</p><p>所以，4在第2组，剩下的数组中，第二个元素是3，所以输出3。再把数组里的3删除，剩下1一个数。</p><p>然后4 - (2 - 1) * 2 = 2，既它是第2组的第2个。</p><p>减去首个空集，2 - 1 = 1 ≠ 0，表示2后面还有数字。</p><p>按上面的方法继续下去，直到n = 0 或 后面为空集为止。</p><p>最后输出数组里的第1个元素，就得到2 3 1，就是解了。从上面的计算可以看出来，本题目的关键是先求的An中每一组的个数g(n)</p><p>不难得出:g(n) = f(n) / n</p><p>∵f(n) = n[f(n-1) + 1]</p><p>∴g(n) = n[f(n-1) + 1] / n = f(n-1) + 1</p><p>∵f(n-1) = (n-1) * g(n-1)</p><p>∴g(n) = (n-1) * g(n-1) + 1</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    __int64 b;</span><br><span class="line">    __int64 g[<span class="number">30</span>];</span><br><span class="line">    g[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    g[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;<span class="number">22</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        g[i]=g[i<span class="number">-1</span>]*(i<span class="number">-1</span>)+<span class="number">1</span>;<span class="comment">//求出g；</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">30</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%I64d"</span>,&amp;a,&amp;b)!=EOF)  <span class="comment">//b的数可能很大，所以用I64d，，用int运行错了</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));<span class="comment">//清零</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a;i++)</span><br><span class="line">            num[i]=i;        <span class="comment">//将要输出的数字保存在数组里</span></span><br><span class="line">        <span class="keyword">int</span> am=a;</span><br><span class="line">        <span class="keyword">while</span>(a--)<span class="comment">//总共有a个数（1---a）最多可能输出a个</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> n=b%g[a+<span class="number">1</span>]? b/g[a+<span class="number">1</span>]+<span class="number">1</span>: b/g[a+<span class="number">1</span>];       <span class="comment">//我们用b取余对应的g，，得到要输出的数在第几组</span></span><br><span class="line">            <span class="keyword">if</span>(num[n]==<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(am<span class="number">-1</span>==a)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>,num[n]);       /  /输出对应的组代表的数字</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" %d"</span>,num[n]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&lt;=a;i++)</span><br><span class="line">                num[i]=num[i+<span class="number">1</span>];            <span class="comment">//将刚输出的数字删掉，，留下剩下的数字，，没用的数字都变成0了</span></span><br><span class="line">            b=(b-g[a+<span class="number">1</span>]*(n<span class="number">-1</span>)<span class="number">-1</span>);   <span class="comment">//把问题缩小到下一组，，， 求出在下一组的位置；循环；直到要输出的num为0，说明所有的数都输完了；</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HDU-2064-汉诺塔Ⅲ（递归）"><a href="#HDU-2064-汉诺塔Ⅲ（递归）" class="headerlink" title="HDU 2064 汉诺塔Ⅲ（递归）"></a>HDU 2064 汉诺塔Ⅲ（递归）</h3><p><strong>Problem Description</strong></p><p>约19世纪末，在欧州的商店中出售一种智力玩具，在一块铜板上有三根杆，最左边的杆上自上而下、由小到大顺序串着由64个圆盘构成的塔。目的是将最左边杆上的盘全部移到右边的杆上，条件是一次只能移动一个盘，且不允许大盘放在小盘的上面。<br>现在我们改变游戏的玩法，不允许直接从最左(右)边移到最右(左)边(每次移动一定是移到中间杆或从中间移出)，也不允许大盘放到下盘的上面。<br>Daisy已经做过原来的汉诺塔问题和汉诺塔II，但碰到这个问题时，她想了很久都不能解决，现在请你帮助她。现在有N个圆盘，她至少多少次移动才能把这些圆盘从最左边移到最右边？</p><p><strong>Input</strong></p><p>包含多组数据，每次输入一个N值(1&lt;=N=35)。</p><p><strong>Output</strong></p><p>对于每组数据，输出移动最小的次数。</p><p><strong>分析：</strong></p><p>建议阅读 <a href="https://www.zhihu.com/question/24385418" rel="external nofollow noopener noreferrer" target="_blank">如何理解汉诺塔的递归？ - 知乎</a></p><p>其实本题的复杂之处就是相当与比以往的汉诺塔多移动了一次柱子，原来<img src="https://www.zhihu.com/equation?tex=a_4%3Da_3%2B1%2Ba_3" alt="a_4=a_3+1+a_3">，现在a4=a3+a3+a3+2(移动最大的圆盘要两次)，理解了便能很快求解</p><h3 id="…HDU-2059-Seraph2012-DP"><a href="#…HDU-2059-Seraph2012-DP" class="headerlink" title="…HDU 2059  Seraph2012 (DP)"></a>…HDU 2059  Seraph2012 (DP)</h3><h3 id="HDU-2037-今年暑假不AC（贪心）"><a href="#HDU-2037-今年暑假不AC（贪心）" class="headerlink" title="HDU 2037 今年暑假不AC（贪心）"></a>HDU 2037 今年暑假不AC（贪心）</h3><p>推荐：<a href="https://juejin.im/post/5aea722e6fb9a07ac652dbc8" rel="external nofollow noopener noreferrer" target="_blank">贪心算法</a></p><p><strong>Problem Description</strong><br>“今年暑假不AC？”<br>“是的。”<br>“那你干什么呢？”<br>“看世界杯呀，笨蛋！”<br>“@#$%^&amp;*%…”</p><p>确实如此，世界杯来了，球迷的节日也来了，估计很多ACMer也会抛开电脑，奔向电视了。<br>作为球迷，一定想看尽量多的完整的比赛，当然，作为新时代的好青年，你一定还会看一些其它的节目，比如新闻联播（永远不要忘记关心国家大事）、非常6+7、超级女生，以及王小丫的《开心辞典》等等，假设你已经知道了所有你喜欢看的电视节目的转播时间表，你会合理安排吗？（目标是能看尽量多的完整节目）<br><strong>Input</strong><br>输入数据包含多个测试实例，每个测试实例的第一行只有一个整数n(n&lt;=100)，表示你喜欢看的节目的总数，然后是n行数据，每行包括两个数据Ti_s,Ti_e (1&lt;=i&lt;=n)，分别表示第i个节目的开始和结束时间，为了简化问题，每个时间都用一个正整数表示。n=0表示输入结束，不做处理。<br><strong>Output</strong><br>对于每个测试实例，输出能完整看到的电视节目的个数，每个测试实例的输出占一行。</p><p><strong>分析：</strong>最简单的贪心算法，因为一个节目对应一个开始时间和一个结束时间，所以，将这两个时间放到一个结构体中，然后对结束时间按照从小到大的顺序进行排序，如果结束的时间相同的话，就将开始的时间按照从大到小的顺序排序，然后开始比较，如果开始的时间比前一个结束的时间迟，就k++，最终k的值即为所求！</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Program</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> start,end;</span><br><span class="line">&#125;pro[<span class="number">10001</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,sum,final;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    Program temp;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n) &amp;&amp; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;pro[i].start,&amp;pro[i].end);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;++i)</span><br><span class="line">            <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;n;++j)</span><br><span class="line">                <span class="keyword">if</span>(pro[i].end&gt;pro[j].end)</span><br><span class="line">                &#123;</span><br><span class="line">                    temp=pro[i];</span><br><span class="line">                    pro[i]=pro[j];</span><br><span class="line">                    pro[j]=temp;</span><br><span class="line">                &#125;</span><br><span class="line">        sum=<span class="number">1</span>;</span><br><span class="line">        final=pro[<span class="number">0</span>].end;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(final&lt;=pro[i].start)</span><br><span class="line">            &#123;</span><br><span class="line">                ++sum;</span><br><span class="line">                final=pro[i].end;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HDU-2063-过山车-（二分图的最大匹配、完美匹配和匈牙利算法）"><a href="#HDU-2063-过山车-（二分图的最大匹配、完美匹配和匈牙利算法）" class="headerlink" title="HDU 2063 过山车 （二分图的最大匹配、完美匹配和匈牙利算法）"></a>HDU 2063 过山车 （二分图的最大匹配、完美匹配和匈牙利算法）</h3><p><strong>Problem Description</strong></p><p>RPG girls今天和大家一起去游乐场玩，终于可以坐上梦寐以求的过山车了。可是，过山车的每一排只有两个座位，而且还有条不成文的规矩，就是每个女生必须找个个男生做partner和她同坐。但是，每个女孩都有各自的想法，举个例子把，Rabbit只愿意和XHD或PQK做partner，Grass只愿意和linle或LL做partner，PrincessSnow愿意和水域浪子或伪酷儿做partner。考虑到经费问题，boss刘决定只让找到partner的人去坐过山车，其他的人，嘿嘿，就站在下面看着吧。聪明的Acmer，你可以帮忙算算最多有多少对组合可以坐上过山车吗？</p><p><strong>Input</strong></p><p>输入数据的第一行是三个整数K , M , N，分别表示可能的组合数目，女生的人数，男生的人数。0&lt;K&lt;=1000<br>1&lt;=N 和M&lt;=500.接下来的K行，每行有两个数，分别表示女生Ai愿意和男生Bj做partner。最后一个0结束输入。</p><p><strong>Output</strong></p><p>对于每组数据，输出一个整数，表示可以坐上过山车的最多组合数。</p><p><strong>分析：</strong></p><p><a href="https://www.renfei.org/blog/bipartite-matching.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.renfei.org/blog/bipartite-matching.html</a></p><p><a href="https://blog.csdn.net/dark_scope/article/details/8880547" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/dark_scope/article/details/8880547</a></p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">505</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">bool</span> a[maxn][maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> ok[maxn];</span><br><span class="line"><span class="comment">//ok[x]=y;//第x个男生和第y个女生做partner</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)<span class="comment">//男生</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[x][i]&amp;&amp;!vis[i])</span><br><span class="line">        &#123;</span><br><span class="line">            vis[i]=<span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//该男生没有被组合||该女生可以找其他人组合</span></span><br><span class="line">            <span class="keyword">if</span>(!ok[i]||Find(ok[i]))</span><br><span class="line">            &#123;</span><br><span class="line">                ok[i]=x;<span class="comment">//第i个男生和第x个女生做partner</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;k,k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line">        <span class="built_in">memset</span>(a,<span class="literal">false</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="built_in">memset</span>(ok,<span class="number">0</span>,<span class="keyword">sizeof</span>(ok));</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="keyword">while</span>(k--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">            a[x][y]=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++) <span class="comment">//女生</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">            <span class="keyword">if</span>(Find(i))</span><br><span class="line">                ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HDU-2066-一个人的旅行（最短路，多起点多终点，Dijkstra算法-spfa算法）"><a href="#HDU-2066-一个人的旅行（最短路，多起点多终点，Dijkstra算法-spfa算法）" class="headerlink" title="HDU 2066 一个人的旅行（最短路，多起点多终点，Dijkstra算法+spfa算法）"></a>HDU 2066 一个人的旅行（最短路，多起点多终点，Dijkstra算法+spfa算法）</h3><p><strong>Problem Description</strong><br>虽然草儿是个路痴（就是在杭电待了一年多，居然还会在校园里迷路的人，汗~),但是草儿仍然很喜欢旅行，因为在旅途中 会遇见很多人（白马王子，^0^），很多事，还能丰富自己的阅历，还可以看美丽的风景……草儿想去很多地方，她想要去东京铁塔看夜景，去威尼斯看电影，去阳明山上看海芋，去纽约纯粹看雪景，去巴黎喝咖啡写信，去北京探望孟姜女……眼看寒假就快到了，这么一大段时间，可不能浪费啊，一定要给自己好好的放个假，可是也不能荒废了训练啊，所以草儿决定在要在最短的时间去一个自己想去的地方！因为草儿的家在一个小镇上，没有火车经过，所以她只能去邻近的城市坐火车（好可怜啊~）。</p><p><strong>Input</strong><br>输入数据有多组，每组的第一行是三个整数T，S和D，表示有T条路，和草儿家相邻的城市的有S个，草儿想去的地方有D个；<br>接着有T行，每行有三个整数a，b，time,表示a,b城市之间的车程是time小时；(1=&lt;(a,b)&lt;=1000;a,b 之间可能有多条路)<br>接着的第T+1行有S个数，表示和草儿家相连的城市；<br>接着的第T+2行有D个数，表示草儿想去地方。</p><p><strong>Output</strong></p><p>输出草儿能去某个喜欢的城市的最短时间。</p><p><strong>分析：</strong></p><p><a href="http://blog.51cto.com/ahalei/1387799" rel="external nofollow noopener noreferrer" target="_blank">http://blog.51cto.com/ahalei/1387799</a></p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> dis[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dij</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dis[i]=a[<span class="number">0</span>][i];</span><br><span class="line">        vis[i]=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    vis[<span class="number">0</span>]=<span class="literal">true</span>;</span><br><span class="line">    dis[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> minn=INF;</span><br><span class="line">        <span class="keyword">int</span> p;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[j]&amp;&amp;dis[j]&lt;minn)</span><br><span class="line">            &#123;</span><br><span class="line">                minn=dis[p=j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[p]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(minn==INF) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[j]&amp;&amp;dis[j]&gt;dis[p]+a[p][j])</span><br><span class="line">                dis[j]=dis[p]+a[p][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t,s,d;</span><br><span class="line">    <span class="keyword">int</span> x,y,z;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;t,&amp;s,&amp;d)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        n=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(a,INF,<span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="keyword">while</span>(t--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">            <span class="keyword">if</span>(z&lt;a[x][y])</span><br><span class="line">                a[x][y]=a[y][x]=z;</span><br><span class="line">            n=max(n,max(x,y));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(s--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">            a[<span class="number">0</span>][x]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Dij();</span><br><span class="line">        <span class="keyword">int</span> minn=INF;</span><br><span class="line">        <span class="keyword">while</span>(d--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">            minn=min(minn,dis[x]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,minn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HDU-2067-小兔的棋盘（卡塔兰数）"><a href="#HDU-2067-小兔的棋盘（卡塔兰数）" class="headerlink" title="HDU 2067 小兔的棋盘（卡塔兰数）"></a>HDU 2067 小兔的棋盘（卡塔兰数）</h3><p><strong>Problem Description</strong></p><p>小兔的叔叔从外面旅游回来给她带来了一个礼物，小兔高兴地跑回自己的房间，拆开一看是一个棋盘，小兔有所失望。不过没过几天发现了棋盘的好玩之处。从起点(0，0)走到终点(n,n)的最短路径数是C(2n,n),现在小兔又想如果不穿越对角线(但可接触对角线上的格点)，这样的路径数有多少?小兔想了很长时间都没想出来，现在想请你帮助小兔解决这个问题，对于你来说应该不难吧!</p><p><strong>Input</strong></p><p>每次输入一个数n(1&lt;=n&lt;=35)，当n等于－1时结束输入。</p><p><strong>Output</strong></p><p>对于每个输入数据输出路径数，具体格式看Sample。</p><p><strong>分析：</strong></p><p><a href="https://zh.wikipedia.org/wiki/%E5%8D%A1%E5%A1%94%E5%85%B0%E6%95%B0" rel="external nofollow noopener noreferrer" target="_blank">https://zh.wikipedia.org/wiki/%E5%8D%A1%E5%A1%94%E5%85%B0%E6%95%B0</a></p><p>遇到类似题型带公式即可</p><p>卡特兰数又称卡塔兰数，英文名Catalan number，是<a href="http://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=305948" rel="external nofollow noopener noreferrer" target="_blank">组合数学</a>中一个常出现在各种计数问题中出现的<a href="http://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=411910" rel="external nofollow noopener noreferrer" target="_blank">数列</a>。由以<a href="http://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=43034" rel="external nofollow noopener noreferrer" target="_blank">比利时</a>的数学家欧仁·查理·卡塔兰 (1814–1894)命名，其前几项为 : 1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, 742900, 2674440, 9694845, 35357670, 129644790, 477638700, 1767263190, 6564120420, 24466267020, 91482563640, 343059613650, 1289904147324, 4861946401452, …</p><p>令h(0)=1,h(1)=1，catalan数满足<a href="http://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=10854267&amp;ss_c=ssc.citiao.link" rel="external nofollow noopener noreferrer" target="_blank">递推式</a><a href="http://baike.sogou.com/v9693847.htm#quote1" rel="external nofollow noopener noreferrer" target="_blank">[1]</a>：</p><p>h(n)= h(0)<em>h(n-1)+h(1)</em>h(n-2) + … + h(n-1)h(0) (n&gt;=2)</p><p>例如：h(2)=h(0)<em>h(1)+h(1)</em>h(0)=1<em>1+1</em>1=2</p><p>h(3)=h(0)<em>h(2)+h(1)</em>h(1)+h(2)<em>h(0)=1</em>2+1<em>1+2</em>1=5</p><p>另类递推式<a href="http://baike.sogou.com/v9693847.htm#quote2" rel="external nofollow noopener noreferrer" target="_blank">[2]</a>：</p><p>h(n)=h(n-1)<em>(4</em>n-2)/(n+1);</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   __int64 a[<span class="number">36</span>];</span><br><span class="line">   a[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">35</span>;i++)</span><br><span class="line">   a[i]=a[i<span class="number">-1</span>]*<span class="number">1.0</span>/(i+<span class="number">1</span>)*(<span class="number">4</span>*i<span class="number">-2</span>);</span><br><span class="line"><span class="comment">//先除再乘，防止溢出。注意要乘1.0.。。。</span></span><br><span class="line">   <span class="keyword">int</span> n,flag=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)&amp;&amp;n&gt;<span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"%d %d %I64d\n"</span>,++flag,n,<span class="number">2</span>*a[n]);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HDU2069-Coin-Change-DP-背包"><a href="#HDU2069-Coin-Change-DP-背包" class="headerlink" title="HDU2069 Coin Change(DP 背包)"></a>HDU2069 Coin Change(DP 背包)</h3><p><strong>Problem Description</strong></p><p>Suppose there are 5 types of coins: 50-cent, 25-cent, 10-cent, 5-cent, and 1-cent. We want to make changes with these coins for a given amount of money.</p><p>For example, if we have 11 cents, then we can make changes with one 10-cent coin and one 1-cent coin, or two 5-cent coins and one 1-cent coin, or one 5-cent coin and six 1-cent coins, or eleven 1-cent coins. So there are four ways of making changes for 11 cents with the above coins. Note that we count that there is one way of making change for zero cent.</p><p>Write a program to find the total number of different ways of making changes for any amount of money in cents. Your program should be able to handle up to 100 coins.</p><p><strong>Input</strong></p><p>The input file contains any number of lines, each one consisting of a number ( ≤250 ) for the amount of money in cents.</p><p><strong>Output</strong></p><p>For each input line, output a line containing the number of different ways of making changes with the above 5 types of coins.</p><p><strong>分析：</strong></p><p>动态规划问题，同时也是01背包问题，需要写出状态转换方程然后求解</p><p><a href="https://blog.csdn.net/wzy_1988/article/details/12260343" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/wzy_1988/article/details/12260343</a></p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> a[<span class="number">5</span>]=&#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">25</span>,<span class="number">50</span>&#125;;</span><br><span class="line">LL dp[<span class="number">255</span>][<span class="number">101</span>];<span class="comment">//dp[j][k]:用k个硬币组成j值的个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;res[n]&lt;&lt;endl;</span></span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">100</span>;k++)&#123;<span class="comment">//k个硬币</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=a[i];j&lt;=n;j++)&#123;</span><br><span class="line">                    dp[j][k]+=dp[j-a[i]][k<span class="number">-1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">            res+=dp[n][i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小技巧："><a href="#小技巧：" class="headerlink" title="小技巧："></a>小技巧：</h3><h5 id="输出控制："><a href="#输出控制：" class="headerlink" title="输出控制："></a>输出控制：</h5><p>c++中用cout输出，要求保留两位小数，比如，输出100，则为100.00</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span>&lt;&lt;setiosflags(ios::fixed)&lt;&lt;setprecision(<span class="number">2</span>)&lt;&lt;<span class="number">456.777</span>&lt;&lt;<span class="built_in">endl</span></span><br></pre></td></tr></table></figure><h5 id="标准开头："><a href="#标准开头：" class="headerlink" title="标准开头："></a>标准开头：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;r)!=EOF)</span><br></pre></td></tr></table></figure><h5 id="16进制数相加："><a href="#16进制数相加：" class="headerlink" title="16进制数相加："></a>16进制数相加：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%I64X%I64X"</span>,&amp;a,&amp;b)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;都说HDU 2000-2099 是acm入门必刷题，为了备战蓝桥杯，巩固知识，我做了一些小笔记与总结。&lt;br&gt;&lt;!-- ![](https://i1.hoopchina.com.cn/hupuapp/bbs/180153855732716/thread_180153855732716_20181109165433_s_24245_w_456_h_256_98723.jpg?x-oss-process=image/resize,w_800/format,webp) --&gt;&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="http://leomalik.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://leomalik.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://leomalik.github.io/hello-world.html"/>
    <id>http://leomalik.github.io/hello-world.html</id>
    <published>2019-02-02T02:47:34.190Z</published>
    <updated>2019-02-08T14:11:58.859Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" rel="external nofollow noopener noreferrer" target="_blank">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" rel="external nofollow noopener noreferrer" target="_blank">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" rel="external nofollow noopener noreferrer" target="_blank">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" rel="external nofollow noopener noreferrer" target="_blank">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" rel="external nofollow noopener noreferrer" target="_blank">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" rel="external nofollow noopener noreferrer" target="_blank">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" rel="external nofollow noopener noreferrer" target="_blank">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" rel="external nofollow noopener noreferrer" target="_blank">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="tests" scheme="http://leomalik.github.io/tags/tests/"/>
    
  </entry>
  
</feed>
